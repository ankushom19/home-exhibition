(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict';

require('./polyfills/animFramePolyfill');
require('./polyfills/bindPolyfill');
require('./polyfills/indexOfPolyfill');

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);
TweenLite.defaultEase = window.Quad.easeInOut;

require('./libs/waypointLib');
  
var APP = require('./modules/appModule');
var SCENE = require('./modules/sceneModule');
var SOUNDS = require('./modules/soundsModule');
var HASH = require('./modules/hashModule');

var ImagesLoader = require('./classes/LoaderClass');

var Loader = require('./objects2D/LoaderObject2D');
var Menu = require('./objects2D/menuObject2D');
var Help = require('./objects2D/HelpObject2D');
var Wireframe = require('./objects2D/WireframeObject2D');

var helloSection = require('./sections/helloSection');
var beamsSection = require('./sections/beamsSection');
var dropSection = require('./sections/dropSection');
var ballSection = require('./sections/ballSection');
var flowSection = require('./sections/flowSection');
var neonsSection = require('./sections/neonsSection');
var heightSection = require('./sections/heightSection');
var waveSection = require('./sections/waveSection');
var faceSection = require('./sections/faceSection');
var rocksSection = require('./sections/rocksSection');
var galaxySection = require('./sections/galaxySection');
var gravitySection = require('./sections/gravitySection');
var citySection = require('./sections/citySection');
var endSection = require('./sections/endSection');

jQuery(function () {
  HASH.replacePlaceholders();

  var loader = new Loader();
  var help = new Help();
  var menu = new Menu();
  var imagesLoader = new ImagesLoader([
    './app/public/img/texture-ball.png',
    './app/public/img/texture-ballAlpha.png',
    './app/public/img/sprite-smoke.png',
    './app/public/img/sprite-AKQA.png'
  ]);

  // preload
  imagesLoader.start();

  imagesLoader.onProgress(function (percent) {
    loader.update(percent);
  });

  imagesLoader.onComplete(function () {
    loader.out();

    TweenLite.delayedCall(0.8, SCENE.in);
    TweenLite.delayedCall(1.5, function () {
      map.in();
      menu.in();
    });
  });

  menu.onClick(function () {
    var $el = jQuery(this);
    var name = $el.attr('data-button') || '';

    if (name === 'sounds') {
      SOUNDS.toggle();
      $el.html(SOUNDS.isMuted() ? 'UNMUTE' : 'MUTE');
    }
    else if (name === 'help') {
      help.in();
    }
    else if (name === 'quality') {
      var text;
      var quality;

      if (SCENE.getQuality() === 0.5) {
        text = 'QUALITY 1';
        quality = 1;
      } else {
        text = 'QUALITY 0.5';
        quality = 0.5;
      }

      $el.html(text);
      SCENE.quality(quality);
    }
  });  
    
  // scene
  var $heads = jQuery('.heads');
  var $viewport = $heads.find('.heads__viewport');

  SCENE.config({ quality: 1 });
  SCENE.setViewport($viewport);
  SCENE.addSections([
    helloSection,
    beamsSection,
    dropSection,
    ballSection,
    flowSection,
    neonsSection,
    heightSection,
    waveSection,
    faceSection,
    rocksSection,
    galaxySection,
    gravitySection,
    citySection,
    endSection
  ]);

  SCENE.on('section:changeBegin', function () {
    var way = this.way;
    var to = this.to.name;
    var from = this.from.name;

    // in begin
    if (to === 'hello') {
      helloSection.in();
      helloSection.start();
      helloSection.smokeStart();

      beamsSection.out('up');
      beamsSection.start();
    }
    else if (to === 'beams') {
      helloSection.smokeStart();

      beamsSection.in();
      beamsSection.start();
    }
    else if (to === 'drop') {
      beamsSection.out('down');
      beamsSection.start();

      dropSection.in();
      dropSection.start();
    }
    else if (to === 'ball') {
      dropSection.out('down');
      dropSection.start();

      ballSection.in();
      ballSection.start();

      flowSection.fieldIn();
      flowSection.start();
    }
    else if (to === 'flow') {
      flowSection.in();
      flowSection.fieldIn();
      flowSection.start();

      neonsSection.smokeStart();
    }
    else if (to === 'neons') {
      flowSection.fieldIn();
      flowSection.start();

      neonsSection.start();
      neonsSection.smokeStart();

      heightSection.show();
    }
    else if (to === 'height') {
      flowSection.fieldIn();
      flowSection.start();

      neonsSection.smokeStart();

      heightSection.show();
      heightSection.in();
      heightSection.start();
    }
    else if (to === 'wave') {
      heightSection.show();

      waveSection.in(way);
      waveSection.start();
    }
    else if (to === 'face') {
      faceSection.in();
      faceSection.start();

      rocksSection.show();
    }
    else if (to === 'rocks') {
      rocksSection.show();
      rocksSection.in();
      rocksSection.start();
    }
    else if (to === 'galaxy') {
      rocksSection.show();

      galaxySection.in(way);
      galaxySection.start();

      gravitySection.show();
    }
    else if (to === 'gravity') {
      gravitySection.show();
      gravitySection.in();
      gravitySection.start();
    }
    else if (to === 'end') {
      endSection.in();
    }

    // out begin
    if (from === 'hello') {
      helloSection.out(way);
    }
    else if (from === 'beams') {
      beamsSection.out(way);
    }
    else if (from === 'drop') {
      dropSection.out(way);
    }
    else if (from === 'ball') {
      ballSection.out(way);
    }
    else if (from === 'flow') {
      flowSection.out(way);
    }
    else if (from === 'neons') {
      neonsSection.out(way);
    }
    else if (from === 'height') {
      heightSection.out(way);
    }
    else if (from === 'wave') {
      waveSection.out(way);
    }
    else if (from === 'face') {
      faceSection.out(way);
    }
    else if (from === 'rocks') {
      rocksSection.out(way);
    }
    else if (from === 'galaxy') {
      galaxySection.out(way);
    }
    else if (from === 'gravity') {
      gravitySection.out(way);
    }
    else if (from === 'end') {
      endSection.out(way);
    }
  });

  SCENE.on('section:changeComplete', function () {
    var to = this.to.name;
    var from = this.from.name;

    // out complete
    if (from === 'hello') {
      helloSection.stop();

      if (to !== 'beams') {
        helloSection.smokeStop();
      }

      if (to !== 'beams' && to !== 'drop') {
        beamsSection.stop();
      }
    }
    else if (from === 'beams') {
      if (to !== 'hello') {
        helloSection.smokeStop();
      }

      if (to !== 'hello' && to !== 'drop') {
        beamsSection.stop();
      }
    }
    else if (from === 'drop') {
      if (to !== 'hello' && to !== 'beams') {
        beamsSection.stop();
      }

      if (to !== 'ball') {
        dropSection.stop();
      }
    }
    else if (from === 'ball') {
      ballSection.stop();

      if (to !== 'drop') {
        dropSection.stop();
      }

      if (to !== 'flow' && to !== 'neons' && to !== 'height') {
        flowSection.stop();
      }
    }
    else if (from === 'flow') {
      if (to !== 'neons' && to !== 'height') {
        neonsSection.smokeStop();
      }

      if (to !== 'ball' && to !== 'neons' && to !== 'height') {
        flowSection.stop();
      }
    }
    else if (from === 'neons') {
      neonsSection.stop();

      if (to !== 'flow' && to !== 'height') {
        neonsSection.smokeStop();
      }

      if (to !== 'ball' && to !== 'flow' && to !== 'height') {
        flowSection.stop();
      }

      if (to !== 'height' && to !== 'wave') {
        heightSection.hide();
      }
    }
    else if (from === 'height') {
      heightSection.stop();

      if (to !== 'neons' && to !== 'wave') {
        heightSection.hide();
      }

      if (to !== 'flow' && to !== 'neons') {
        neonsSection.smokeStop();
      }

      if (to !== 'ball' && to !== 'flow' && to !== 'neons') {
        flowSection.stop();
      }
    }
    else if (from === 'wave') {
      waveSection.stop();

      if (to !== 'neons' && to !== 'height') {
        heightSection.hide();
      }
    }
    else if (from === 'face') {
      faceSection.stop();

      if (to !== 'rocks' && to !== 'galaxy') {
        rocksSection.hide();
      }
    }
    else if (from === 'rocks') {
      rocksSection.stop();

      if (to !== 'face' && to !== 'galaxy') {
        rocksSection.hide();
      }
    }
    else if (from === 'galaxy') {
      galaxySection.stop();

      if (to !== 'face' && to !== 'rocks') {
        rocksSection.hide();
      }

      if (to !== 'gravity') {
        gravitySection.hide();
      }
    }
    else if (from === 'gravity') {
      gravitySection.stop();

      if (to !== 'galaxy') {
        gravitySection.hide();
      }
    }
  });

  SCENE.on('end', function () {
    SCENE.lock();
    APP.slide(SCENE.unlock);
  });

  // map
  var map = SCENE.getMap();

  $heads.prepend(map.$el);

  map.init();

  map.onClick(function (index) {
    SCENE.goTo(index);
  });

  SCENE.on('section:changeBegin', function () {
    map.setActive(this.to.index);
  });

  // tails
  var wireframe = new Wireframe(jQuery('.wireframe'));

  var $tailsSections = jQuery('.tails__section');
  $tailsSections.find('.tails__section__el').animate({ opacity: 0, y: 100 }, 0);

  var waypoint = $tailsSections.waypoint({
    $viewport: jQuery('.tails'),
    offset: 30
  });

  $tailsSections.on('active', function () {
    var $el = jQuery(this);
    
    if ($el.attr('data-appeared')) {
      return false;
    }

    jQuery(this).find('.tails__section__el').each(function (i) {
      jQuery(this).stop().delay(i * 100).animate({ opacity: 1, y: 0 }, 500);
    });

    $el.attr('data-appeared', true);
  });

  jQuery('.tails__section--site').on('stateChange', function (e, state) {
    if (state === 'active') {
      wireframe.start();
      wireframe.in();
    } else {
      wireframe.stop();
    }
  });

  APP.on('slideBegin', function () {
    if (this.to === 'heads') {
      waypoint.stop();

      try {
        SOUNDS.background.fadeIn(1, 2000);  
      } catch (e) {
        console.warn(e);
      }
      
    } else {
      SOUNDS.background.fadeOut(0, 2000);
    }
  });

  APP.on('slideComplete', function () {
    if (this.to === 'tails') {
      waypoint.start();
    }
  });
 
  // SCENE on/off
  APP.on('heads:visible', function () {
    SCENE.start();
  });

  APP.on('heads:invisible', function () {
    SCENE.stop();
  });

  APP.start();
  SCENE.start();

  SOUNDS.background.fadeIn(1, 2000);
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./classes/LoaderClass":3,"./libs/waypointLib":7,"./modules/appModule":11,"./modules/hashModule":12,"./modules/sceneModule":13,"./modules/soundsModule":14,"./objects2D/HelpObject2D":15,"./objects2D/LoaderObject2D":18,"./objects2D/WireframeObject2D":21,"./objects2D/menuObject2D":22,"./polyfills/animFramePolyfill":43,"./polyfills/bindPolyfill":44,"./polyfills/indexOfPolyfill":45,"./sections/ballSection":46,"./sections/beamsSection":47,"./sections/citySection":48,"./sections/dropSection":49,"./sections/endSection":50,"./sections/faceSection":51,"./sections/flowSection":52,"./sections/galaxySection":53,"./sections/gravitySection":54,"./sections/heightSection":55,"./sections/helloSection":56,"./sections/neonsSection":57,"./sections/rocksSection":58,"./sections/waveSection":59}],2:[function(require,module,exports){
'use strict';

/**
 * Event bus
 *
 * @class Events
 * @constructor
 */
function Events () {
  this.events = {};
  this.id = -1;
}

/**
 * Register event
 *
 * @method on
 * @param {String} [name]
 * @param {Function} [callback]
 * @return {Number} [id]
 */
Events.prototype.on = function (name, callback) {
  if (!this.events[name]) {
    this.events[name] = [];
  }

  var id = (++this.id).toString();

  this.events[name].push({
    id: id,
    callback: callback
  });

  return id;
};

/**
 * Trigger event
 *
 * @method trigger
 * @param {String} [name]
 * @param {Object} [data]
 */
Events.prototype.trigger = function (name, data) {
  if (!this.events[name]) {
    return false;
  }

  var suscribers = this.events[name];
  for (var i = 0, j = suscribers.length; i < j; i++) {
    suscribers[i].callback.apply(data);
  }
};

module.exports = Events;
},{}],3:[function(require,module,exports){
'use strict';

/**
 * Preload images. Notify on update/complete
 *
 * @class ImagesLoader
 * @constructor
 * @param {Array} [images=[]] Images sources
 */
function ImagesLoader (images) {
  this.images = images || [];
  this.total = this.images.length;

  var fn = function () {};
  this.progress = fn;
  this.complete = fn;
}

/**
 * Start to preload
 *
 * @method start
 */
ImagesLoader.prototype.start = function () {
  var loaded = 0;

  var updateQueue = function () {
    loaded++;

    var percent = (loaded * 100) / this.total;
    this.progress(percent);

    if (loaded === this.total) {
      this.complete();
    }
  }.bind(this);

  for (var i = 0; i < this.total; i++) {
    var image = new Image();
    image.src = this.images[i];
    image.onload = image.onerror = updateQueue;
  }
};

/**
 * Pass the update handler
 *
 * @method onProgress
 * @param {Function} [progress] 
 */
ImagesLoader.prototype.onProgress = function (progress) {
  this.progress = progress;
};

/**
 * Pass the complete handler
 *
 * @method onComplete
 * @param {Function} [complete] 
 */
ImagesLoader.prototype.onComplete = function (complete) {
  this.complete = complete;
};

module.exports = ImagesLoader;
},{}],4:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

/**
 * Section class
 * 
 * @class Section
 * @constructor
 * @param {String} [name]
 * @requires THREE
 */
function Section (name) {
  this.name = name;
  this.playing = false;

  var fn = function () {};
  this._in = fn;
  this._out = fn;
  this._start = fn;
  this._stop = fn;

  this.el = new THREE.Object3D();
}

/**
 * Add a new object
 *
 * @method add
 * @param {THREE.Object3D} [object]
 */
Section.prototype.add = function (object) {
  this.el.add(object);
};

/**
 * Section's in animation
 *
 * @method in
 * @param {String} [way]
 */
Section.prototype.in = function (way) {
  this._in(way);
};

/**
 * Section's out animation
 *
 * @method out
 * @param {String} [way]
 */
Section.prototype.out = function (way) {
  this._out(way);
};

/**
 * Start the section
 *
 * @method start
 */
Section.prototype.start = function () {
  if (this.playing) {
    return false;
  }

  this._start();

  this.playing = true;
};

/**
 * Stop the section
 *
 * @method stop
 */
Section.prototype.stop = function () {
  if (!this.playing) {
    return false;
  }

  this._stop();

  this.playing = false;
};

/**
 * Pass the in handler
 *
 * @method onIn
 * @param {Function} [callback]
 */
Section.prototype.onIn = function (callback) {
  this._in = callback;
};

/**
 * Pass the out handler
 *
 * @method onOut
 * @param {Function} [callback]
 */
Section.prototype.onOut = function (callback) {
  this._out = callback;
};

/**
 * Pass the start handler
 *
 * @method onStart
 * @param {Function} [callback]
 */
Section.prototype.onStart = function (callback) {
  this._start = callback;
};

/**
 * Pass the stop handler
 *
 * @method onStop
 * @param {Function} [callback]
 */
Section.prototype.onStop = function (callback) {
  this._stop = callback;
};

module.exports = Section;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvY2xhc3Nlcy9TZWN0aW9uQ2xhc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIFRIUkVFID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1RIUkVFJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUSFJFRSddIDogbnVsbCk7XHJcblxyXG4vKipcclxuICogU2VjdGlvbiBjbGFzc1xyXG4gKiBcclxuICogQGNsYXNzIFNlY3Rpb25cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZV1cclxuICogQHJlcXVpcmVzIFRIUkVFXHJcbiAqL1xyXG5mdW5jdGlvbiBTZWN0aW9uIChuYW1lKSB7XHJcbiAgdGhpcy5uYW1lID0gbmFtZTtcclxuICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcclxuXHJcbiAgdmFyIGZuID0gZnVuY3Rpb24gKCkge307XHJcbiAgdGhpcy5faW4gPSBmbjtcclxuICB0aGlzLl9vdXQgPSBmbjtcclxuICB0aGlzLl9zdGFydCA9IGZuO1xyXG4gIHRoaXMuX3N0b3AgPSBmbjtcclxuXHJcbiAgdGhpcy5lbCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIGEgbmV3IG9iamVjdFxyXG4gKlxyXG4gKiBAbWV0aG9kIGFkZFxyXG4gKiBAcGFyYW0ge1RIUkVFLk9iamVjdDNEfSBbb2JqZWN0XVxyXG4gKi9cclxuU2VjdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gIHRoaXMuZWwuYWRkKG9iamVjdCk7XHJcbn07XHJcblxyXG4vKipcclxuICogU2VjdGlvbidzIGluIGFuaW1hdGlvblxyXG4gKlxyXG4gKiBAbWV0aG9kIGluXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBbd2F5XVxyXG4gKi9cclxuU2VjdGlvbi5wcm90b3R5cGUuaW4gPSBmdW5jdGlvbiAod2F5KSB7XHJcbiAgdGhpcy5faW4od2F5KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZWN0aW9uJ3Mgb3V0IGFuaW1hdGlvblxyXG4gKlxyXG4gKiBAbWV0aG9kIG91dFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gW3dheV1cclxuICovXHJcblNlY3Rpb24ucHJvdG90eXBlLm91dCA9IGZ1bmN0aW9uICh3YXkpIHtcclxuICB0aGlzLl9vdXQod2F5KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTdGFydCB0aGUgc2VjdGlvblxyXG4gKlxyXG4gKiBAbWV0aG9kIHN0YXJ0XHJcbiAqL1xyXG5TZWN0aW9uLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5wbGF5aW5nKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICB0aGlzLl9zdGFydCgpO1xyXG5cclxuICB0aGlzLnBsYXlpbmcgPSB0cnVlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFN0b3AgdGhlIHNlY3Rpb25cclxuICpcclxuICogQG1ldGhvZCBzdG9wXHJcbiAqL1xyXG5TZWN0aW9uLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gIGlmICghdGhpcy5wbGF5aW5nKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICB0aGlzLl9zdG9wKCk7XHJcblxyXG4gIHRoaXMucGxheWluZyA9IGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhc3MgdGhlIGluIGhhbmRsZXJcclxuICpcclxuICogQG1ldGhvZCBvbkluXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja11cclxuICovXHJcblNlY3Rpb24ucHJvdG90eXBlLm9uSW4gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICB0aGlzLl9pbiA9IGNhbGxiYWNrO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhc3MgdGhlIG91dCBoYW5kbGVyXHJcbiAqXHJcbiAqIEBtZXRob2Qgb25PdXRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXVxyXG4gKi9cclxuU2VjdGlvbi5wcm90b3R5cGUub25PdXQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICB0aGlzLl9vdXQgPSBjYWxsYmFjaztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQYXNzIHRoZSBzdGFydCBoYW5kbGVyXHJcbiAqXHJcbiAqIEBtZXRob2Qgb25TdGFydFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdXHJcbiAqL1xyXG5TZWN0aW9uLnByb3RvdHlwZS5vblN0YXJ0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgdGhpcy5fc3RhcnQgPSBjYWxsYmFjaztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQYXNzIHRoZSBzdG9wIGhhbmRsZXJcclxuICpcclxuICogQG1ldGhvZCBvblN0b3BcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXVxyXG4gKi9cclxuU2VjdGlvbi5wcm90b3R5cGUub25TdG9wID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgdGhpcy5fc3RvcCA9IGNhbGxiYWNrO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTZWN0aW9uOyJdfQ==
},{}],5:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);

/**
 * Slider
 *
 * @class Slider
 * @constructor
 * @requires jQuery
 */
function Slider ($el) {
  this.$el = $el;

  // els
  this.$container = this.$el.find('.slider__slides');
  this.$slides = this.$container.find('.slider__slide');
  this.$map = this.$el.find('.slider__map');

  // vars
  this.totalSlides = this.$slides.length;
  this.slideWidth = 100 / this.totalSlides;
  this.current = 0;
  this.interval = null;

  // init container
  this.$container.css('width', (this.totalSlides * 100) + '%');

  // methods
  this.onResize = null;

  // init slides and map
  var $node = jQuery('<div class="slider__map__node">');
  this.$nodes = jQuery();

  this.$slides.each(function (index, el) {
    var $slide = jQuery(el);
    
    $slide.css({
      width: this.slideWidth + '%',
      left: (index * this.slideWidth) + '%'
    });

    var $nodeCopy = $node.clone();
      
    // first slide/node setup
    if (index === 0) {
      $slide.addClass('is-active');
      $nodeCopy.addClass('is-active');
    }

    this.$nodes = this.$nodes.add($nodeCopy);
  }.bind(this));

  this.$map.html(this.$nodes);

  // init resize method
  this.onResize = function () {
    var maxHeight = 0;

    this.$slides.each(function () {
      var height = jQuery(this).height();

      if (height > maxHeight) {
        maxHeight = height;
      }
    });

    maxHeight += 10;

    this.$el.css({ height: maxHeight, marginTop: -(maxHeight / 2) });
  }.bind(this);

  this.onResize();
}

/**
 * Go to next slide
 *
 * @method next
 */
Slider.prototype.next = function () {
  this.current++;

  if (this.current >= this.totalSlides) {
    this.current = 0;
  }

  this.goTo(this.current);
};

/**
 * Go to previous slide
 *
 * @method prev
 */
Slider.prototype.prev = function () {
  this.current--;

  if (this.current <= 0) {
    this.current = this.totalSlides;
  }

  this.goTo(this.current);
};

/**
 * Go to a specific slide
 *
 * @method goTo
 * @param {Number} [index] Slide's index
 */
Slider.prototype.goTo = function (index) {
  var target = -(index * 100) + '%';

  this.updateMap(index);

  this.$container.stop().animate({ left: target }, 500);

  this.$slides.removeClass('is-active');
  jQuery(this.$slides[index]).addClass('is-active');
};

/**
 * Update control nodes
 *
 * @method updateMap
 * @param {Number} [index] Current index
 */
Slider.prototype.updateMap = function (index) {
  this.$nodes.removeClass('is-active');
  jQuery(this.$nodes[index]).addClass('is-active');
};

/**
 * Start the slider
 *
 * @method start
 */
Slider.prototype.start = function () {
  this.$nodes.on('click', function (e) {
    var index = jQuery(e.currentTarget).index();
    this.goTo(index);
  }.bind(this));

  // autoplay with pause on hover
  this.interval = window.setInterval(function () {
    this.next();
  }.bind(this), 10000);

  var _this = this;
  
  this.$el.on({
    mouseenter: function () {
      window.clearInterval(_this.interval);
    },
    mouseleave: function () {
      _this.interval = window.setInterval(function () {
        _this.next();
      }, 10000);
    }
  });

  jQuery(window).on('resize', this.onResize);
  this.onResize();
};

/**
 * Stop the slider
 *
 * @method next
 */
Slider.prototype.stop = function () {
  this.$nodes.off('click');
  this.$el.off('mouseenter mouseleave');
  jQuery(window).off('resize', this.onResize);

  window.clearInterval(this.interval);
};

module.exports = Slider;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvbGlicy9zbGlkZXJMaWIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgalF1ZXJ5ID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ2pRdWVyeSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnalF1ZXJ5J10gOiBudWxsKTtcclxuXHJcbi8qKlxyXG4gKiBTbGlkZXJcclxuICpcclxuICogQGNsYXNzIFNsaWRlclxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHJlcXVpcmVzIGpRdWVyeVxyXG4gKi9cclxuZnVuY3Rpb24gU2xpZGVyICgkZWwpIHtcclxuICB0aGlzLiRlbCA9ICRlbDtcclxuXHJcbiAgLy8gZWxzXHJcbiAgdGhpcy4kY29udGFpbmVyID0gdGhpcy4kZWwuZmluZCgnLnNsaWRlcl9fc2xpZGVzJyk7XHJcbiAgdGhpcy4kc2xpZGVzID0gdGhpcy4kY29udGFpbmVyLmZpbmQoJy5zbGlkZXJfX3NsaWRlJyk7XHJcbiAgdGhpcy4kbWFwID0gdGhpcy4kZWwuZmluZCgnLnNsaWRlcl9fbWFwJyk7XHJcblxyXG4gIC8vIHZhcnNcclxuICB0aGlzLnRvdGFsU2xpZGVzID0gdGhpcy4kc2xpZGVzLmxlbmd0aDtcclxuICB0aGlzLnNsaWRlV2lkdGggPSAxMDAgLyB0aGlzLnRvdGFsU2xpZGVzO1xyXG4gIHRoaXMuY3VycmVudCA9IDA7XHJcbiAgdGhpcy5pbnRlcnZhbCA9IG51bGw7XHJcblxyXG4gIC8vIGluaXQgY29udGFpbmVyXHJcbiAgdGhpcy4kY29udGFpbmVyLmNzcygnd2lkdGgnLCAodGhpcy50b3RhbFNsaWRlcyAqIDEwMCkgKyAnJScpO1xyXG5cclxuICAvLyBtZXRob2RzXHJcbiAgdGhpcy5vblJlc2l6ZSA9IG51bGw7XHJcblxyXG4gIC8vIGluaXQgc2xpZGVzIGFuZCBtYXBcclxuICB2YXIgJG5vZGUgPSBqUXVlcnkoJzxkaXYgY2xhc3M9XCJzbGlkZXJfX21hcF9fbm9kZVwiPicpO1xyXG4gIHRoaXMuJG5vZGVzID0galF1ZXJ5KCk7XHJcblxyXG4gIHRoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWwpIHtcclxuICAgIHZhciAkc2xpZGUgPSBqUXVlcnkoZWwpO1xyXG4gICAgXHJcbiAgICAkc2xpZGUuY3NzKHtcclxuICAgICAgd2lkdGg6IHRoaXMuc2xpZGVXaWR0aCArICclJyxcclxuICAgICAgbGVmdDogKGluZGV4ICogdGhpcy5zbGlkZVdpZHRoKSArICclJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyICRub2RlQ29weSA9ICRub2RlLmNsb25lKCk7XHJcbiAgICAgIFxyXG4gICAgLy8gZmlyc3Qgc2xpZGUvbm9kZSBzZXR1cFxyXG4gICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICRzbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICAgICRub2RlQ29weS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4kbm9kZXMgPSB0aGlzLiRub2Rlcy5hZGQoJG5vZGVDb3B5KTtcclxuICB9LmJpbmQodGhpcykpO1xyXG5cclxuICB0aGlzLiRtYXAuaHRtbCh0aGlzLiRub2Rlcyk7XHJcblxyXG4gIC8vIGluaXQgcmVzaXplIG1ldGhvZFxyXG4gIHRoaXMub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgbWF4SGVpZ2h0ID0gMDtcclxuXHJcbiAgICB0aGlzLiRzbGlkZXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBoZWlnaHQgPSBqUXVlcnkodGhpcykuaGVpZ2h0KCk7XHJcblxyXG4gICAgICBpZiAoaGVpZ2h0ID4gbWF4SGVpZ2h0KSB7XHJcbiAgICAgICAgbWF4SGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBtYXhIZWlnaHQgKz0gMTA7XHJcblxyXG4gICAgdGhpcy4kZWwuY3NzKHsgaGVpZ2h0OiBtYXhIZWlnaHQsIG1hcmdpblRvcDogLShtYXhIZWlnaHQgLyAyKSB9KTtcclxuICB9LmJpbmQodGhpcyk7XHJcblxyXG4gIHRoaXMub25SZXNpemUoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdvIHRvIG5leHQgc2xpZGVcclxuICpcclxuICogQG1ldGhvZCBuZXh0XHJcbiAqL1xyXG5TbGlkZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy5jdXJyZW50Kys7XHJcblxyXG4gIGlmICh0aGlzLmN1cnJlbnQgPj0gdGhpcy50b3RhbFNsaWRlcykge1xyXG4gICAgdGhpcy5jdXJyZW50ID0gMDtcclxuICB9XHJcblxyXG4gIHRoaXMuZ29Ubyh0aGlzLmN1cnJlbnQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdvIHRvIHByZXZpb3VzIHNsaWRlXHJcbiAqXHJcbiAqIEBtZXRob2QgcHJldlxyXG4gKi9cclxuU2xpZGVyLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMuY3VycmVudC0tO1xyXG5cclxuICBpZiAodGhpcy5jdXJyZW50IDw9IDApIHtcclxuICAgIHRoaXMuY3VycmVudCA9IHRoaXMudG90YWxTbGlkZXM7XHJcbiAgfVxyXG5cclxuICB0aGlzLmdvVG8odGhpcy5jdXJyZW50KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHbyB0byBhIHNwZWNpZmljIHNsaWRlXHJcbiAqXHJcbiAqIEBtZXRob2QgZ29Ub1xyXG4gKiBAcGFyYW0ge051bWJlcn0gW2luZGV4XSBTbGlkZSdzIGluZGV4XHJcbiAqL1xyXG5TbGlkZXIucHJvdG90eXBlLmdvVG8gPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICB2YXIgdGFyZ2V0ID0gLShpbmRleCAqIDEwMCkgKyAnJSc7XHJcblxyXG4gIHRoaXMudXBkYXRlTWFwKGluZGV4KTtcclxuXHJcbiAgdGhpcy4kY29udGFpbmVyLnN0b3AoKS5hbmltYXRlKHsgbGVmdDogdGFyZ2V0IH0sIDUwMCk7XHJcblxyXG4gIHRoaXMuJHNsaWRlcy5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgalF1ZXJ5KHRoaXMuJHNsaWRlc1tpbmRleF0pLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgY29udHJvbCBub2Rlc1xyXG4gKlxyXG4gKiBAbWV0aG9kIHVwZGF0ZU1hcFxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2luZGV4XSBDdXJyZW50IGluZGV4XHJcbiAqL1xyXG5TbGlkZXIucHJvdG90eXBlLnVwZGF0ZU1hcCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gIHRoaXMuJG5vZGVzLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuICBqUXVlcnkodGhpcy4kbm9kZXNbaW5kZXhdKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcbn07XHJcblxyXG4vKipcclxuICogU3RhcnQgdGhlIHNsaWRlclxyXG4gKlxyXG4gKiBAbWV0aG9kIHN0YXJ0XHJcbiAqL1xyXG5TbGlkZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMuJG5vZGVzLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgaW5kZXggPSBqUXVlcnkoZS5jdXJyZW50VGFyZ2V0KS5pbmRleCgpO1xyXG4gICAgdGhpcy5nb1RvKGluZGV4KTtcclxuICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAvLyBhdXRvcGxheSB3aXRoIHBhdXNlIG9uIGhvdmVyXHJcbiAgdGhpcy5pbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLm5leHQoKTtcclxuICB9LmJpbmQodGhpcyksIDEwMDAwKTtcclxuXHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICBcclxuICB0aGlzLiRlbC5vbih7XHJcbiAgICBtb3VzZWVudGVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKF90aGlzLmludGVydmFsKTtcclxuICAgIH0sXHJcbiAgICBtb3VzZWxlYXZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIF90aGlzLmludGVydmFsID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdGhpcy5uZXh0KCk7XHJcbiAgICAgIH0sIDEwMDAwKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUpO1xyXG4gIHRoaXMub25SZXNpemUoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTdG9wIHRoZSBzbGlkZXJcclxuICpcclxuICogQG1ldGhvZCBuZXh0XHJcbiAqL1xyXG5TbGlkZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy4kbm9kZXMub2ZmKCdjbGljaycpO1xyXG4gIHRoaXMuJGVsLm9mZignbW91c2VlbnRlciBtb3VzZWxlYXZlJyk7XHJcbiAgalF1ZXJ5KHdpbmRvdykub2ZmKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplKTtcclxuXHJcbiAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNsaWRlcjsiXX0=
},{}],6:[function(require,module,exports){
(function (global){
'use strict';
  
var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

/**
 * Sprite animation on a mesh using texture's offset
 *
 * @module SPRITE3D
 * @requires jQuery, THREE
 */
var SPRITE3D = SPRITE3D || (function () {
  var sprites = [];
  var previousTime = Date.now();

  return {
    /**
     * Add a new Sprite to the render queue
     *
     * @method add
     * @param {SPRITE3D.Sprite} [Sprite]
     */
    add: function (Sprite) {
      // update previousTime to avoid frame jumping
      // if inactive for too long
      if (sprites.length === 0) {
        previousTime = Date.now();
      }

      sprites.push(Sprite);
    },

    /**
     * Remove a Sprite from the render queue
     *
     * @method remove
     * @param {SPRITE3D.Sprite} [Sprite]
     */
    remove: function (Sprite) {
      var i = sprites.indexOf(Sprite);

      if (i !== -1) {
        sprites.splice(i, 1);
      }
    },

    /**
     * Update Sprites in the render queue
     *
     * @method update
     */
    update: function () {
      if (!sprites.length) {
        return false;
      }

      var time = Date.now();
      var delta = time - previousTime;
      previousTime = time;

      var i = 0;

      while (i < sprites.length) {
        if (sprites[i].update(delta)) {
          i++;
        } else {
          sprites.splice(i, 1);
        }
      }
    }
  };
})();

/**
 * Sprite
 *
 * @class SPRITE3D.Sprite
 * @constructor
 * @param {THREE.Texture} [texture]
 * @param {Object} [options]
 * @params {Number} [options.duration=100] Time per image
 * @params {Number} [options.horizontal=1] Horizontal steps
 * @params {Number} [options.vertical=1] Vertical steps
 * @params {Number} [options.total=1] Total steps
 * @params {Boolean} [options.loop=true] Loop?
 * @requires SPRITE3D, jQuery, THREE
 */
SPRITE3D.Sprite = function (texture, options) {
  this.texture = texture;

  this.parameters = jQuery.extend({
    duration: 100,
    horizontal: 1,
    vertical: 1,
    total: 1,
    loop: true
  }, options);

  this.texture.wrapS = texture.wrapT = THREE.RepeatWrapping; 
  this.texture.repeat.set(1 / this.parameters.horizontal, 1 / this.parameters.vertical);
  this.texture.offset.x = this.texture.offset.y = 1;

  this.isPlaying = false;
  this.current = 0;
  this.currentTime = 0;
};

/**
 * Start the animation (add it to render queue)
 *
 * @method start
 */
SPRITE3D.Sprite.prototype.start = function () {
  if (this.isPlaying) {
    return false;
  }

  SPRITE3D.add(this);

  this.isPlaying = true;
};

/**
 * Stop the animation (remove it from render queue)
 *
 * @method stop
 */
SPRITE3D.Sprite.prototype.stop = function () {
  if (!this.isPlaying) {
    return false;
  }

  SPRITE3D.remove(this);

  this.isPlaying = false;
};

/**
 * Update thre Sprite
 *
 * @method update
 * @param {Number} [delta] Time delta (time elapsed since last update)
 */
SPRITE3D.Sprite.prototype.update = function (delta) {
  this.currentTime += delta;

  while (this.currentTime > this.parameters.duration) {
    this.currentTime -= this.parameters.duration;

    this.current++;

    if (this.current === this.parameters.total - 1) {
      if (this.parameters.loop) {
        this.current = 0;  
      } else {
        this.current = 0;
        this.stop();
        return false;
      }
    }

    var factor = this.parameters.total - this.current;

    var row = Math.floor(factor / this.parameters.horizontal);
    var col = Math.floor(factor % this.parameters.horizontal);

    this.texture.offset.x = col / this.parameters.horizontal;
    this.texture.offset.y = row / this.parameters.vertical;
  }

  return true;
};

module.exports = SPRITE3D;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvbGlicy9zcHJpdGUzRExpYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbiAgXHJcbnZhciBqUXVlcnkgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snalF1ZXJ5J10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydqUXVlcnknXSA6IG51bGwpO1xyXG52YXIgVEhSRUUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVEhSRUUnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1RIUkVFJ10gOiBudWxsKTtcclxuXHJcbi8qKlxyXG4gKiBTcHJpdGUgYW5pbWF0aW9uIG9uIGEgbWVzaCB1c2luZyB0ZXh0dXJlJ3Mgb2Zmc2V0XHJcbiAqXHJcbiAqIEBtb2R1bGUgU1BSSVRFM0RcclxuICogQHJlcXVpcmVzIGpRdWVyeSwgVEhSRUVcclxuICovXHJcbnZhciBTUFJJVEUzRCA9IFNQUklURTNEIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHNwcml0ZXMgPSBbXTtcclxuICB2YXIgcHJldmlvdXNUaW1lID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgbmV3IFNwcml0ZSB0byB0aGUgcmVuZGVyIHF1ZXVlXHJcbiAgICAgKlxyXG4gICAgICogQG1ldGhvZCBhZGRcclxuICAgICAqIEBwYXJhbSB7U1BSSVRFM0QuU3ByaXRlfSBbU3ByaXRlXVxyXG4gICAgICovXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChTcHJpdGUpIHtcclxuICAgICAgLy8gdXBkYXRlIHByZXZpb3VzVGltZSB0byBhdm9pZCBmcmFtZSBqdW1waW5nXHJcbiAgICAgIC8vIGlmIGluYWN0aXZlIGZvciB0b28gbG9uZ1xyXG4gICAgICBpZiAoc3ByaXRlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBwcmV2aW91c1RpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzcHJpdGVzLnB1c2goU3ByaXRlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYSBTcHJpdGUgZnJvbSB0aGUgcmVuZGVyIHF1ZXVlXHJcbiAgICAgKlxyXG4gICAgICogQG1ldGhvZCByZW1vdmVcclxuICAgICAqIEBwYXJhbSB7U1BSSVRFM0QuU3ByaXRlfSBbU3ByaXRlXVxyXG4gICAgICovXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uIChTcHJpdGUpIHtcclxuICAgICAgdmFyIGkgPSBzcHJpdGVzLmluZGV4T2YoU3ByaXRlKTtcclxuXHJcbiAgICAgIGlmIChpICE9PSAtMSkge1xyXG4gICAgICAgIHNwcml0ZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIFNwcml0ZXMgaW4gdGhlIHJlbmRlciBxdWV1ZVxyXG4gICAgICpcclxuICAgICAqIEBtZXRob2QgdXBkYXRlXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoIXNwcml0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgdGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgIHZhciBkZWx0YSA9IHRpbWUgLSBwcmV2aW91c1RpbWU7XHJcbiAgICAgIHByZXZpb3VzVGltZSA9IHRpbWU7XHJcblxyXG4gICAgICB2YXIgaSA9IDA7XHJcblxyXG4gICAgICB3aGlsZSAoaSA8IHNwcml0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKHNwcml0ZXNbaV0udXBkYXRlKGRlbHRhKSkge1xyXG4gICAgICAgICAgaSsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzcHJpdGVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIFNwcml0ZVxyXG4gKlxyXG4gKiBAY2xhc3MgU1BSSVRFM0QuU3ByaXRlXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge1RIUkVFLlRleHR1cmV9IFt0ZXh0dXJlXVxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBwYXJhbXMge051bWJlcn0gW29wdGlvbnMuZHVyYXRpb249MTAwXSBUaW1lIHBlciBpbWFnZVxyXG4gKiBAcGFyYW1zIHtOdW1iZXJ9IFtvcHRpb25zLmhvcml6b250YWw9MV0gSG9yaXpvbnRhbCBzdGVwc1xyXG4gKiBAcGFyYW1zIHtOdW1iZXJ9IFtvcHRpb25zLnZlcnRpY2FsPTFdIFZlcnRpY2FsIHN0ZXBzXHJcbiAqIEBwYXJhbXMge051bWJlcn0gW29wdGlvbnMudG90YWw9MV0gVG90YWwgc3RlcHNcclxuICogQHBhcmFtcyB7Qm9vbGVhbn0gW29wdGlvbnMubG9vcD10cnVlXSBMb29wP1xyXG4gKiBAcmVxdWlyZXMgU1BSSVRFM0QsIGpRdWVyeSwgVEhSRUVcclxuICovXHJcblNQUklURTNELlNwcml0ZSA9IGZ1bmN0aW9uICh0ZXh0dXJlLCBvcHRpb25zKSB7XHJcbiAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcclxuXHJcbiAgdGhpcy5wYXJhbWV0ZXJzID0galF1ZXJ5LmV4dGVuZCh7XHJcbiAgICBkdXJhdGlvbjogMTAwLFxyXG4gICAgaG9yaXpvbnRhbDogMSxcclxuICAgIHZlcnRpY2FsOiAxLFxyXG4gICAgdG90YWw6IDEsXHJcbiAgICBsb29wOiB0cnVlXHJcbiAgfSwgb3B0aW9ucyk7XHJcblxyXG4gIHRoaXMudGV4dHVyZS53cmFwUyA9IHRleHR1cmUud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZzsgXHJcbiAgdGhpcy50ZXh0dXJlLnJlcGVhdC5zZXQoMSAvIHRoaXMucGFyYW1ldGVycy5ob3Jpem9udGFsLCAxIC8gdGhpcy5wYXJhbWV0ZXJzLnZlcnRpY2FsKTtcclxuICB0aGlzLnRleHR1cmUub2Zmc2V0LnggPSB0aGlzLnRleHR1cmUub2Zmc2V0LnkgPSAxO1xyXG5cclxuICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xyXG4gIHRoaXMuY3VycmVudCA9IDA7XHJcbiAgdGhpcy5jdXJyZW50VGltZSA9IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogU3RhcnQgdGhlIGFuaW1hdGlvbiAoYWRkIGl0IHRvIHJlbmRlciBxdWV1ZSlcclxuICpcclxuICogQG1ldGhvZCBzdGFydFxyXG4gKi9cclxuU1BSSVRFM0QuU3ByaXRlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5pc1BsYXlpbmcpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIFNQUklURTNELmFkZCh0aGlzKTtcclxuXHJcbiAgdGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFN0b3AgdGhlIGFuaW1hdGlvbiAocmVtb3ZlIGl0IGZyb20gcmVuZGVyIHF1ZXVlKVxyXG4gKlxyXG4gKiBAbWV0aG9kIHN0b3BcclxuICovXHJcblNQUklURTNELlNwcml0ZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICBpZiAoIXRoaXMuaXNQbGF5aW5nKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBTUFJJVEUzRC5yZW1vdmUodGhpcyk7XHJcblxyXG4gIHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XHJcbn07XHJcblxyXG4vKipcclxuICogVXBkYXRlIHRocmUgU3ByaXRlXHJcbiAqXHJcbiAqIEBtZXRob2QgdXBkYXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsdGFdIFRpbWUgZGVsdGEgKHRpbWUgZWxhcHNlZCBzaW5jZSBsYXN0IHVwZGF0ZSlcclxuICovXHJcblNQUklURTNELlNwcml0ZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRlbHRhKSB7XHJcbiAgdGhpcy5jdXJyZW50VGltZSArPSBkZWx0YTtcclxuXHJcbiAgd2hpbGUgKHRoaXMuY3VycmVudFRpbWUgPiB0aGlzLnBhcmFtZXRlcnMuZHVyYXRpb24pIHtcclxuICAgIHRoaXMuY3VycmVudFRpbWUgLT0gdGhpcy5wYXJhbWV0ZXJzLmR1cmF0aW9uO1xyXG5cclxuICAgIHRoaXMuY3VycmVudCsrO1xyXG5cclxuICAgIGlmICh0aGlzLmN1cnJlbnQgPT09IHRoaXMucGFyYW1ldGVycy50b3RhbCAtIDEpIHtcclxuICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy5sb29wKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gMDsgIFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY3VycmVudCA9IDA7XHJcbiAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGZhY3RvciA9IHRoaXMucGFyYW1ldGVycy50b3RhbCAtIHRoaXMuY3VycmVudDtcclxuXHJcbiAgICB2YXIgcm93ID0gTWF0aC5mbG9vcihmYWN0b3IgLyB0aGlzLnBhcmFtZXRlcnMuaG9yaXpvbnRhbCk7XHJcbiAgICB2YXIgY29sID0gTWF0aC5mbG9vcihmYWN0b3IgJSB0aGlzLnBhcmFtZXRlcnMuaG9yaXpvbnRhbCk7XHJcblxyXG4gICAgdGhpcy50ZXh0dXJlLm9mZnNldC54ID0gY29sIC8gdGhpcy5wYXJhbWV0ZXJzLmhvcml6b250YWw7XHJcbiAgICB0aGlzLnRleHR1cmUub2Zmc2V0LnkgPSByb3cgLyB0aGlzLnBhcmFtZXRlcnMudmVydGljYWw7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU1BSSVRFM0Q7Il19
},{}],7:[function(require,module,exports){
(function (global){
/* jshint laxbreak: true */

'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);

var debounce = require('../utils/debounceUtil');

module.exports = (function ($) {
  /**
   * Trigger event on element when they enter/leave viewport
   *
   * @class waypoint
   * @constructor
   * @param {Object} [options]
   * @param {jQuery} [options.$viewport=jQuery(window)] Viewport
   * @param {Number} [options.offset=0] Offset
   * @param {Number} [options.startAt=null] Start after certain distance (for performances)
   * @requires jQuery, debounce
   */
  $.fn.waypoint = function (options) {
    var isInContainer = options.$viewport ? true : false;

    var parameters = $.extend({
      $viewport: $(window),
      offset: 0,
      startAt: null
    }, options);

    var $els = $(this);
    var $viewport = parameters.$viewport;

    var viewportHeight = $viewport.height();
    var scrollTop = $viewport.scrollTop();
    var threshold = viewportHeight * (parameters.offset / 100);

    // Store height and top on elements to avoid consecutive computations
    function cacheAttributes () {
      $els.each(function () {
        var $el = $(this);

        var height = parseInt($el.outerHeight());
        var top = isInContainer
          ? parseInt($el.position().top) + scrollTop
          : parseInt($el.offset().top);

        $el.attr({ 'data-height': height, 'data-top': top });
      });
    }

    function onResize () {
      /*jshint validthis: true */

      viewportHeight = $viewport.height();
      threshold = viewportHeight * (parameters.offset / 100);

      cacheAttributes();

      $(this).trigger('scroll');
    }

    var onScroll = debounce(function onScroll () {
      scrollTop = $(this).scrollTop();

      if (parameters.startAt && scrollTop < parameters.startAt) {
        return false;
      }

      var topLimit = scrollTop + threshold;
      var bottomLimit = scrollTop + (viewportHeight - threshold);

      $els.each(function () {
        var $el = $(this);

        var state = $el.attr('data-state');

        var height = parseInt($el.attr('data-height')) || $el.outerHeight();
        var top = isInContainer
          ? parseInt($el.attr('data-top')) + 1 || $el.position().top + 1
          : parseInt($el.attr('data-top')) + 1 || $el.offset().top + 1;
        var bottom = top + height;

        if (top > topLimit && top < bottomLimit
            || bottom > topLimit && bottom < bottomLimit
            || top < topLimit && bottom > bottomLimit) {

          if (!state) {
            $el.attr('data-state', 'visible');
            $el.trigger('active');
            $el.trigger('stateChange', 'active');
          }
        } else {
          if (state) {
            $el.attr('data-state', null);
            $el.trigger('inactive');
            $el.trigger('stateChange', 'inactive');
          }
        }

      });
    }, 20);

    return {
      /**
       * Start waypoint
       *
       * @method start
       */
      start: function () {
        $(window).on('resize', onResize);
        $viewport.on('scroll', onScroll);
        cacheAttributes();
        onScroll();
      },

      /**
       * Stop waypoint
       *
       * @method stop
       */
      stop: function () {
        $(window).off('resize', onResize);
        $viewport.off('scroll', onScroll);
      }
    };
  };

})(jQuery);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvbGlicy93YXlwb2ludExpYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoganNoaW50IGxheGJyZWFrOiB0cnVlICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgalF1ZXJ5ID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ2pRdWVyeSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnalF1ZXJ5J10gOiBudWxsKTtcclxuXHJcbnZhciBkZWJvdW5jZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RlYm91bmNlVXRpbCcpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCQpIHtcclxuICAvKipcclxuICAgKiBUcmlnZ2VyIGV2ZW50IG9uIGVsZW1lbnQgd2hlbiB0aGV5IGVudGVyL2xlYXZlIHZpZXdwb3J0XHJcbiAgICpcclxuICAgKiBAY2xhc3Mgd2F5cG9pbnRcclxuICAgKiBAY29uc3RydWN0b3JcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICogQHBhcmFtIHtqUXVlcnl9IFtvcHRpb25zLiR2aWV3cG9ydD1qUXVlcnkod2luZG93KV0gVmlld3BvcnRcclxuICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMub2Zmc2V0PTBdIE9mZnNldFxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5zdGFydEF0PW51bGxdIFN0YXJ0IGFmdGVyIGNlcnRhaW4gZGlzdGFuY2UgKGZvciBwZXJmb3JtYW5jZXMpXHJcbiAgICogQHJlcXVpcmVzIGpRdWVyeSwgZGVib3VuY2VcclxuICAgKi9cclxuICAkLmZuLndheXBvaW50ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciBpc0luQ29udGFpbmVyID0gb3B0aW9ucy4kdmlld3BvcnQgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgdmFyIHBhcmFtZXRlcnMgPSAkLmV4dGVuZCh7XHJcbiAgICAgICR2aWV3cG9ydDogJCh3aW5kb3cpLFxyXG4gICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgIHN0YXJ0QXQ6IG51bGxcclxuICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgIHZhciAkZWxzID0gJCh0aGlzKTtcclxuICAgIHZhciAkdmlld3BvcnQgPSBwYXJhbWV0ZXJzLiR2aWV3cG9ydDtcclxuXHJcbiAgICB2YXIgdmlld3BvcnRIZWlnaHQgPSAkdmlld3BvcnQuaGVpZ2h0KCk7XHJcbiAgICB2YXIgc2Nyb2xsVG9wID0gJHZpZXdwb3J0LnNjcm9sbFRvcCgpO1xyXG4gICAgdmFyIHRocmVzaG9sZCA9IHZpZXdwb3J0SGVpZ2h0ICogKHBhcmFtZXRlcnMub2Zmc2V0IC8gMTAwKTtcclxuXHJcbiAgICAvLyBTdG9yZSBoZWlnaHQgYW5kIHRvcCBvbiBlbGVtZW50cyB0byBhdm9pZCBjb25zZWN1dGl2ZSBjb21wdXRhdGlvbnNcclxuICAgIGZ1bmN0aW9uIGNhY2hlQXR0cmlidXRlcyAoKSB7XHJcbiAgICAgICRlbHMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICRlbCA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludCgkZWwub3V0ZXJIZWlnaHQoKSk7XHJcbiAgICAgICAgdmFyIHRvcCA9IGlzSW5Db250YWluZXJcclxuICAgICAgICAgID8gcGFyc2VJbnQoJGVsLnBvc2l0aW9uKCkudG9wKSArIHNjcm9sbFRvcFxyXG4gICAgICAgICAgOiBwYXJzZUludCgkZWwub2Zmc2V0KCkudG9wKTtcclxuXHJcbiAgICAgICAgJGVsLmF0dHIoeyAnZGF0YS1oZWlnaHQnOiBoZWlnaHQsICdkYXRhLXRvcCc6IHRvcCB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25SZXNpemUgKCkge1xyXG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuXHJcbiAgICAgIHZpZXdwb3J0SGVpZ2h0ID0gJHZpZXdwb3J0LmhlaWdodCgpO1xyXG4gICAgICB0aHJlc2hvbGQgPSB2aWV3cG9ydEhlaWdodCAqIChwYXJhbWV0ZXJzLm9mZnNldCAvIDEwMCk7XHJcblxyXG4gICAgICBjYWNoZUF0dHJpYnV0ZXMoKTtcclxuXHJcbiAgICAgICQodGhpcykudHJpZ2dlcignc2Nyb2xsJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG9uU2Nyb2xsID0gZGVib3VuY2UoZnVuY3Rpb24gb25TY3JvbGwgKCkge1xyXG4gICAgICBzY3JvbGxUb3AgPSAkKHRoaXMpLnNjcm9sbFRvcCgpO1xyXG5cclxuICAgICAgaWYgKHBhcmFtZXRlcnMuc3RhcnRBdCAmJiBzY3JvbGxUb3AgPCBwYXJhbWV0ZXJzLnN0YXJ0QXQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB0b3BMaW1pdCA9IHNjcm9sbFRvcCArIHRocmVzaG9sZDtcclxuICAgICAgdmFyIGJvdHRvbUxpbWl0ID0gc2Nyb2xsVG9wICsgKHZpZXdwb3J0SGVpZ2h0IC0gdGhyZXNob2xkKTtcclxuXHJcbiAgICAgICRlbHMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICRlbCA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBzdGF0ZSA9ICRlbC5hdHRyKCdkYXRhLXN0YXRlJyk7XHJcblxyXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludCgkZWwuYXR0cignZGF0YS1oZWlnaHQnKSkgfHwgJGVsLm91dGVySGVpZ2h0KCk7XHJcbiAgICAgICAgdmFyIHRvcCA9IGlzSW5Db250YWluZXJcclxuICAgICAgICAgID8gcGFyc2VJbnQoJGVsLmF0dHIoJ2RhdGEtdG9wJykpICsgMSB8fCAkZWwucG9zaXRpb24oKS50b3AgKyAxXHJcbiAgICAgICAgICA6IHBhcnNlSW50KCRlbC5hdHRyKCdkYXRhLXRvcCcpKSArIDEgfHwgJGVsLm9mZnNldCgpLnRvcCArIDE7XHJcbiAgICAgICAgdmFyIGJvdHRvbSA9IHRvcCArIGhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKHRvcCA+IHRvcExpbWl0ICYmIHRvcCA8IGJvdHRvbUxpbWl0XHJcbiAgICAgICAgICAgIHx8IGJvdHRvbSA+IHRvcExpbWl0ICYmIGJvdHRvbSA8IGJvdHRvbUxpbWl0XHJcbiAgICAgICAgICAgIHx8IHRvcCA8IHRvcExpbWl0ICYmIGJvdHRvbSA+IGJvdHRvbUxpbWl0KSB7XHJcblxyXG4gICAgICAgICAgaWYgKCFzdGF0ZSkge1xyXG4gICAgICAgICAgICAkZWwuYXR0cignZGF0YS1zdGF0ZScsICd2aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICRlbC50cmlnZ2VyKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgJGVsLnRyaWdnZXIoJ3N0YXRlQ2hhbmdlJywgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgJGVsLmF0dHIoJ2RhdGEtc3RhdGUnLCBudWxsKTtcclxuICAgICAgICAgICAgJGVsLnRyaWdnZXIoJ2luYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICRlbC50cmlnZ2VyKCdzdGF0ZUNoYW5nZScsICdpbmFjdGl2ZScpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfSwgMjApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTdGFydCB3YXlwb2ludFxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAbWV0aG9kIHN0YXJ0XHJcbiAgICAgICAqL1xyXG4gICAgICBzdGFydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplJywgb25SZXNpemUpO1xyXG4gICAgICAgICR2aWV3cG9ydC5vbignc2Nyb2xsJywgb25TY3JvbGwpO1xyXG4gICAgICAgIGNhY2hlQXR0cmlidXRlcygpO1xyXG4gICAgICAgIG9uU2Nyb2xsKCk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogU3RvcCB3YXlwb2ludFxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAbWV0aG9kIHN0b3BcclxuICAgICAgICovXHJcbiAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUnLCBvblJlc2l6ZSk7XHJcbiAgICAgICAgJHZpZXdwb3J0Lm9mZignc2Nyb2xsJywgb25TY3JvbGwpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG59KShqUXVlcnkpOyJdfQ==
},{"../utils/debounceUtil":60}],8:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

var glitch = new THREE.ShaderMaterial({
  uniforms: {
    time: { type: 'f', value: 10.0 },
    resolution: { type: 'v2', value: new THREE.Vector2(10, 10) },
    fInverseViewportDimensions: { type: 'v2', value: new THREE.Vector2(10, 10) }
  },
  vertexShader: [

    'void main () {',
      'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
    '}'

  ].join('\n'),
  fragmentShader: [

    'float time;',
    'uniform vec2 resolution;',
    'vec2 fInverseViewportDimensions;',

    'vec2 rota (vec2 p, float theta) {',
      'vec2 q;',
      'q.x = cos(theta) * p.x - sin(theta) * p.y;',
      'q.y = sin(theta) * p.y + cos(theta) * p.x;',
      'return q;',
    '}',

    'vec4 ConvertToVPos (vec4 p) {',
      'return vec4(0.5*(vec2(p.x + p.w, p.w - p.y) + p.w * fInverseViewportDimensions.xy), p.zw);',
    '}',

    'void main (void) {',
      'time = 1.0;',
      'vec2 p = (vec2(1, 1).xy / resolution.xy) - 0.5;',

      'for (float i = 0.0; i < 1.0; i++) {',
        'p = rota(p, time + length(p * 0.1) * (20.0 * cos(time * 0.5)));',
        'float s = 2.0;',
        'float dy = 1.0 / (5.0 * abs(p.y * s));',
        'gl_FragColor += vec4(dy * 0.1 * dy, 0.5 * dy, dy, 1.0);',
      '}',
    '}'

  ].join('\n')
});

module.exports = glitch;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvbWF0ZXJpYWxzL2dsaXRjaE1hdGVyaWFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgVEhSRUUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVEhSRUUnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1RIUkVFJ10gOiBudWxsKTtcclxuXHJcbnZhciBnbGl0Y2ggPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xyXG4gIHVuaWZvcm1zOiB7XHJcbiAgICB0aW1lOiB7IHR5cGU6ICdmJywgdmFsdWU6IDEwLjAgfSxcclxuICAgIHJlc29sdXRpb246IHsgdHlwZTogJ3YyJywgdmFsdWU6IG5ldyBUSFJFRS5WZWN0b3IyKDEwLCAxMCkgfSxcclxuICAgIGZJbnZlcnNlVmlld3BvcnREaW1lbnNpb25zOiB7IHR5cGU6ICd2MicsIHZhbHVlOiBuZXcgVEhSRUUuVmVjdG9yMigxMCwgMTApIH1cclxuICB9LFxyXG4gIHZlcnRleFNoYWRlcjogW1xyXG5cclxuICAgICd2b2lkIG1haW4gKCkgeycsXHJcbiAgICAgICdnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApOycsXHJcbiAgICAnfSdcclxuXHJcbiAgXS5qb2luKCdcXG4nKSxcclxuICBmcmFnbWVudFNoYWRlcjogW1xyXG5cclxuICAgICdmbG9hdCB0aW1lOycsXHJcbiAgICAndW5pZm9ybSB2ZWMyIHJlc29sdXRpb247JyxcclxuICAgICd2ZWMyIGZJbnZlcnNlVmlld3BvcnREaW1lbnNpb25zOycsXHJcblxyXG4gICAgJ3ZlYzIgcm90YSAodmVjMiBwLCBmbG9hdCB0aGV0YSkgeycsXHJcbiAgICAgICd2ZWMyIHE7JyxcclxuICAgICAgJ3EueCA9IGNvcyh0aGV0YSkgKiBwLnggLSBzaW4odGhldGEpICogcC55OycsXHJcbiAgICAgICdxLnkgPSBzaW4odGhldGEpICogcC55ICsgY29zKHRoZXRhKSAqIHAueDsnLFxyXG4gICAgICAncmV0dXJuIHE7JyxcclxuICAgICd9JyxcclxuXHJcbiAgICAndmVjNCBDb252ZXJ0VG9WUG9zICh2ZWM0IHApIHsnLFxyXG4gICAgICAncmV0dXJuIHZlYzQoMC41Kih2ZWMyKHAueCArIHAudywgcC53IC0gcC55KSArIHAudyAqIGZJbnZlcnNlVmlld3BvcnREaW1lbnNpb25zLnh5KSwgcC56dyk7JyxcclxuICAgICd9JyxcclxuXHJcbiAgICAndm9pZCBtYWluICh2b2lkKSB7JyxcclxuICAgICAgJ3RpbWUgPSAxLjA7JyxcclxuICAgICAgJ3ZlYzIgcCA9ICh2ZWMyKDEsIDEpLnh5IC8gcmVzb2x1dGlvbi54eSkgLSAwLjU7JyxcclxuXHJcbiAgICAgICdmb3IgKGZsb2F0IGkgPSAwLjA7IGkgPCAxLjA7IGkrKykgeycsXHJcbiAgICAgICAgJ3AgPSByb3RhKHAsIHRpbWUgKyBsZW5ndGgocCAqIDAuMSkgKiAoMjAuMCAqIGNvcyh0aW1lICogMC41KSkpOycsXHJcbiAgICAgICAgJ2Zsb2F0IHMgPSAyLjA7JyxcclxuICAgICAgICAnZmxvYXQgZHkgPSAxLjAgLyAoNS4wICogYWJzKHAueSAqIHMpKTsnLFxyXG4gICAgICAgICdnbF9GcmFnQ29sb3IgKz0gdmVjNChkeSAqIDAuMSAqIGR5LCAwLjUgKiBkeSwgZHksIDEuMCk7JyxcclxuICAgICAgJ30nLFxyXG4gICAgJ30nXHJcblxyXG4gIF0uam9pbignXFxuJylcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGdsaXRjaDsiXX0=
},{}],9:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

var sphereEnvMapShader = new THREE.ShaderMaterial({
  uniforms: {
    map: { type: 't', value: null }
  },
  vertexShader: [

    'varying vec2 vN;',

    'void main() {',
        'vec4 p = vec4( position, 1. );',

        'vec3 e = normalize( vec3( modelViewMatrix * p ) );',
        'vec3 n = normalize( normalMatrix * normal );',

        'vec3 r = reflect( e, n );',
        'float m = 2. * sqrt( ',
            'pow( r.x, 2. ) + ',
            'pow( r.y, 2. ) + ',
            'pow( r.z + 1., 2. ) ',
        ');',
        'vN = r.xy / m + .5;',

        'gl_Position = projectionMatrix * modelViewMatrix * p;',
    '}'

  ].join('\n'),
  fragmentShader: [

    'uniform sampler2D map;',

    'varying vec2 vN;',

    'void main() {    ',
        'vec3 base = texture2D( map, vN ).rgb;',
        'gl_FragColor = vec4( base, 1. );',
    '}'

  ].join('\n')
});

module.exports = sphereEnvMapShader;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvbWF0ZXJpYWxzL21hdENhcE1hdGVyaWFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBUSFJFRSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydUSFJFRSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVEhSRUUnXSA6IG51bGwpO1xyXG5cclxudmFyIHNwaGVyZUVudk1hcFNoYWRlciA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XHJcbiAgdW5pZm9ybXM6IHtcclxuICAgIG1hcDogeyB0eXBlOiAndCcsIHZhbHVlOiBudWxsIH1cclxuICB9LFxyXG4gIHZlcnRleFNoYWRlcjogW1xyXG5cclxuICAgICd2YXJ5aW5nIHZlYzIgdk47JyxcclxuXHJcbiAgICAndm9pZCBtYWluKCkgeycsXHJcbiAgICAgICAgJ3ZlYzQgcCA9IHZlYzQoIHBvc2l0aW9uLCAxLiApOycsXHJcblxyXG4gICAgICAgICd2ZWMzIGUgPSBub3JtYWxpemUoIHZlYzMoIG1vZGVsVmlld01hdHJpeCAqIHAgKSApOycsXHJcbiAgICAgICAgJ3ZlYzMgbiA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogbm9ybWFsICk7JyxcclxuXHJcbiAgICAgICAgJ3ZlYzMgciA9IHJlZmxlY3QoIGUsIG4gKTsnLFxyXG4gICAgICAgICdmbG9hdCBtID0gMi4gKiBzcXJ0KCAnLFxyXG4gICAgICAgICAgICAncG93KCByLngsIDIuICkgKyAnLFxyXG4gICAgICAgICAgICAncG93KCByLnksIDIuICkgKyAnLFxyXG4gICAgICAgICAgICAncG93KCByLnogKyAxLiwgMi4gKSAnLFxyXG4gICAgICAgICcpOycsXHJcbiAgICAgICAgJ3ZOID0gci54eSAvIG0gKyAuNTsnLFxyXG5cclxuICAgICAgICAnZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogcDsnLFxyXG4gICAgJ30nXHJcblxyXG4gIF0uam9pbignXFxuJyksXHJcbiAgZnJhZ21lbnRTaGFkZXI6IFtcclxuXHJcbiAgICAndW5pZm9ybSBzYW1wbGVyMkQgbWFwOycsXHJcblxyXG4gICAgJ3ZhcnlpbmcgdmVjMiB2TjsnLFxyXG5cclxuICAgICd2b2lkIG1haW4oKSB7ICAgICcsXHJcbiAgICAgICAgJ3ZlYzMgYmFzZSA9IHRleHR1cmUyRCggbWFwLCB2TiApLnJnYjsnLFxyXG4gICAgICAgICdnbF9GcmFnQ29sb3IgPSB2ZWM0KCBiYXNlLCAxLiApOycsXHJcbiAgICAnfSdcclxuXHJcbiAgXS5qb2luKCdcXG4nKVxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gc3BoZXJlRW52TWFwU2hhZGVyOyJdfQ==
},{}],10:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

/**
 * Basic material that accepts vec4 as vertices colors (rgba).
 *
 * @attribute {Object} [customColor]
 * @attribute {Array} [customColor.value]
 */
var outlineShader = new THREE.ShaderMaterial({
  uniforms: {
    time: { type: 'f', value: 1 }
  },
  attributes: {
    customColor: { type: 'v4', value: [] }
  },
  vertexShader: [

    'attribute vec4 customColor;',
    'varying vec4 vColor;',

    'void main () {',
      'vColor = customColor;',
      'gl_Position = projectionMatrix * (modelViewMatrix * vec4(position, 1.0));',
    '}'

  ].join('\n'),
  fragmentShader: [

    'uniform float time;',
    'varying vec4 vColor;',

    'void main () {',
      'gl_FragColor = vColor;',
      'gl_FragColor.a += sin(time) - time;',
    '}'

  ].join('\n'),
  transparent: true,
  side: THREE.BackSide
});

module.exports = outlineShader;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvbWF0ZXJpYWxzL291dGxpbmVNYXRlcmlhbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIFRIUkVFID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1RIUkVFJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUSFJFRSddIDogbnVsbCk7XHJcblxyXG4vKipcclxuICogQmFzaWMgbWF0ZXJpYWwgdGhhdCBhY2NlcHRzIHZlYzQgYXMgdmVydGljZXMgY29sb3JzIChyZ2JhKS5cclxuICpcclxuICogQGF0dHJpYnV0ZSB7T2JqZWN0fSBbY3VzdG9tQ29sb3JdXHJcbiAqIEBhdHRyaWJ1dGUge0FycmF5fSBbY3VzdG9tQ29sb3IudmFsdWVdXHJcbiAqL1xyXG52YXIgb3V0bGluZVNoYWRlciA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XHJcbiAgdW5pZm9ybXM6IHtcclxuICAgIHRpbWU6IHsgdHlwZTogJ2YnLCB2YWx1ZTogMSB9XHJcbiAgfSxcclxuICBhdHRyaWJ1dGVzOiB7XHJcbiAgICBjdXN0b21Db2xvcjogeyB0eXBlOiAndjQnLCB2YWx1ZTogW10gfVxyXG4gIH0sXHJcbiAgdmVydGV4U2hhZGVyOiBbXHJcblxyXG4gICAgJ2F0dHJpYnV0ZSB2ZWM0IGN1c3RvbUNvbG9yOycsXHJcbiAgICAndmFyeWluZyB2ZWM0IHZDb2xvcjsnLFxyXG5cclxuICAgICd2b2lkIG1haW4gKCkgeycsXHJcbiAgICAgICd2Q29sb3IgPSBjdXN0b21Db2xvcjsnLFxyXG4gICAgICAnZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogKG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCkpOycsXHJcbiAgICAnfSdcclxuXHJcbiAgXS5qb2luKCdcXG4nKSxcclxuICBmcmFnbWVudFNoYWRlcjogW1xyXG5cclxuICAgICd1bmlmb3JtIGZsb2F0IHRpbWU7JyxcclxuICAgICd2YXJ5aW5nIHZlYzQgdkNvbG9yOycsXHJcblxyXG4gICAgJ3ZvaWQgbWFpbiAoKSB7JyxcclxuICAgICAgJ2dsX0ZyYWdDb2xvciA9IHZDb2xvcjsnLFxyXG4gICAgICAnZ2xfRnJhZ0NvbG9yLmEgKz0gc2luKHRpbWUpIC0gdGltZTsnLFxyXG4gICAgJ30nXHJcblxyXG4gIF0uam9pbignXFxuJyksXHJcbiAgdHJhbnNwYXJlbnQ6IHRydWUsXHJcbiAgc2lkZTogVEhSRUUuQmFja1NpZGVcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG91dGxpbmVTaGFkZXI7Il19
},{}],11:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);

var Events = require('../classes/EventsClass');

/**
 * Handle navigation between heads/tails
 *
 * @module APP
 * @event [heads:visible] Heads is at least partially in the viewport
 * @event [heads:invisible] Heads is completely out of the viewport
 * @requires jQuery, Events
 */
var APP = (function () {
  var instance;

  function init () {
    var events = new Events();

    var $trigger = jQuery('.trigger');
    var $heads = jQuery('.heads');
    var $tails = jQuery('.tails');
    var $infoArrow = $heads.find('.trigger__info--arrow');
    var $infoHeads = $heads.find('.trigger__info--heads');
    var $infoTails = $heads.find('.trigger__info--tails');

    // reset scroll
    jQuery('body').stop().animate({ scrollTop: 0 }, 2000);

    function navigation () {

      var isOpen = false;
      var isSliding = false;

      // Update the location of the trigger area
      function updateTrigger () {
        var properties;

        if (isOpen) {
          properties = { top: 0, bottom: 'auto' };
        } else {
          properties = { top: 'auto', bottom: 0 };
        }

        $trigger.css(properties);
      }

      function open () {
        if (isSliding) {
          return false;
        }

        var to;
        var y;

        if (isOpen) {
          to = 'heads';
          y = -90;
          events.trigger('heads:visible');
        } else {
          to = 'tails';
          y = -10;
          $infoArrow.stop().animate({ opacity: 0, bottom: 20 }, 500);
        }

        var props = { y: y + '%' };

        $heads.stop().animate(props, { duration: 400, easing: 'swing' });
        $tails.stop().animate(props, { duration: 400, easing: 'swing' });
      }

      function close () {
        if (isSliding) {
          return false;
        }

        var to;
        var y;

        if (isOpen) {
          to = 'heads';
          y = -100;
        } else {
          to = 'tails';
          y = 0;
          $infoArrow.stop().animate({ opacity: 0.5, bottom: 0 }, 500);
        }

        var props = { y: y + '%' };

        function onComplete () {
          if (to === 'heads') {
            events.trigger('heads:invisible');
          }
        }
        
        $heads.stop().animate(props, { duration: 400, easing: 'swing' });
        $tails.stop().animate(props, { duration: 400, easing: 'swing', complete: onComplete });
      }

      // Slide between heads and tails 
      function slide (callback) {
        isSliding = true;

        var to;
        var y;
        var durations;

        if (isOpen) {
          to = 'heads';
          y = 0;
          durations = [1050, 1000];
          events.trigger('heads:visible');
          $infoHeads.animate({ opacity: 0 }, 800);
          $infoArrow.stop().animate({ opacity: 0.5, bottom: 0 }, 500);
        } else {
          to = 'tails';
          y = -100;
          durations = [1000, 1050];
          $infoTails.animate({ opacity: 0 }, 800);
        }

        events.trigger('slideBegin', { to: to });

        var props = { y: y + '%' };

        function onComplete () {
          isSliding = false;

          events.trigger('slideComplete', { to: to });

          if (to === 'tails') {
            events.trigger('heads:invisible');

            $infoHeads.css('opacity', 1);
          } else {
            $infoTails.css('opacity', 1);
          }

          if (callback) {
            callback();
          }
        }

        $heads.stop().animate(props, { duration: durations[0], easing: 'easeInOutCubic' });
        $tails.stop().animate(props, { duration: durations[1], easing: 'easeInOutCubic', complete: onComplete });

        isOpen = !isOpen;

        updateTrigger();
      }

      $trigger.on({
        mouseenter: function () {
          open();
        },
        mouseleave: function () {
          close();
        },
        click: function () {
          slide();
        }
      });

      events.on('endSlide', function () {
        slide(this);
      });

      $infoHeads.css('opacity', 0);
    }

    function setup () {
      navigation();
      return APP.getInstance();
    }

    return {
      /**
       * Start APP
       *
       * @method start
       */
      start: setup,

      /**
       * Listen to APP event bus
       *
       * @method on
       * @param {String} [event]
       * @param {Function} [callback]
       **/
      on: function () {
        events.on.apply(events, arguments);
      },

      /**
       * Trigger slide on APP event bus
       * 
       * @method slide
       **/
      slide: function (callback) {
        events.trigger('endSlide', callback);
      }
    };
  }

  return {
    /**
     * Return APP instance
     *
     * @method getInstance
     * @return {APP}
     */
    getInstance: function () {
      if (!instance) {
        instance = init();
      }

      return instance;
    }
  };
})();

module.exports = APP.getInstance();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../classes/EventsClass":2}],12:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);

/**
 * Extract the current hash
 * and return the corresponding name
 *
 * @module HASH
 * @requires jQuery
 */
var HASH = HASH || (function () {
  var instance = null;

  function init () {
    var agencies = {
      akqa: 'AKQA',
      hki: 'HKI',
      grouek: 'Grouek',
      mediamonks: 'Media Monks',
      soleilnoir: 'Soleil Noir',
      thread: 'Thread',
      ultranoir: 'Ultra Noir'
    };

    function getHash () {
      return window.location.hash.split('#')[1];
    }

    function getAgency (hash) {
      var agency;

      if (hash && agencies[hash]) {
        agency = agencies[hash];
      } else {
        agency = '';
      }

      return agency;
    }

    var hash = getHash();
    var agency = getAgency(hash);

    return {
      hash: hash,
      agency: agency,

      /**
       * Replace all the placeholders by correct agency name
       *
       * @method replacePlaceholders
       */
      replacePlaceholders: function () {
        var $placeholders = jQuery('.placeholder--agency');
        
        $placeholders.each(function () {
          var $placeholder = jQuery(this);

          if ($placeholder.hasClass('placeholder--agency--you')) {
            if (agency !== '') {
              $placeholder.html(agency);
            } else {
              $placeholder.html('you');
            }
          } else {
            if ($placeholder.hasClass('placeholder--agency--capital')) {
              $placeholder.html(agency.toUpperCase());
            } else {
              $placeholder.html(agency);
            }
          }
        });

        var $email = jQuery('.placeholder--email');

        var subject = hash ? '?subject=Hi from ' + agency : '?subject=Hi';
        var body = hash ? '&body=Hi V, we like your work and would love to meet you.' : '&body=Hi V';

        $email.attr('href', [
          'mailto:valentin.marmonier@gmail.com',
          subject,
          body
        ].join(''));
      }
    };
  }

  return {
    /**
     * Get HASH current instance
     *
     * @method getInstance
     * @return {HASH}
     */
    getInstance: function () {
      if (!instance) {
        instance = init();
      }

      return instance;
    }
  };
})();

module.exports = HASH.getInstance();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvbW9kdWxlcy9oYXNoTW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGpRdWVyeSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydqUXVlcnknXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2pRdWVyeSddIDogbnVsbCk7XHJcblxyXG4vKipcclxuICogRXh0cmFjdCB0aGUgY3VycmVudCBoYXNoXHJcbiAqIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgbmFtZVxyXG4gKlxyXG4gKiBAbW9kdWxlIEhBU0hcclxuICogQHJlcXVpcmVzIGpRdWVyeVxyXG4gKi9cclxudmFyIEhBU0ggPSBIQVNIIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIGluc3RhbmNlID0gbnVsbDtcclxuXHJcbiAgZnVuY3Rpb24gaW5pdCAoKSB7XHJcbiAgICB2YXIgYWdlbmNpZXMgPSB7XHJcbiAgICAgIGFrcWE6ICdBS1FBJyxcclxuICAgICAgaGtpOiAnSEtJJyxcclxuICAgICAgZ3JvdWVrOiAnR3JvdWVrJyxcclxuICAgICAgbWVkaWFtb25rczogJ01lZGlhIE1vbmtzJyxcclxuICAgICAgc29sZWlsbm9pcjogJ1NvbGVpbCBOb2lyJyxcclxuICAgICAgdGhyZWFkOiAnVGhyZWFkJyxcclxuICAgICAgdWx0cmFub2lyOiAnVWx0cmEgTm9pcidcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0SGFzaCAoKSB7XHJcbiAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaC5zcGxpdCgnIycpWzFdO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEFnZW5jeSAoaGFzaCkge1xyXG4gICAgICB2YXIgYWdlbmN5O1xyXG5cclxuICAgICAgaWYgKGhhc2ggJiYgYWdlbmNpZXNbaGFzaF0pIHtcclxuICAgICAgICBhZ2VuY3kgPSBhZ2VuY2llc1toYXNoXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhZ2VuY3kgPSAnJztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGFnZW5jeTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaGFzaCA9IGdldEhhc2goKTtcclxuICAgIHZhciBhZ2VuY3kgPSBnZXRBZ2VuY3koaGFzaCk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaGFzaDogaGFzaCxcclxuICAgICAgYWdlbmN5OiBhZ2VuY3ksXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogUmVwbGFjZSBhbGwgdGhlIHBsYWNlaG9sZGVycyBieSBjb3JyZWN0IGFnZW5jeSBuYW1lXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBtZXRob2QgcmVwbGFjZVBsYWNlaG9sZGVyc1xyXG4gICAgICAgKi9cclxuICAgICAgcmVwbGFjZVBsYWNlaG9sZGVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciAkcGxhY2Vob2xkZXJzID0galF1ZXJ5KCcucGxhY2Vob2xkZXItLWFnZW5jeScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICRwbGFjZWhvbGRlcnMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgJHBsYWNlaG9sZGVyID0galF1ZXJ5KHRoaXMpO1xyXG5cclxuICAgICAgICAgIGlmICgkcGxhY2Vob2xkZXIuaGFzQ2xhc3MoJ3BsYWNlaG9sZGVyLS1hZ2VuY3ktLXlvdScpKSB7XHJcbiAgICAgICAgICAgIGlmIChhZ2VuY3kgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgJHBsYWNlaG9sZGVyLmh0bWwoYWdlbmN5KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAkcGxhY2Vob2xkZXIuaHRtbCgneW91Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICgkcGxhY2Vob2xkZXIuaGFzQ2xhc3MoJ3BsYWNlaG9sZGVyLS1hZ2VuY3ktLWNhcGl0YWwnKSkge1xyXG4gICAgICAgICAgICAgICRwbGFjZWhvbGRlci5odG1sKGFnZW5jeS50b1VwcGVyQ2FzZSgpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAkcGxhY2Vob2xkZXIuaHRtbChhZ2VuY3kpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciAkZW1haWwgPSBqUXVlcnkoJy5wbGFjZWhvbGRlci0tZW1haWwnKTtcclxuXHJcbiAgICAgICAgdmFyIHN1YmplY3QgPSBoYXNoID8gJz9zdWJqZWN0PUhpIGZyb20gJyArIGFnZW5jeSA6ICc/c3ViamVjdD1IaSc7XHJcbiAgICAgICAgdmFyIGJvZHkgPSBoYXNoID8gJyZib2R5PUhpIFYsIHdlIGxpa2UgeW91ciB3b3JrIGFuZCB3b3VsZCBsb3ZlIHRvIG1lZXQgeW91LicgOiAnJmJvZHk9SGkgVic7XHJcblxyXG4gICAgICAgICRlbWFpbC5hdHRyKCdocmVmJywgW1xyXG4gICAgICAgICAgJ21haWx0bzp2YWxlbnRpbi5tYXJtb25pZXJAZ21haWwuY29tJyxcclxuICAgICAgICAgIHN1YmplY3QsXHJcbiAgICAgICAgICBib2R5XHJcbiAgICAgICAgXS5qb2luKCcnKSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgSEFTSCBjdXJyZW50IGluc3RhbmNlXHJcbiAgICAgKlxyXG4gICAgICogQG1ldGhvZCBnZXRJbnN0YW5jZVxyXG4gICAgICogQHJldHVybiB7SEFTSH1cclxuICAgICAqL1xyXG4gICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlID0gaW5pdCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgfTtcclxufSkoKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSEFTSC5nZXRJbnN0YW5jZSgpOyJdfQ==
},{}],13:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var SPRITE3D = require('../libs/sprite3DLib');

var SOUNDS = require('../modules/soundsModule');

var Events = require('../classes/EventsClass');

var MapObj = require('../objects2D/MapObject2D');

var BackgroundParticles = require('../objects3D/BackgroundParticlesObject3D');
var BackgroundLines = require('../objects3D/BackgroundLinesObject3D');

/**
 * 3D Scene
 *
 * @module SCENE
 * @event [section:changeBegin]
 * @event [section:changeComplete]
 * @requires jQuery, THREE, TweenLite, SPRITE3D, SOUNDS, Events, MapObj, BackgroundParticles, BackgroundLines
 */
var SCENE = (function () {
  var instance;

  function init () {
    // params
    var parameters = {
      fogColor: '#0a0a0a',
      quality: 1,
      sectionHeight: 50
    };

    // DOM element
    var $viewport;
    var width;
    var height;

    // THREE Scene
    var resolution;
    var renderer;
    var scene;
    var light;
    var camera;
    var frameId;
    var cameraShakeY = 0;

    // mouse
    var mouseX = 0;

    // general
    var isLocked = false; // used to prevent additional event when slide() called from outside
    var isActive;
    var isStarted = false;

    // camera
    var cameraCache = { speed: 0 };
    var isScrolling = false;

    // background lines
    var backgroundLines;

    // sections
    var sections = [];
    var sectionsMap = {}; // map name with index
    var totalSections;
    var currentIndex = 0;
    var previousIndex = 0;
    
    // events
    var events = new Events();

    function navigation () {
      function next () {
        if (currentIndex === totalSections) {
          if (!isLocked) {
            events.trigger('end');  
          }
          
          return false;
        }

        currentIndex++;

        animateCamera(currentIndex);
      }

      function prev () {
        if (currentIndex === 0) {
          return false;
        }

        currentIndex--;

        animateCamera(currentIndex);
      }

      // scroll
      var newDate;
      var oldDate = new Date();
      
      function onScroll (event) {
        newDate = new Date();

        var elapsed = newDate.getTime() - oldDate.getTime();

        // handle scroll smoothing (mac trackpad for instance)
        if (elapsed > 50 && !isScrolling) {
          if (event.originalEvent.detail > 0 || event.originalEvent.wheelDelta < 0) {
            next();
          } else {
            prev();
          }
        }

        oldDate = new Date();

        return false;
      }

      function onKeyDown (event) {
        if (!isScrolling && isActive) {
          var keyCode = event.keyCode;
          
          if (keyCode === 40) {
            next();
          } else if (keyCode === 38) {
            prev();
          }
        }
      }

      $viewport.on('DOMMouseScroll mousewheel', onScroll);
      jQuery(document).on('keydown', onKeyDown);
    }

    function setup () {
      if (!$viewport) {
        console.warn('set viewport first');
        return false;
      }

      resolution = parameters.quality;

      renderer = new THREE.WebGLRenderer({
        alpha: false,
        antialias: false
      });
      // for transparent bg, also set alpha: true
      // renderer.setClearColor(0x000000, 0);
      renderer.setClearColor('#0a0a0a', 1);
      renderer.setSize(width * resolution, height * resolution);
      $viewport.append(renderer.domElement);

      scene = new THREE.Scene();
      scene.fog = new THREE.FogExp2(parameters.fogColor, 0.01);

      light = new THREE.DirectionalLight('#ffffff', 0.5);
      light.position.set(0.2, 1, 0.5);
      scene.add(light);

      camera = new THREE.PerspectiveCamera(20, width / height, 1, 4000);
      camera.position.set(0, 0, 40);

      function onMouseMove (event) {
        mouseX = (event.clientX / window.innerWidth) * 2 - 1;
      }

      jQuery(window).on('resize', onResize);
      $viewport.on('mousemove', onMouseMove);

      navigation();
      draw();

      return SCENE.getInstance();
    }

    function setupBackground () {
      // add background particles and lines
      // rangeY based on the size and the number of sections
      var rangeY = [
        parameters.sectionHeight,
        (-sections.length * parameters.sectionHeight) - parameters.sectionHeight
      ];

      var backgroundParticles = new BackgroundParticles({ rangeY: rangeY, count: 1000 });
      scene.add(backgroundParticles.el);

      backgroundLines = new BackgroundLines({ rangeY: rangeY, count: 200 });
      scene.add(backgroundLines.el);
    }

    function draw () {
      SPRITE3D.update();
      render();
      frameId = window.requestAnimationFrame(draw);
    }

    function render () {
      // camera noise
      camera.position.y += Math.cos(cameraShakeY) / 50;
      cameraShakeY += 0.02;

      // mouse camera move
      camera.position.x += ((mouseX * 5) - camera.position.x) * 0.03;

      renderer.render(scene, camera);
    }

    function onResize () {
      width = $viewport.width();
      height = $viewport.height();

      camera.aspect = width / height;
      camera.updateProjectionMatrix();

      renderer.setSize(width * resolution, height * resolution);
    }

    function animateCamera (index) {
      // in case goTo is called
      // otherwise navigation set currentIndex
      currentIndex = index;

      var nextPosition = index * -parameters.sectionHeight;
      
      // which way are we animating?
      var way = index < previousIndex ? -1 : 1;

      // event's data
      var data = {
        from: {
          name: sectionsMap[previousIndex],
          index: previousIndex
        },
        to: {
          name: sectionsMap[index],
          index: index
        },
        way: way === -1 ? 'up' : 'down'
      };

      TweenLite.to(camera.position, 1.5, { y: nextPosition, ease: window.Quart.easeInOut,
        onStart: function () {
          isScrolling = true;
          SOUNDS.wind.play();
          events.trigger('section:changeBegin', data);
        },
        onComplete: function () {
          if (previousIndex === index) {
            return false;
          }

          isScrolling = false;
          events.trigger('section:changeComplete', data);
          previousIndex = index;
        }
      });

      TweenLite.to(cameraCache, 1.5, {
        bezier: { type: 'soft', values: [{ speed: 10 }, { speed: 0 }] },
        onUpdate: function () {
          backgroundLines.updateY(this.target.speed);
        }
      });
    }

    return {
      /**
       * Set the SCENE viewport
       *
       * @method setViewport
       * @param {jQuery} [$el] $viewport DOM element
       */
      setViewport: function ($el) {
        $viewport = $el;

        width = $viewport.width();
        height = $viewport.height();

        setup();
      },

      /**
       * Set config
       *
       * @method config
       * @param {Object} [options]
       * @param {String} [options.fogColor='#0a0a0a'] Fog color
       * @param {Number} [options.quality=1] Quality
       * @param {Number} [options.sectionHeight=50] Height of each section
       * @param {Boolean} [screenshot=false] If set on true, press P to output imgData to the console
       */
      config: function (options) {
        parameters = jQuery.extend(parameters, options);
      },

      /**
       * Add sections
       *
       * @method addSections
       * @param {Array} [sections] Array of Sections
       */
      addSections: function (_sections) {
        sections = _sections;
        totalSections = sections.length - 1;

        for (var i = 0, j = sections.length; i < j; i++) {
          var section = sections[i];

          sectionsMap[i] = section.name;

          section.el.position.y = i * -parameters.sectionHeight;
          scene.add(section.el);
        }

        setupBackground();
      },

      /**
       * Listen to SCENE event bus
       *
       * @method on
       * @param {String} [event]
       * @param {Function} [callback]
       **/
      on: function () {
        events.on.apply(events, arguments);
      },

      /**
       * Animate camera to section
       *
       * @method goTo
       * @param {Number} [index] Section's index
       */
      goTo: function (index) {
        if (index === currentIndex) {
          return false;
        }

        animateCamera(index);
      },

      /**
       * Get SCENE map
       *
       * @method getMap
       * @return {Map}
       */
      getMap: function () {

        var map = new MapObj();

        for (var i = 0, j = sections.length; i < j; i++) {
          map.addNode(i);
        }

        return map;
      },

      /**
       * Start drawing loop
       *
       * @method stop
       */
      start: function () {
        isActive = true;

        if (!isStarted) {
          // first event
          var data = {
            from: {
              name: sectionsMap[previousIndex],
              index: previousIndex
            },
            to: {
              name: sectionsMap[currentIndex],
              index: currentIndex
            },
            way: 'down'
          };

          events.trigger('section:changeBegin', data);

          isStarted = true;
        }

        if (!frameId) {
          draw();
        }
      },

      /**
       * Stop drawing loop
       *
       * @method stop
       */
      stop: function () {
        if (frameId) {
          window.cancelAnimationFrame(frameId);
          frameId = undefined;
          isActive = false;
        }
      },

      /**
       * Set scene quality
       *
       * @method quality
       * @param {Number} [ratio]
       */
      quality: function (value) {
        resolution = value;
        renderer.setSize(width * resolution, height * resolution);
      },

      /**
       * Return current scene quality
       *
       * @method getQuality
       * @return {Number}
       */
      getQuality: function () {
        return resolution;
      },

      /**
       * Lock scene (forbid triggering end event)
       *
       * @method lock
       */
      lock: function () {
        isLocked = true;
      },

      /**
       * Unlock scene (allow triggering end event)
       *
       * @method unlock
       */
      unlock: function () {
        isLocked = false;
      },

      /**
       * in animation
       *
       * @method in
       */
      in: function () {
        TweenLite.to({ fov: 200, speed: 0 }, 2, {
          bezier: { type: 'soft', values: [{ speed: 20 }, { speed: 0 }]},
          fov: 60,
          ease: 'easeOutCubic',
          onUpdate: function () {
            backgroundLines.updateZ(this.target.speed);
            camera.fov = this.target.fov;
            camera.updateProjectionMatrix();
          }
        });
      }
    };
  }

  return {
    /**
     * Return SCENE instance
     *
     * @method getInstance
     * @return {SCENE}
     */
    getInstance: function () {
      if (!instance) {
        instance = init();
      }

      return instance;
    }
  };
})();

module.exports = SCENE.getInstance();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../classes/EventsClass":2,"../libs/sprite3DLib":6,"../modules/soundsModule":14,"../objects2D/MapObject2D":19,"../objects3D/BackgroundLinesObject3D":23,"../objects3D/BackgroundParticlesObject3D":24}],14:[function(require,module,exports){
(function (global){
'use strict';

var Howler = (typeof window !== "undefined" ? window['Howler'] : typeof global !== "undefined" ? global['Howler'] : null);
var Howl = (typeof window !== "undefined" ? window['Howl'] : typeof global !== "undefined" ? global['Howl'] : null);
var visibly = (typeof window !== "undefined" ? window['visibly'] : typeof global !== "undefined" ? global['visibly'] : null);

/**
 * Sounds module
 *
 * @module SOUNDS
 * @requires Howler, visibly
 */
var SOUNDS = (function () {
  var instance;

  function init () {

    var isMuted = false;

    return {
      /**
       * Toggle on/off sounds
       *
       * @method toogle
       */
      toggle: function () {
        if (isMuted) {
          Howler.unmute();
        } else {
          Howler.mute();
        }

        isMuted = !isMuted;
      },

      /**
       * Is muted
       * @method isMuted
       * @return {Boolean}
       */
      isMuted: function () {
        return Howler._muted;
      },

      background: new Howl({
        urls: [
          './app/public/sounds/background.mp3',
          './app/public/sounds/background.ogg',
          './app/public/sounds/background.wav'
        ],
        loop: true,
        volume: 0.5
      }),
      wind: new Howl({
        urls: [
          './app/public/sounds/wind.mp3',
          './app/public/sounds/wind.ogg',
          './app/public/sounds/wind.wav'
        ]
      }),
      whitenoise: new Howl({
        urls: [
          './app/public/sounds/whitenoise.mp3',
          './app/public/sounds/whitenoise.ogg',
          './app/public/sounds/whitenoise.wav'
        ],
        volume: 0.05
      }),
      neon: new Howl({
        urls: [
          './app/public/sounds/neon.mp3',
          './app/public/sounds/neon.ogg',
          './app/public/sounds/neon.wav'
        ],
        volume: 0.05
      })
    };
  }

  return  {
    /**
     * Return SOUNDS instance
     *
     * @method getInstance
     * @return {SOUNDS}
     */
    getInstance: function () {
      if (!instance) {
        instance = init();
      }

      return instance;
    }
  };
})();

// tab active/inactive
visibly.onHidden(function () {
  Howler.mute();
});

visibly.onVisible(function () {
  Howler.unmute();
});

module.exports = SOUNDS.getInstance();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvbW9kdWxlcy9zb3VuZHNNb2R1bGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgSG93bGVyID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ0hvd2xlciddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnSG93bGVyJ10gOiBudWxsKTtcclxudmFyIEhvd2wgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snSG93bCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnSG93bCddIDogbnVsbCk7XHJcbnZhciB2aXNpYmx5ID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ3Zpc2libHknXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ3Zpc2libHknXSA6IG51bGwpO1xyXG5cclxuLyoqXHJcbiAqIFNvdW5kcyBtb2R1bGVcclxuICpcclxuICogQG1vZHVsZSBTT1VORFNcclxuICogQHJlcXVpcmVzIEhvd2xlciwgdmlzaWJseVxyXG4gKi9cclxudmFyIFNPVU5EUyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIGluc3RhbmNlO1xyXG5cclxuICBmdW5jdGlvbiBpbml0ICgpIHtcclxuXHJcbiAgICB2YXIgaXNNdXRlZCA9IGZhbHNlO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBUb2dnbGUgb24vb2ZmIHNvdW5kc1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAbWV0aG9kIHRvb2dsZVxyXG4gICAgICAgKi9cclxuICAgICAgdG9nZ2xlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGlzTXV0ZWQpIHtcclxuICAgICAgICAgIEhvd2xlci51bm11dGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgSG93bGVyLm11dGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzTXV0ZWQgPSAhaXNNdXRlZDtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBJcyBtdXRlZFxyXG4gICAgICAgKiBAbWV0aG9kIGlzTXV0ZWRcclxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAgICovXHJcbiAgICAgIGlzTXV0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gSG93bGVyLl9tdXRlZDtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGJhY2tncm91bmQ6IG5ldyBIb3dsKHtcclxuICAgICAgICB1cmxzOiBbXHJcbiAgICAgICAgICAnLi9hcHAvcHVibGljL3NvdW5kcy9iYWNrZ3JvdW5kLm1wMycsXHJcbiAgICAgICAgICAnLi9hcHAvcHVibGljL3NvdW5kcy9iYWNrZ3JvdW5kLm9nZycsXHJcbiAgICAgICAgICAnLi9hcHAvcHVibGljL3NvdW5kcy9iYWNrZ3JvdW5kLndhdidcclxuICAgICAgICBdLFxyXG4gICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgdm9sdW1lOiAwLjVcclxuICAgICAgfSksXHJcbiAgICAgIHdpbmQ6IG5ldyBIb3dsKHtcclxuICAgICAgICB1cmxzOiBbXHJcbiAgICAgICAgICAnLi9hcHAvcHVibGljL3NvdW5kcy93aW5kLm1wMycsXHJcbiAgICAgICAgICAnLi9hcHAvcHVibGljL3NvdW5kcy93aW5kLm9nZycsXHJcbiAgICAgICAgICAnLi9hcHAvcHVibGljL3NvdW5kcy93aW5kLndhdidcclxuICAgICAgICBdXHJcbiAgICAgIH0pLFxyXG4gICAgICB3aGl0ZW5vaXNlOiBuZXcgSG93bCh7XHJcbiAgICAgICAgdXJsczogW1xyXG4gICAgICAgICAgJy4vYXBwL3B1YmxpYy9zb3VuZHMvd2hpdGVub2lzZS5tcDMnLFxyXG4gICAgICAgICAgJy4vYXBwL3B1YmxpYy9zb3VuZHMvd2hpdGVub2lzZS5vZ2cnLFxyXG4gICAgICAgICAgJy4vYXBwL3B1YmxpYy9zb3VuZHMvd2hpdGVub2lzZS53YXYnXHJcbiAgICAgICAgXSxcclxuICAgICAgICB2b2x1bWU6IDAuMDVcclxuICAgICAgfSksXHJcbiAgICAgIG5lb246IG5ldyBIb3dsKHtcclxuICAgICAgICB1cmxzOiBbXHJcbiAgICAgICAgICAnLi9hcHAvcHVibGljL3NvdW5kcy9uZW9uLm1wMycsXHJcbiAgICAgICAgICAnLi9hcHAvcHVibGljL3NvdW5kcy9uZW9uLm9nZycsXHJcbiAgICAgICAgICAnLi9hcHAvcHVibGljL3NvdW5kcy9uZW9uLndhdidcclxuICAgICAgICBdLFxyXG4gICAgICAgIHZvbHVtZTogMC4wNVxyXG4gICAgICB9KVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiAge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gU09VTkRTIGluc3RhbmNlXHJcbiAgICAgKlxyXG4gICAgICogQG1ldGhvZCBnZXRJbnN0YW5jZVxyXG4gICAgICogQHJldHVybiB7U09VTkRTfVxyXG4gICAgICovXHJcbiAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UgPSBpbml0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH1cclxuICB9O1xyXG59KSgpO1xyXG5cclxuLy8gdGFiIGFjdGl2ZS9pbmFjdGl2ZVxyXG52aXNpYmx5Lm9uSGlkZGVuKGZ1bmN0aW9uICgpIHtcclxuICBIb3dsZXIubXV0ZSgpO1xyXG59KTtcclxuXHJcbnZpc2libHkub25WaXNpYmxlKGZ1bmN0aW9uICgpIHtcclxuICBIb3dsZXIudW5tdXRlKCk7XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTT1VORFMuZ2V0SW5zdGFuY2UoKTsiXX0=
},{}],15:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);

var Slider = require('../libs/sliderLib');

var Layout = require('../objects2D/LayoutObject2D');
var Mouse = require('../objects2D/MouseObject2D');
var Keys = require('../objects2D/KeysObject2D');

/**
 * Help overlay
 *
 * @class Help
 * @constructor
 * @requires jQuery, Sider, Layout, Mouse, Keys
 */
function Help () {
  this.$el = jQuery('.help');
  this.slider = new Slider(this.$el.find('.slider'));

  this.keys = new Keys(this.$el.find('.keys'));
  this.mouse = new Mouse(this.$el.find('.mouse'));
  this.layout = new Layout(this.$el.find('.layout'));
}

/**
 * In animation
 *
 * @method in
 */
Help.prototype.in = function () {
  this.$el.css({ display: 'block', opacity: 0 });

  this.slider.start();

  this.slider.$el.delay(100).css({ top: '60%', opacity: 0 })
    .animate({ top: '50%', opacity: 1 }, 500);

  this.$el.stop().animate({ opacity: 0.9 }, 500, function () {
    this.keys.start();
    this.mouse.start();
    this.layout.start();
  }.bind(this));

  this.$el.on('click', function (event) {
    if (event.target === this) {
      this.out();
    }
  }.bind(this));

  this.$el.find('.help__quit').on('click', function () {
    this.out();
  }.bind(this));
};

/**
 * Out animation
 *
 * @method out
 */
Help.prototype.out = function () {
  this.$el.stop().animate({ opacity: 0 }, 500, function () {
    this.$el.css('display', 'none');

    this.slider.stop();

    this.keys.stop();
    this.mouse.stop();
    this.layout.stop();
  }.bind(this));

  this.$el.off('click');
  this.$el.find('.help__quit').off('click');
};

module.exports = Help;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czJEL0hlbHBPYmplY3QyRC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGpRdWVyeSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydqUXVlcnknXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2pRdWVyeSddIDogbnVsbCk7XHJcblxyXG52YXIgU2xpZGVyID0gcmVxdWlyZSgnLi4vbGlicy9zbGlkZXJMaWInKTtcclxuXHJcbnZhciBMYXlvdXQgPSByZXF1aXJlKCcuLi9vYmplY3RzMkQvTGF5b3V0T2JqZWN0MkQnKTtcclxudmFyIE1vdXNlID0gcmVxdWlyZSgnLi4vb2JqZWN0czJEL01vdXNlT2JqZWN0MkQnKTtcclxudmFyIEtleXMgPSByZXF1aXJlKCcuLi9vYmplY3RzMkQvS2V5c09iamVjdDJEJyk7XHJcblxyXG4vKipcclxuICogSGVscCBvdmVybGF5XHJcbiAqXHJcbiAqIEBjbGFzcyBIZWxwXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcmVxdWlyZXMgalF1ZXJ5LCBTaWRlciwgTGF5b3V0LCBNb3VzZSwgS2V5c1xyXG4gKi9cclxuZnVuY3Rpb24gSGVscCAoKSB7XHJcbiAgdGhpcy4kZWwgPSBqUXVlcnkoJy5oZWxwJyk7XHJcbiAgdGhpcy5zbGlkZXIgPSBuZXcgU2xpZGVyKHRoaXMuJGVsLmZpbmQoJy5zbGlkZXInKSk7XHJcblxyXG4gIHRoaXMua2V5cyA9IG5ldyBLZXlzKHRoaXMuJGVsLmZpbmQoJy5rZXlzJykpO1xyXG4gIHRoaXMubW91c2UgPSBuZXcgTW91c2UodGhpcy4kZWwuZmluZCgnLm1vdXNlJykpO1xyXG4gIHRoaXMubGF5b3V0ID0gbmV3IExheW91dCh0aGlzLiRlbC5maW5kKCcubGF5b3V0JykpO1xyXG59XHJcblxyXG4vKipcclxuICogSW4gYW5pbWF0aW9uXHJcbiAqXHJcbiAqIEBtZXRob2QgaW5cclxuICovXHJcbkhlbHAucHJvdG90eXBlLmluID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMuJGVsLmNzcyh7IGRpc3BsYXk6ICdibG9jaycsIG9wYWNpdHk6IDAgfSk7XHJcblxyXG4gIHRoaXMuc2xpZGVyLnN0YXJ0KCk7XHJcblxyXG4gIHRoaXMuc2xpZGVyLiRlbC5kZWxheSgxMDApLmNzcyh7IHRvcDogJzYwJScsIG9wYWNpdHk6IDAgfSlcclxuICAgIC5hbmltYXRlKHsgdG9wOiAnNTAlJywgb3BhY2l0eTogMSB9LCA1MDApO1xyXG5cclxuICB0aGlzLiRlbC5zdG9wKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IDAuOSB9LCA1MDAsIGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMua2V5cy5zdGFydCgpO1xyXG4gICAgdGhpcy5tb3VzZS5zdGFydCgpO1xyXG4gICAgdGhpcy5sYXlvdXQuc3RhcnQoKTtcclxuICB9LmJpbmQodGhpcykpO1xyXG5cclxuICB0aGlzLiRlbC5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMpIHtcclxuICAgICAgdGhpcy5vdXQoKTtcclxuICAgIH1cclxuICB9LmJpbmQodGhpcykpO1xyXG5cclxuICB0aGlzLiRlbC5maW5kKCcuaGVscF9fcXVpdCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMub3V0KCk7XHJcbiAgfS5iaW5kKHRoaXMpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBPdXQgYW5pbWF0aW9uXHJcbiAqXHJcbiAqIEBtZXRob2Qgb3V0XHJcbiAqL1xyXG5IZWxwLnByb3RvdHlwZS5vdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy4kZWwuc3RvcCgpLmFuaW1hdGUoeyBvcGFjaXR5OiAwIH0sIDUwMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kZWwuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuXHJcbiAgICB0aGlzLnNsaWRlci5zdG9wKCk7XHJcblxyXG4gICAgdGhpcy5rZXlzLnN0b3AoKTtcclxuICAgIHRoaXMubW91c2Uuc3RvcCgpO1xyXG4gICAgdGhpcy5sYXlvdXQuc3RvcCgpO1xyXG4gIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gIHRoaXMuJGVsLm9mZignY2xpY2snKTtcclxuICB0aGlzLiRlbC5maW5kKCcuaGVscF9fcXVpdCcpLm9mZignY2xpY2snKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSGVscDsiXX0=
},{"../libs/sliderLib":5,"../objects2D/KeysObject2D":16,"../objects2D/LayoutObject2D":17,"../objects2D/MouseObject2D":20}],16:[function(require,module,exports){
'use strict';

/**
 * Animated keyboard keys
 *
 * @class Keys
 * @constructor
 * @requires jQuery
 */
function Keys ($el) {
  this.$el = $el;

  this.$top = this.$el.find('.key--top');
  this.$bottom = this.$el.find('.key--bottom');

  this.interval = null;
  this.current = 'top';
}

/**
 * Hightlight a key
 *
 * @method highlight
 */
Keys.prototype.highlight = function () {
  this.current = this.current === 'top' ? 'bottom' : 'top';
  var $el = this.current === 'top' ? this.$top : this.$bottom;

  $el.stop().animate({
      opacity: 1
    }, 400, function () {
      $el.stop().animate({
        opacity: 0.2
      }, 300);
  });
};

/**
 * Start animation
 *
 * @method start
 */
Keys.prototype.start = function () {
  this.interval = window.setInterval(function () {
    this.highlight();
  }.bind(this), 1000);
};

/**
 * Stop animation
 *
 * @method stop
 */
Keys.prototype.stop = function () {
  window.clearInterval(this.interval);
};

module.exports = Keys;
},{}],17:[function(require,module,exports){
'use strict';

/**
 * Animated layout
 *
 * @class Layout
 * @constructor
 * @requires jQuery
 */
function Layout ($el) {
  this.$el = $el;

  this.$container = this.$el.find('.layout__parts');
  this.$mouse = this.$el.find('.layout__mouse');
  this.$click = this.$mouse.find('.layout__mouse__click');

  // targets
  this.y = 0;
  this.openY = -15;
  this.mouseY = 90;

  this.interval = null;
}

/**
 * Animation next step
 *
 * @method slide
 */
Layout.prototype.slide = function () {
  // update targets
  if (this.y === 0) {
    this.y = -100;
    this.openY = -15;
    this.mouseY = 83;
  } else {
    this.y = 0;
    this.openY = -85;
    this.mouseY = 3;
  }

  var open = function () {
    this.$container.animate({
      'top': this.openY + '%'
    }, 800, function () {
      click();
    });
  }.bind(this);

  var moveMouse = function () {
    var flag = false;

    this.$mouse.animate({
      'top': this.mouseY + '%'
    }, {
      duration: 500,
      progress: function (animation, progress) {
        if (!flag && progress > 0.5) {
          flag = !flag;
          open();
        }
      }
    });
  }.bind(this);

  var click = function () {
    var flag = false;

    this.$click.delay(500).animate({
      'width': 70,
      'height': 70,
      'margin-left': -35,
      'margin-top': -35,
      'opacity': 0
    }, {
      duration: 400,
      progress: function (animation, progress) {
        if (!flag && progress > 0.7) {
          flag = !flag;
          slide();
        }
      },
      complete: function () {
        this.$click.css({
          'width': 0,
          'height': 0,
          'margin-left': 0,
          'margin-top': 0,
          'opacity': 1
        }.bind(this));
      }
    });
  }.bind(this);

  var slide = function () {
    this.$container.animate({
      'top': this.y + '%'
    }, 500);

    centerMouse();
  }.bind(this);

  var centerMouse = function () {
    this.$mouse.delay(300).animate({
      'top': '45%'
    }, 500);
  }.bind(this);

  moveMouse();
};

/**
 * Start animation
 *
 * @method start
 */
Layout.prototype.start = function () {
  this.slide();

  this.interval = window.setInterval(function () {
    this.slide();
  }.bind(this), 4000);
};

/**
 * Stop animation
 *
 * @method stop
 */
Layout.prototype.stop = function () {
  window.clearInterval(this.interval);
};

module.exports = Layout;
},{}],18:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);

/**
 * Preloader
 *
 * @class Loader
 * @constructor
 * @requires jQuery
 */
function Loader () {
  this.$el = jQuery('.loader');
  this.$title = this.$el.find('.loader__title');
  this.$progress = this.$el.find('.loader__progress');
}

/**
 * Out animation
 *
 * @method out
 */
Loader.prototype.out = function () {
  this.$progress.stop().animate({ width: '100%' }, 1000, function () {
    this.$el.animate({ opacity: 0 }, 1000, function () {
      this.$el.css('display', 'none');
    }.bind(this));

    this.$title.animate({ top: '-10%', opacity: 0 }, 500);
    this.$progress.animate({ height: 0 }, 400);
  }.bind(this));
};

/**
 * Update the percent loaded
 *
 * @method update
 * @param {Number} [percent]
 */
Loader.prototype.update = function () {};

module.exports = Loader;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czJEL0xvYWRlck9iamVjdDJELmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBqUXVlcnkgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snalF1ZXJ5J10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydqUXVlcnknXSA6IG51bGwpO1xyXG5cclxuLyoqXHJcbiAqIFByZWxvYWRlclxyXG4gKlxyXG4gKiBAY2xhc3MgTG9hZGVyXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcmVxdWlyZXMgalF1ZXJ5XHJcbiAqL1xyXG5mdW5jdGlvbiBMb2FkZXIgKCkge1xyXG4gIHRoaXMuJGVsID0galF1ZXJ5KCcubG9hZGVyJyk7XHJcbiAgdGhpcy4kdGl0bGUgPSB0aGlzLiRlbC5maW5kKCcubG9hZGVyX190aXRsZScpO1xyXG4gIHRoaXMuJHByb2dyZXNzID0gdGhpcy4kZWwuZmluZCgnLmxvYWRlcl9fcHJvZ3Jlc3MnKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE91dCBhbmltYXRpb25cclxuICpcclxuICogQG1ldGhvZCBvdXRcclxuICovXHJcbkxvYWRlci5wcm90b3R5cGUub3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMuJHByb2dyZXNzLnN0b3AoKS5hbmltYXRlKHsgd2lkdGg6ICcxMDAlJyB9LCAxMDAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRlbC5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCAxMDAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoaXMuJGVsLmNzcygnZGlzcGxheScsICdub25lJyk7XHJcbiAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgIHRoaXMuJHRpdGxlLmFuaW1hdGUoeyB0b3A6ICctMTAlJywgb3BhY2l0eTogMCB9LCA1MDApO1xyXG4gICAgdGhpcy4kcHJvZ3Jlc3MuYW5pbWF0ZSh7IGhlaWdodDogMCB9LCA0MDApO1xyXG4gIH0uYmluZCh0aGlzKSk7XHJcbn07XHJcblxyXG4vKipcclxuICogVXBkYXRlIHRoZSBwZXJjZW50IGxvYWRlZFxyXG4gKlxyXG4gKiBAbWV0aG9kIHVwZGF0ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gW3BlcmNlbnRdXHJcbiAqL1xyXG5Mb2FkZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMb2FkZXI7Il19
},{}],19:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);

/**
 * Navigation Map
 *
 * @class Map
 * @constructor
 * @requires jQuery
 */
function Map () {
  this.$el = jQuery('<div class="map"></div>');
  this.$nodes = null;
  this.callback = function () {};
}

/**
 * Default node
 * 
 * @property $node
 */
Map.prototype.$node = jQuery('<div class="map__node"></div>');

/**
 * Add a new node
 *
 * @method addNode
 * @param {Number} [index]
 */
Map.prototype.addNode = function (index) {
  var $node = this.$node.clone();
  $node.attr('data-index', index);
  
  this.$el.append($node);
};

/**
 * Initialize
 *
 * @method init
 */
Map.prototype.init = function () {
  var _this = this;

  // event
  this.$el.on('click', '.map__node', function () {
    var index = jQuery(this).data('index');
    _this.callback(index);
  });

  // center
  this.$el.css('margin-top', - this.$el.height() / 2);

  // nodes
  this.$nodes = this.$el.find('.map__node');
};

/**
 * Set onClick callback
 *
 * @method onClick
 * @param {Function} [callback]
 */
Map.prototype.onClick = function (callback) {
  this.callback = callback;
};
  
/**
 * Set active node (.is-active)
 *
 * @method setActive
 * @param {Number} [index]
 */
Map.prototype.setActive = function (index) {
  this.$nodes.removeClass('is-active');
  jQuery(this.$nodes[index]).addClass('is-active');
};

/**
 * In animation
 *
 * @method in
 */
Map.prototype.in = function () {
  this.$nodes.each(function (i) {
    jQuery(this).delay(i * 50).animate({ right: 0, opacity: 1 }, 500);
  });
};

module.exports = Map;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czJEL01hcE9iamVjdDJELmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGpRdWVyeSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydqUXVlcnknXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2pRdWVyeSddIDogbnVsbCk7XHJcblxyXG4vKipcclxuICogTmF2aWdhdGlvbiBNYXBcclxuICpcclxuICogQGNsYXNzIE1hcFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHJlcXVpcmVzIGpRdWVyeVxyXG4gKi9cclxuZnVuY3Rpb24gTWFwICgpIHtcclxuICB0aGlzLiRlbCA9IGpRdWVyeSgnPGRpdiBjbGFzcz1cIm1hcFwiPjwvZGl2PicpO1xyXG4gIHRoaXMuJG5vZGVzID0gbnVsbDtcclxuICB0aGlzLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZhdWx0IG5vZGVcclxuICogXHJcbiAqIEBwcm9wZXJ0eSAkbm9kZVxyXG4gKi9cclxuTWFwLnByb3RvdHlwZS4kbm9kZSA9IGpRdWVyeSgnPGRpdiBjbGFzcz1cIm1hcF9fbm9kZVwiPjwvZGl2PicpO1xyXG5cclxuLyoqXHJcbiAqIEFkZCBhIG5ldyBub2RlXHJcbiAqXHJcbiAqIEBtZXRob2QgYWRkTm9kZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2luZGV4XVxyXG4gKi9cclxuTWFwLnByb3RvdHlwZS5hZGROb2RlID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgdmFyICRub2RlID0gdGhpcy4kbm9kZS5jbG9uZSgpO1xyXG4gICRub2RlLmF0dHIoJ2RhdGEtaW5kZXgnLCBpbmRleCk7XHJcbiAgXHJcbiAgdGhpcy4kZWwuYXBwZW5kKCRub2RlKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplXHJcbiAqXHJcbiAqIEBtZXRob2QgaW5pdFxyXG4gKi9cclxuTWFwLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gIC8vIGV2ZW50XHJcbiAgdGhpcy4kZWwub24oJ2NsaWNrJywgJy5tYXBfX25vZGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgaW5kZXggPSBqUXVlcnkodGhpcykuZGF0YSgnaW5kZXgnKTtcclxuICAgIF90aGlzLmNhbGxiYWNrKGluZGV4KTtcclxuICB9KTtcclxuXHJcbiAgLy8gY2VudGVyXHJcbiAgdGhpcy4kZWwuY3NzKCdtYXJnaW4tdG9wJywgLSB0aGlzLiRlbC5oZWlnaHQoKSAvIDIpO1xyXG5cclxuICAvLyBub2Rlc1xyXG4gIHRoaXMuJG5vZGVzID0gdGhpcy4kZWwuZmluZCgnLm1hcF9fbm9kZScpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldCBvbkNsaWNrIGNhbGxiYWNrXHJcbiAqXHJcbiAqIEBtZXRob2Qgb25DbGlja1xyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdXHJcbiAqL1xyXG5NYXAucHJvdG90eXBlLm9uQ2xpY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbn07XHJcbiAgXHJcbi8qKlxyXG4gKiBTZXQgYWN0aXZlIG5vZGUgKC5pcy1hY3RpdmUpXHJcbiAqXHJcbiAqIEBtZXRob2Qgc2V0QWN0aXZlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbaW5kZXhdXHJcbiAqL1xyXG5NYXAucHJvdG90eXBlLnNldEFjdGl2ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gIHRoaXMuJG5vZGVzLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuICBqUXVlcnkodGhpcy4kbm9kZXNbaW5kZXhdKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcbn07XHJcblxyXG4vKipcclxuICogSW4gYW5pbWF0aW9uXHJcbiAqXHJcbiAqIEBtZXRob2QgaW5cclxuICovXHJcbk1hcC5wcm90b3R5cGUuaW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy4kbm9kZXMuZWFjaChmdW5jdGlvbiAoaSkge1xyXG4gICAgalF1ZXJ5KHRoaXMpLmRlbGF5KGkgKiA1MCkuYW5pbWF0ZSh7IHJpZ2h0OiAwLCBvcGFjaXR5OiAxIH0sIDUwMCk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDsiXX0=
},{}],20:[function(require,module,exports){
'use strict';

/**
 * Animated mouse
 *
 * @class Mouse
 * @constructor
 * @requires jQuery
 */
function Mouse ($el) {
  this.$el = $el;

  this.$wheel = this.$el.find('.mouse__wheel');
  this.$lines = this.$wheel.find('.mouse__wheel__lines');

  this.interval = null;
  this.y = 0;
}

/**
 * Animate wheel
 *
 * @method scroll
 */
Mouse.prototype.scroll = function () {
  this.y = this.y === 0 ? -80 : 0;

  this.$wheel.stop().animate({ opacity: 1 }, 400);

  var y = this.y;

  this.$lines.stop().animate({
      top: y + '%'
    }, 500, function () {
      this.$wheel.stop().animate({
        opacity: 0.2
      }, 300);
  }.bind(this));
};

/**
 * Start animation
 *
 * @method start
 */
Mouse.prototype.start = function () {
  this.interval = window.setInterval(function () {
    this.scroll();
  }.bind(this), 2000);
};

/**
 * Stop animation
 *
 * @method stop
 */
Mouse.prototype.stop = function () {
  window.clearInterval(this.interval);
};

module.exports = Mouse;
},{}],21:[function(require,module,exports){
(function (global){
/* jshint laxbreak: true */

'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);

/**
 * Animated wireframe
 *
 * @class Wireframe
 * @constructor
 * @param {jQuery} [$el] DOM element
 * @param {Object} [options]
 * @param {Number} [options.delay] Delay between frames
 * @param {Array} [options.positions] Animated scroll positions
 * @requires jQuery
 */
function Wireframe ($el, options) {
  this.parameters = jQuery.extend({
    delay: 200,
    positions: [-20, -90, -135, -200, -20, 40]
  }, options);

  this.$topLines = $el.find('.wireframe__frame--top');
  this.$bottomLines = $el.find('.wireframe__frame--bottom');
  this.$leftLines = $el.find('.wireframe__frame--left');
  this.$rightLines = $el.find('.wireframe__frame--right');
  this.$leftColumn = $el.find('.wireframe__column--left');
  this.$textLines = $el.find('.wireframe__text__line');
  this.$controlNodes = $el.find('.wireframe__controls__node');

  this.interval = null;
  this.totalPositions = this.parameters.positions.length;
  this.currentPosition = 0;
}

/**
 * In animation
 *
 * @method in
 * @param {Boolean} [out] Out instead of in?
 */
Wireframe.prototype.in = function (out) {
  // targets
  var targetLines;
  var targetTextLines;
  var targetIncompleteTextLines;
  var targetNodes;

  if (out === 0) {
    targetLines = targetTextLines = targetIncompleteTextLines = 0;
    targetNodes = 30;
  } else {
    targetLines = targetTextLines = '100%';
    targetIncompleteTextLines = '60%';
    targetNodes = 0;
  }

  // frames
  var totalFrames = this.$topLines.length;

  var setAnimation = function (index) {
    var $top = jQuery(this.$topLines[index]);
    var $bottom = jQuery(this.$bottomLines[index]);
    var $left = jQuery(this.$leftLines[index]);
    var $right = jQuery(this.$rightLines[index]);

    setTimeout(function () {
      $top.css('width', targetLines);
      $right.css('height', targetLines);
    }, (index * this.parameters.delay) + 400);

    setTimeout(function () {
      $left.css('height', targetLines);
      $bottom.css('width', targetLines);
    }, (index * this.parameters.delay) + 600);
  }.bind(this);

  // set animations for each frame
  for (var i = 0; i < totalFrames; i++) {
    setAnimation(i);
  }

  // text
  var delay = this.parameters.delay;

  this.$textLines.each(function (i) {
    var $line = jQuery(this);

    setTimeout(function () {
      $line.css('width', $line.hasClass('wireframe__text__line--incomplete')
        ? targetIncompleteTextLines
        : targetTextLines);
      
    }, i * delay);
  });

  // control nodes
  this.$controlNodes.each(function (i) {
    var $node = jQuery(this);

    setTimeout(function () {
      $node.css('top', targetNodes);
    }, i * delay);
  });
};

/**
 * Out animation
 *
 * @method out
 */
Wireframe.prototype.out = function () {
  this.$topLines.css('width', 0);
  this.$bottomLines.css('width', 0);
  this.$leftLines.css('height', 0);
  this.$rightLines.css('height', 0);
  this.$textLines.css('width', 0);
  this.$controlNodes.css('top', 30);
};

/**
 * Start animation
 *
 * @method start
 */
Wireframe.prototype.start = function () {
  if (this.interval) {
    return false;
  }

  this.interval = setInterval(function () {
    if (this.currentPosition > this.totalPositions) {
      this.currentPosition = 0;
    }

    this.$leftColumn.css('top', this.parameters.positions[this.currentPosition] + 'px');

    this.currentPosition++;
  }.bind(this), 2000);
};

/**
 * Stop animation
 *
 * @method stop
 */
Wireframe.prototype.stop = function () {
  if (!this.interval) {
    return false;
  }

  window.clearInterval(this.interval);
  this.interval = null;
};

module.exports = Wireframe;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czJEL1dpcmVmcmFtZU9iamVjdDJELmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoganNoaW50IGxheGJyZWFrOiB0cnVlICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgalF1ZXJ5ID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ2pRdWVyeSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnalF1ZXJ5J10gOiBudWxsKTtcclxuXHJcbi8qKlxyXG4gKiBBbmltYXRlZCB3aXJlZnJhbWVcclxuICpcclxuICogQGNsYXNzIFdpcmVmcmFtZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtqUXVlcnl9IFskZWxdIERPTSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmRlbGF5XSBEZWxheSBiZXR3ZWVuIGZyYW1lc1xyXG4gKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5wb3NpdGlvbnNdIEFuaW1hdGVkIHNjcm9sbCBwb3NpdGlvbnNcclxuICogQHJlcXVpcmVzIGpRdWVyeVxyXG4gKi9cclxuZnVuY3Rpb24gV2lyZWZyYW1lICgkZWwsIG9wdGlvbnMpIHtcclxuICB0aGlzLnBhcmFtZXRlcnMgPSBqUXVlcnkuZXh0ZW5kKHtcclxuICAgIGRlbGF5OiAyMDAsXHJcbiAgICBwb3NpdGlvbnM6IFstMjAsIC05MCwgLTEzNSwgLTIwMCwgLTIwLCA0MF1cclxuICB9LCBvcHRpb25zKTtcclxuXHJcbiAgdGhpcy4kdG9wTGluZXMgPSAkZWwuZmluZCgnLndpcmVmcmFtZV9fZnJhbWUtLXRvcCcpO1xyXG4gIHRoaXMuJGJvdHRvbUxpbmVzID0gJGVsLmZpbmQoJy53aXJlZnJhbWVfX2ZyYW1lLS1ib3R0b20nKTtcclxuICB0aGlzLiRsZWZ0TGluZXMgPSAkZWwuZmluZCgnLndpcmVmcmFtZV9fZnJhbWUtLWxlZnQnKTtcclxuICB0aGlzLiRyaWdodExpbmVzID0gJGVsLmZpbmQoJy53aXJlZnJhbWVfX2ZyYW1lLS1yaWdodCcpO1xyXG4gIHRoaXMuJGxlZnRDb2x1bW4gPSAkZWwuZmluZCgnLndpcmVmcmFtZV9fY29sdW1uLS1sZWZ0Jyk7XHJcbiAgdGhpcy4kdGV4dExpbmVzID0gJGVsLmZpbmQoJy53aXJlZnJhbWVfX3RleHRfX2xpbmUnKTtcclxuICB0aGlzLiRjb250cm9sTm9kZXMgPSAkZWwuZmluZCgnLndpcmVmcmFtZV9fY29udHJvbHNfX25vZGUnKTtcclxuXHJcbiAgdGhpcy5pbnRlcnZhbCA9IG51bGw7XHJcbiAgdGhpcy50b3RhbFBvc2l0aW9ucyA9IHRoaXMucGFyYW1ldGVycy5wb3NpdGlvbnMubGVuZ3RoO1xyXG4gIHRoaXMuY3VycmVudFBvc2l0aW9uID0gMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluIGFuaW1hdGlvblxyXG4gKlxyXG4gKiBAbWV0aG9kIGluXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW291dF0gT3V0IGluc3RlYWQgb2YgaW4/XHJcbiAqL1xyXG5XaXJlZnJhbWUucHJvdG90eXBlLmluID0gZnVuY3Rpb24gKG91dCkge1xyXG4gIC8vIHRhcmdldHNcclxuICB2YXIgdGFyZ2V0TGluZXM7XHJcbiAgdmFyIHRhcmdldFRleHRMaW5lcztcclxuICB2YXIgdGFyZ2V0SW5jb21wbGV0ZVRleHRMaW5lcztcclxuICB2YXIgdGFyZ2V0Tm9kZXM7XHJcblxyXG4gIGlmIChvdXQgPT09IDApIHtcclxuICAgIHRhcmdldExpbmVzID0gdGFyZ2V0VGV4dExpbmVzID0gdGFyZ2V0SW5jb21wbGV0ZVRleHRMaW5lcyA9IDA7XHJcbiAgICB0YXJnZXROb2RlcyA9IDMwO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0YXJnZXRMaW5lcyA9IHRhcmdldFRleHRMaW5lcyA9ICcxMDAlJztcclxuICAgIHRhcmdldEluY29tcGxldGVUZXh0TGluZXMgPSAnNjAlJztcclxuICAgIHRhcmdldE5vZGVzID0gMDtcclxuICB9XHJcblxyXG4gIC8vIGZyYW1lc1xyXG4gIHZhciB0b3RhbEZyYW1lcyA9IHRoaXMuJHRvcExpbmVzLmxlbmd0aDtcclxuXHJcbiAgdmFyIHNldEFuaW1hdGlvbiA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgdmFyICR0b3AgPSBqUXVlcnkodGhpcy4kdG9wTGluZXNbaW5kZXhdKTtcclxuICAgIHZhciAkYm90dG9tID0galF1ZXJ5KHRoaXMuJGJvdHRvbUxpbmVzW2luZGV4XSk7XHJcbiAgICB2YXIgJGxlZnQgPSBqUXVlcnkodGhpcy4kbGVmdExpbmVzW2luZGV4XSk7XHJcbiAgICB2YXIgJHJpZ2h0ID0galF1ZXJ5KHRoaXMuJHJpZ2h0TGluZXNbaW5kZXhdKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgJHRvcC5jc3MoJ3dpZHRoJywgdGFyZ2V0TGluZXMpO1xyXG4gICAgICAkcmlnaHQuY3NzKCdoZWlnaHQnLCB0YXJnZXRMaW5lcyk7XHJcbiAgICB9LCAoaW5kZXggKiB0aGlzLnBhcmFtZXRlcnMuZGVsYXkpICsgNDAwKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgJGxlZnQuY3NzKCdoZWlnaHQnLCB0YXJnZXRMaW5lcyk7XHJcbiAgICAgICRib3R0b20uY3NzKCd3aWR0aCcsIHRhcmdldExpbmVzKTtcclxuICAgIH0sIChpbmRleCAqIHRoaXMucGFyYW1ldGVycy5kZWxheSkgKyA2MDApO1xyXG4gIH0uYmluZCh0aGlzKTtcclxuXHJcbiAgLy8gc2V0IGFuaW1hdGlvbnMgZm9yIGVhY2ggZnJhbWVcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsRnJhbWVzOyBpKyspIHtcclxuICAgIHNldEFuaW1hdGlvbihpKTtcclxuICB9XHJcblxyXG4gIC8vIHRleHRcclxuICB2YXIgZGVsYXkgPSB0aGlzLnBhcmFtZXRlcnMuZGVsYXk7XHJcblxyXG4gIHRoaXMuJHRleHRMaW5lcy5lYWNoKGZ1bmN0aW9uIChpKSB7XHJcbiAgICB2YXIgJGxpbmUgPSBqUXVlcnkodGhpcyk7XHJcblxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICRsaW5lLmNzcygnd2lkdGgnLCAkbGluZS5oYXNDbGFzcygnd2lyZWZyYW1lX190ZXh0X19saW5lLS1pbmNvbXBsZXRlJylcclxuICAgICAgICA/IHRhcmdldEluY29tcGxldGVUZXh0TGluZXNcclxuICAgICAgICA6IHRhcmdldFRleHRMaW5lcyk7XHJcbiAgICAgIFxyXG4gICAgfSwgaSAqIGRlbGF5KTtcclxuICB9KTtcclxuXHJcbiAgLy8gY29udHJvbCBub2Rlc1xyXG4gIHRoaXMuJGNvbnRyb2xOb2Rlcy5lYWNoKGZ1bmN0aW9uIChpKSB7XHJcbiAgICB2YXIgJG5vZGUgPSBqUXVlcnkodGhpcyk7XHJcblxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICRub2RlLmNzcygndG9wJywgdGFyZ2V0Tm9kZXMpO1xyXG4gICAgfSwgaSAqIGRlbGF5KTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBPdXQgYW5pbWF0aW9uXHJcbiAqXHJcbiAqIEBtZXRob2Qgb3V0XHJcbiAqL1xyXG5XaXJlZnJhbWUucHJvdG90eXBlLm91dCA9IGZ1bmN0aW9uICgpIHtcclxuICB0aGlzLiR0b3BMaW5lcy5jc3MoJ3dpZHRoJywgMCk7XHJcbiAgdGhpcy4kYm90dG9tTGluZXMuY3NzKCd3aWR0aCcsIDApO1xyXG4gIHRoaXMuJGxlZnRMaW5lcy5jc3MoJ2hlaWdodCcsIDApO1xyXG4gIHRoaXMuJHJpZ2h0TGluZXMuY3NzKCdoZWlnaHQnLCAwKTtcclxuICB0aGlzLiR0ZXh0TGluZXMuY3NzKCd3aWR0aCcsIDApO1xyXG4gIHRoaXMuJGNvbnRyb2xOb2Rlcy5jc3MoJ3RvcCcsIDMwKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTdGFydCBhbmltYXRpb25cclxuICpcclxuICogQG1ldGhvZCBzdGFydFxyXG4gKi9cclxuV2lyZWZyYW1lLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5pbnRlcnZhbCkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLmN1cnJlbnRQb3NpdGlvbiA+IHRoaXMudG90YWxQb3NpdGlvbnMpIHtcclxuICAgICAgdGhpcy5jdXJyZW50UG9zaXRpb24gPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJGxlZnRDb2x1bW4uY3NzKCd0b3AnLCB0aGlzLnBhcmFtZXRlcnMucG9zaXRpb25zW3RoaXMuY3VycmVudFBvc2l0aW9uXSArICdweCcpO1xyXG5cclxuICAgIHRoaXMuY3VycmVudFBvc2l0aW9uKys7XHJcbiAgfS5iaW5kKHRoaXMpLCAyMDAwKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTdG9wIGFuaW1hdGlvblxyXG4gKlxyXG4gKiBAbWV0aG9kIHN0b3BcclxuICovXHJcbldpcmVmcmFtZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICBpZiAoIXRoaXMuaW50ZXJ2YWwpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG4gIHRoaXMuaW50ZXJ2YWwgPSBudWxsO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBXaXJlZnJhbWU7Il19
},{}],22:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);

/**
 * Menu
 *
 * @class Menu
 * @constructor
 * @requires jQuery
 */
function Menu () {
  var $el = jQuery('.menu');
  var $button = $el.find('.menu__button');
  var $itemsContainer = $el.find('.menu__items');
  var $items = $el.find('.menu__item');

  var _callback = function () {};
  var timeouts = [];

  function onMouseover () {
    $items.on('click', _callback);

    $itemsContainer.css('display', 'block');

    $el.stop().animate({ left: 0 }, { duration: 400, easing: 'easeOutQuart' });
    $button.stop().animate({ opacity: 0 }, 400);

    $items.each(function (i) {
      var $el = jQuery(this);

      var timeout = window.setTimeout(function () {
        $el.stop().animate({ opacity: 1 }, 400);
      }, i * 200);

      timeouts.push(timeout);
    });

    $el.one('mouseleave', onMouseout);
  }

  function onMouseout () {
    if (timeouts) {
      for (var i = 0, j = timeouts.length; i < j; i++) {
        window.clearTimeout(timeouts[i]);
      }
      timeouts = [];
    }

    $el.stop().animate({ left: 30 }, { duration: 400, easing: 'easeOutQuart' });
    $button.stop().animate({ opacity: 0.5 }, 400);
    $items.stop().animate({ opacity: 0 }, 400, function () {
      $itemsContainer.css('display', 'none');
      $items.off('click', _callback);
    });

    $button.one('mouseover click', onMouseover);
  }

  $button.one('mouseover click', onMouseover);

  return {
    in: function () {
      $el.animate({ top: 0, opacity: 1 }, 500);
    },

    onClick: function (callback) {
      _callback = callback;
    }
  };
}

module.exports = Menu;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czJEL21lbnVPYmplY3QyRC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBqUXVlcnkgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snalF1ZXJ5J10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydqUXVlcnknXSA6IG51bGwpO1xyXG5cclxuLyoqXHJcbiAqIE1lbnVcclxuICpcclxuICogQGNsYXNzIE1lbnVcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEByZXF1aXJlcyBqUXVlcnlcclxuICovXHJcbmZ1bmN0aW9uIE1lbnUgKCkge1xyXG4gIHZhciAkZWwgPSBqUXVlcnkoJy5tZW51Jyk7XHJcbiAgdmFyICRidXR0b24gPSAkZWwuZmluZCgnLm1lbnVfX2J1dHRvbicpO1xyXG4gIHZhciAkaXRlbXNDb250YWluZXIgPSAkZWwuZmluZCgnLm1lbnVfX2l0ZW1zJyk7XHJcbiAgdmFyICRpdGVtcyA9ICRlbC5maW5kKCcubWVudV9faXRlbScpO1xyXG5cclxuICB2YXIgX2NhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XHJcbiAgdmFyIHRpbWVvdXRzID0gW107XHJcblxyXG4gIGZ1bmN0aW9uIG9uTW91c2VvdmVyICgpIHtcclxuICAgICRpdGVtcy5vbignY2xpY2snLCBfY2FsbGJhY2spO1xyXG5cclxuICAgICRpdGVtc0NvbnRhaW5lci5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuXHJcbiAgICAkZWwuc3RvcCgpLmFuaW1hdGUoeyBsZWZ0OiAwIH0sIHsgZHVyYXRpb246IDQwMCwgZWFzaW5nOiAnZWFzZU91dFF1YXJ0JyB9KTtcclxuICAgICRidXR0b24uc3RvcCgpLmFuaW1hdGUoeyBvcGFjaXR5OiAwIH0sIDQwMCk7XHJcblxyXG4gICAgJGl0ZW1zLmVhY2goZnVuY3Rpb24gKGkpIHtcclxuICAgICAgdmFyICRlbCA9IGpRdWVyeSh0aGlzKTtcclxuXHJcbiAgICAgIHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRlbC5zdG9wKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IDEgfSwgNDAwKTtcclxuICAgICAgfSwgaSAqIDIwMCk7XHJcblxyXG4gICAgICB0aW1lb3V0cy5wdXNoKHRpbWVvdXQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJGVsLm9uZSgnbW91c2VsZWF2ZScsIG9uTW91c2VvdXQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gb25Nb3VzZW91dCAoKSB7XHJcbiAgICBpZiAodGltZW91dHMpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSB0aW1lb3V0cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRzW2ldKTtcclxuICAgICAgfVxyXG4gICAgICB0aW1lb3V0cyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgICRlbC5zdG9wKCkuYW5pbWF0ZSh7IGxlZnQ6IDMwIH0sIHsgZHVyYXRpb246IDQwMCwgZWFzaW5nOiAnZWFzZU91dFF1YXJ0JyB9KTtcclxuICAgICRidXR0b24uc3RvcCgpLmFuaW1hdGUoeyBvcGFjaXR5OiAwLjUgfSwgNDAwKTtcclxuICAgICRpdGVtcy5zdG9wKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IDAgfSwgNDAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICRpdGVtc0NvbnRhaW5lci5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICAkaXRlbXMub2ZmKCdjbGljaycsIF9jYWxsYmFjayk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkYnV0dG9uLm9uZSgnbW91c2VvdmVyIGNsaWNrJywgb25Nb3VzZW92ZXIpO1xyXG4gIH1cclxuXHJcbiAgJGJ1dHRvbi5vbmUoJ21vdXNlb3ZlciBjbGljaycsIG9uTW91c2VvdmVyKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGluOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICRlbC5hbmltYXRlKHsgdG9wOiAwLCBvcGFjaXR5OiAxIH0sIDUwMCk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICBfY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1lbnU7Il19
},{}],23:[function(require,module,exports){
(function (global){
'use strict';
  
var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

var random = require('../utils/randomUtil');

/**
 * Background floating lines
 *
 * @class BackgroundLines
 * @constructor
 * @param {Object} [options]
 * @param {Number} [options.count=200] Number of lines
 * @param {Array} [options.rangeY=[-100, 100]] Y range for the random
 * @requires jQuery, THREE, random
 */
function BackgroundLines (options) {
  var parameters = jQuery.extend(BackgroundLines.defaultOptions, options);

  var group = new THREE.Object3D();

  var line = this.getLine();

  for (var i = 0; i < parameters.count; i++) {
    var lineCopy = line.clone();

    lineCopy.position.x = random(-20, 20);
    lineCopy.position.y = random(parameters.rangeY[0], parameters.rangeY[1]);
    lineCopy.position.z = random(-50, 50);

    group.add(lineCopy);
  }

  this.el = group;
  this.line = line;
}

BackgroundLines.defaultOptions = {
  count: 200,
  rangeY: [-100, 100]
};

/**
 * Get base line
 *
 * @method getLine
 * @return {THREE.Line} 
 */
BackgroundLines.prototype.getLine = function () {
  var material = new THREE.LineBasicMaterial();

  var geometry = new THREE.Geometry();
  geometry.vertices.push(new THREE.Vector3(0, 0.2, 0));
  geometry.vertices.push(new THREE.Vector3(0, 0, 0));

  var line = new THREE.Line(geometry, material);

  return line;  
};

/**
 * Update lines Y size
 *
 * @method updateY
 * @param {Number} [speed]
 */
BackgroundLines.prototype.updateY = function (speed) {
  this.line.geometry.vertices[0].y = speed + 0.2;
  this.line.geometry.verticesNeedUpdate = true;
  this.line.geometry.computeBoundingSphere();
};

/**
 * Update lines Z size
 *
 * @method updateZ
 * @param {Number} [speed]
 */
BackgroundLines.prototype.updateZ = function (speed) {
  this.line.geometry.vertices[0].z = speed;
  this.line.geometry.verticesNeedUpdate = true;
  this.line.geometry.computeBoundingSphere();
};

module.exports = BackgroundLines;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL0JhY2tncm91bmRMaW5lc09iamVjdDNELmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbiAgXHJcbnZhciBqUXVlcnkgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snalF1ZXJ5J10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydqUXVlcnknXSA6IG51bGwpO1xyXG52YXIgVEhSRUUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVEhSRUUnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1RIUkVFJ10gOiBudWxsKTtcclxuXHJcbnZhciByYW5kb20gPSByZXF1aXJlKCcuLi91dGlscy9yYW5kb21VdGlsJyk7XHJcblxyXG4vKipcclxuICogQmFja2dyb3VuZCBmbG9hdGluZyBsaW5lc1xyXG4gKlxyXG4gKiBAY2xhc3MgQmFja2dyb3VuZExpbmVzXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5jb3VudD0yMDBdIE51bWJlciBvZiBsaW5lc1xyXG4gKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5yYW5nZVk9Wy0xMDAsIDEwMF1dIFkgcmFuZ2UgZm9yIHRoZSByYW5kb21cclxuICogQHJlcXVpcmVzIGpRdWVyeSwgVEhSRUUsIHJhbmRvbVxyXG4gKi9cclxuZnVuY3Rpb24gQmFja2dyb3VuZExpbmVzIChvcHRpb25zKSB7XHJcbiAgdmFyIHBhcmFtZXRlcnMgPSBqUXVlcnkuZXh0ZW5kKEJhY2tncm91bmRMaW5lcy5kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gIHZhciBncm91cCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG5cclxuICB2YXIgbGluZSA9IHRoaXMuZ2V0TGluZSgpO1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtZXRlcnMuY291bnQ7IGkrKykge1xyXG4gICAgdmFyIGxpbmVDb3B5ID0gbGluZS5jbG9uZSgpO1xyXG5cclxuICAgIGxpbmVDb3B5LnBvc2l0aW9uLnggPSByYW5kb20oLTIwLCAyMCk7XHJcbiAgICBsaW5lQ29weS5wb3NpdGlvbi55ID0gcmFuZG9tKHBhcmFtZXRlcnMucmFuZ2VZWzBdLCBwYXJhbWV0ZXJzLnJhbmdlWVsxXSk7XHJcbiAgICBsaW5lQ29weS5wb3NpdGlvbi56ID0gcmFuZG9tKC01MCwgNTApO1xyXG5cclxuICAgIGdyb3VwLmFkZChsaW5lQ29weSk7XHJcbiAgfVxyXG5cclxuICB0aGlzLmVsID0gZ3JvdXA7XHJcbiAgdGhpcy5saW5lID0gbGluZTtcclxufVxyXG5cclxuQmFja2dyb3VuZExpbmVzLmRlZmF1bHRPcHRpb25zID0ge1xyXG4gIGNvdW50OiAyMDAsXHJcbiAgcmFuZ2VZOiBbLTEwMCwgMTAwXVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBiYXNlIGxpbmVcclxuICpcclxuICogQG1ldGhvZCBnZXRMaW5lXHJcbiAqIEByZXR1cm4ge1RIUkVFLkxpbmV9IFxyXG4gKi9cclxuQmFja2dyb3VuZExpbmVzLnByb3RvdHlwZS5nZXRMaW5lID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCgpO1xyXG5cclxuICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcclxuICBnZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAuMiwgMCkpO1xyXG4gIGdlb21ldHJ5LnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCkpO1xyXG5cclxuICB2YXIgbGluZSA9IG5ldyBUSFJFRS5MaW5lKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblxyXG4gIHJldHVybiBsaW5lOyAgXHJcbn07XHJcblxyXG4vKipcclxuICogVXBkYXRlIGxpbmVzIFkgc2l6ZVxyXG4gKlxyXG4gKiBAbWV0aG9kIHVwZGF0ZVlcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF1cclxuICovXHJcbkJhY2tncm91bmRMaW5lcy5wcm90b3R5cGUudXBkYXRlWSA9IGZ1bmN0aW9uIChzcGVlZCkge1xyXG4gIHRoaXMubGluZS5nZW9tZXRyeS52ZXJ0aWNlc1swXS55ID0gc3BlZWQgKyAwLjI7XHJcbiAgdGhpcy5saW5lLmdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XHJcbiAgdGhpcy5saW5lLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZSBsaW5lcyBaIHNpemVcclxuICpcclxuICogQG1ldGhvZCB1cGRhdGVaXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdXHJcbiAqL1xyXG5CYWNrZ3JvdW5kTGluZXMucHJvdG90eXBlLnVwZGF0ZVogPSBmdW5jdGlvbiAoc3BlZWQpIHtcclxuICB0aGlzLmxpbmUuZ2VvbWV0cnkudmVydGljZXNbMF0ueiA9IHNwZWVkO1xyXG4gIHRoaXMubGluZS5nZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xyXG4gIHRoaXMubGluZS5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmFja2dyb3VuZExpbmVzOyJdfQ==
},{"../utils/randomUtil":65}],24:[function(require,module,exports){
(function (global){
/* jshint shadow: true */

'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

var random = require('../utils/randomUtil');

/**
 * Background floating particles/strips
 *
 * @class BackgroundParticles
 * @constructor
 * @param {Object} [options]
 * @param {Object} [strips=true] Strips?
 * @param {Number} [options.count=1000] Number of particles
 * @param {Number} [options.particleSize=0.5] Size of a particle
 * @param {Array} [options.rangeY=[-100, 100]] Y range for positions
 * @requires jQuery, THREE, random
 */
function BackgroundParticles (options) {
  var parameters = jQuery.extend(BackgroundParticles.defaultOptions, options);

  var material = new THREE.PointCloudMaterial({
    size: parameters.particleSize
  });

  var geometry = new THREE.Geometry();

  for (var i = 0; i < parameters.count; i++) {
    var particle = new THREE.Vector3(
      random(-50, 50),
      random(parameters.rangeY[0], parameters.rangeY[1]),
      random(-50, 100)
    );

    geometry.vertices.push(particle);
  }

  var group = new THREE.Object3D();

  group.add(new THREE.PointCloud(geometry, material));
  
  if (parameters.strips) {
    var stripsGeometry = new THREE.Geometry();

    var stripGeometry = new THREE.PlaneGeometry(5, 2);
    var stripMaterial = new THREE.MeshLambertMaterial({ color: '#666666' });

    for (var i = 0; i < parameters.stripsCount; i++) {
      var stripMesh = new THREE.Mesh(stripGeometry, stripMaterial);
      stripMesh.position.set(
        random(-50, 50),
        random(parameters.rangeY[0], parameters.rangeY[1]),
        random(-50, 0)
      );

      stripMesh.scale.set(
        random(0.5, 1),
        random(0.1, 1),
        1
      );

      stripMesh.updateMatrix();
      stripsGeometry.merge(stripMesh.geometry, stripMesh.matrix);
    } 

    var totalMesh = new THREE.Mesh(stripsGeometry, stripMaterial);

    group.add(totalMesh);
  }

  this.el = group;
}

BackgroundParticles.defaultOptions = {
  count: 1000,
  particleSize: 0.5,
  rangeY: [-100, 100],
  strips: true,
  stripsCount: 20
};

module.exports = BackgroundParticles;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL0JhY2tncm91bmRQYXJ0aWNsZXNPYmplY3QzRC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGpzaGludCBzaGFkb3c6IHRydWUgKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBqUXVlcnkgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snalF1ZXJ5J10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydqUXVlcnknXSA6IG51bGwpO1xyXG52YXIgVEhSRUUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVEhSRUUnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1RIUkVFJ10gOiBudWxsKTtcclxuXHJcbnZhciByYW5kb20gPSByZXF1aXJlKCcuLi91dGlscy9yYW5kb21VdGlsJyk7XHJcblxyXG4vKipcclxuICogQmFja2dyb3VuZCBmbG9hdGluZyBwYXJ0aWNsZXMvc3RyaXBzXHJcbiAqXHJcbiAqIEBjbGFzcyBCYWNrZ3JvdW5kUGFydGljbGVzXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RyaXBzPXRydWVdIFN0cmlwcz9cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmNvdW50PTEwMDBdIE51bWJlciBvZiBwYXJ0aWNsZXNcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnBhcnRpY2xlU2l6ZT0wLjVdIFNpemUgb2YgYSBwYXJ0aWNsZVxyXG4gKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5yYW5nZVk9Wy0xMDAsIDEwMF1dIFkgcmFuZ2UgZm9yIHBvc2l0aW9uc1xyXG4gKiBAcmVxdWlyZXMgalF1ZXJ5LCBUSFJFRSwgcmFuZG9tXHJcbiAqL1xyXG5mdW5jdGlvbiBCYWNrZ3JvdW5kUGFydGljbGVzIChvcHRpb25zKSB7XHJcbiAgdmFyIHBhcmFtZXRlcnMgPSBqUXVlcnkuZXh0ZW5kKEJhY2tncm91bmRQYXJ0aWNsZXMuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsKHtcclxuICAgIHNpemU6IHBhcmFtZXRlcnMucGFydGljbGVTaXplXHJcbiAgfSk7XHJcblxyXG4gIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtZXRlcnMuY291bnQ7IGkrKykge1xyXG4gICAgdmFyIHBhcnRpY2xlID0gbmV3IFRIUkVFLlZlY3RvcjMoXHJcbiAgICAgIHJhbmRvbSgtNTAsIDUwKSxcclxuICAgICAgcmFuZG9tKHBhcmFtZXRlcnMucmFuZ2VZWzBdLCBwYXJhbWV0ZXJzLnJhbmdlWVsxXSksXHJcbiAgICAgIHJhbmRvbSgtNTAsIDEwMClcclxuICAgICk7XHJcblxyXG4gICAgZ2VvbWV0cnkudmVydGljZXMucHVzaChwYXJ0aWNsZSk7XHJcbiAgfVxyXG5cclxuICB2YXIgZ3JvdXAgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgZ3JvdXAuYWRkKG5ldyBUSFJFRS5Qb2ludENsb3VkKGdlb21ldHJ5LCBtYXRlcmlhbCkpO1xyXG4gIFxyXG4gIGlmIChwYXJhbWV0ZXJzLnN0cmlwcykge1xyXG4gICAgdmFyIHN0cmlwc0dlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XHJcblxyXG4gICAgdmFyIHN0cmlwR2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSg1LCAyKTtcclxuICAgIHZhciBzdHJpcE1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogJyM2NjY2NjYnIH0pO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1ldGVycy5zdHJpcHNDb3VudDsgaSsrKSB7XHJcbiAgICAgIHZhciBzdHJpcE1lc2ggPSBuZXcgVEhSRUUuTWVzaChzdHJpcEdlb21ldHJ5LCBzdHJpcE1hdGVyaWFsKTtcclxuICAgICAgc3RyaXBNZXNoLnBvc2l0aW9uLnNldChcclxuICAgICAgICByYW5kb20oLTUwLCA1MCksXHJcbiAgICAgICAgcmFuZG9tKHBhcmFtZXRlcnMucmFuZ2VZWzBdLCBwYXJhbWV0ZXJzLnJhbmdlWVsxXSksXHJcbiAgICAgICAgcmFuZG9tKC01MCwgMClcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHN0cmlwTWVzaC5zY2FsZS5zZXQoXHJcbiAgICAgICAgcmFuZG9tKDAuNSwgMSksXHJcbiAgICAgICAgcmFuZG9tKDAuMSwgMSksXHJcbiAgICAgICAgMVxyXG4gICAgICApO1xyXG5cclxuICAgICAgc3RyaXBNZXNoLnVwZGF0ZU1hdHJpeCgpO1xyXG4gICAgICBzdHJpcHNHZW9tZXRyeS5tZXJnZShzdHJpcE1lc2guZ2VvbWV0cnksIHN0cmlwTWVzaC5tYXRyaXgpO1xyXG4gICAgfSBcclxuXHJcbiAgICB2YXIgdG90YWxNZXNoID0gbmV3IFRIUkVFLk1lc2goc3RyaXBzR2VvbWV0cnksIHN0cmlwTWF0ZXJpYWwpO1xyXG5cclxuICAgIGdyb3VwLmFkZCh0b3RhbE1lc2gpO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5lbCA9IGdyb3VwO1xyXG59XHJcblxyXG5CYWNrZ3JvdW5kUGFydGljbGVzLmRlZmF1bHRPcHRpb25zID0ge1xyXG4gIGNvdW50OiAxMDAwLFxyXG4gIHBhcnRpY2xlU2l6ZTogMC41LFxyXG4gIHJhbmdlWTogWy0xMDAsIDEwMF0sXHJcbiAgc3RyaXBzOiB0cnVlLFxyXG4gIHN0cmlwc0NvdW50OiAyMFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCYWNrZ3JvdW5kUGFydGljbGVzOyJdfQ==
},{"../utils/randomUtil":65}],25:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var SOUNDS = require('../modules/soundsModule');
var random = require('../utils/randomUtil');
var yoyo = require('../utils/yoyoUtil');
var glitchMaterial = require('../materials/glitchMaterial');

/**
 * Animated ball
 *
 * @class Ball
 * @constructor
 * @requires THREE, TweenLite, SOUNDS, random, yoyo, glitchMaterial
 */
function Ball () {
  var texture = THREE.ImageUtils.loadTexture('./app/public/img/texture-ball.png');
  var textureAlpha = THREE.ImageUtils.loadTexture('./app/public/img/texture-ballAlpha.png');
  texture.wrapS = textureAlpha.wrapS = THREE.RepeatWrapping;
  texture.wrapT = textureAlpha.wrapT = THREE.RepeatWrapping;
  texture.repeat.x = textureAlpha.repeat.x = 0;
  texture.repeat.y = textureAlpha.repeat.y = 0;

  var materialStripe = new THREE.MeshLambertMaterial({
    map: texture,
    color: '#ffffff',
    emissive: '#0a0a0a',
    depthWrite: false,
    depthTest: true,
    transparent: true
  });

  var geometry = new THREE.SphereGeometry(10, 30, 30);

  var mesh = new THREE.Mesh(geometry, materialStripe);

  var colorA = new THREE.Color('#000000');
  var colorB = new THREE.Color('#ffffff');

  // Make the ball blink once
  function blink () {
    materialStripe.emissive = colorB;
    materialStripe.color = colorA;

    TweenLite.delayedCall(random(0.1, 1), function () {
      materialStripe.emissive = colorA;
      materialStripe.color = colorB;
    });
  }

  // Make the ball glitch once
  function glitch () {
    mesh.material = glitchMaterial;

    SOUNDS.whitenoise.play();

    TweenLite.delayedCall(random(0.2, 1), function () {
      mesh.material = materialStripe;
      SOUNDS.whitenoise.stop();
    });
  }
  
  var inTween = TweenLite.to({ y: 40, opacity: 0 }, 1.5, { y: 0, opacity: 1, paused: true,
    onUpdate: function () {
      mesh.position.y = this.target.y;
      materialStripe.opacity = this.target.opacity;  
    }
  });

  var appearTweenSteps = 6;
  var appearTweenCurrent = 0;
  var repeatValues = [1, 10, 30, 0, 1, 5];

  var appearTween = TweenLite.to({}, 0.1, { paused: true,
      onComplete: function () {
        appearTweenCurrent++;

        if (appearTweenCurrent < appearTweenSteps) {
          mesh.material.map = textureAlpha;
          textureAlpha.repeat.set(1, repeatValues[appearTweenCurrent]);

          this.duration(0.2);
          this.restart();
        } else {
          mesh.material.map = texture;
          appearTweenCurrent = 0;
        }
      }
    });

  var rotateY = 0;
  var rotateX = 0;

  var idleTweens = {
    rotate: TweenLite.to({ textureRepeat: 3 }, 5, { textureRepeat: 8, paused: true,
        onUpdate: function () {
          texture.repeat.set(1, this.target.textureRepeat);

          mesh.rotation.y = rotateY;
          mesh.rotation.x = rotateX;

          rotateY += 0.01;
          rotateX += 0.02;
        },
        onComplete: yoyo,
        onReverseComplete: yoyo
      }),

    glitch: TweenLite.to({}, random(0.1, 5), { paused: true,
        onComplete: function () {
          glitch();
          this.duration(random(0.1, 5));
          this.restart();
        }
      }),

    blink: TweenLite.to({}, random(0.1, 5), { paused: true,
        onComplete: function () {
          blink();
          this.duration(random(0.1, 5));
          this.restart();
        }
      })
  };

  this.el = mesh;

  this.in = function () {
    inTween.play();
    appearTween.restart();
  };

  this.out = function () {
    inTween.reverse();
  };

  this.start = function () {
    idleTweens.rotate.resume();
    // idleTweens.glitch.resume();
    idleTweens.blink.resume();
  };

  this.stop = function () {
    idleTweens.rotate.pause();
    // idleTweens.glitch.pause();
    idleTweens.blink.pause();
  };
}

module.exports = Ball;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL0JhbGxPYmplY3QzRC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIFRIUkVFID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1RIUkVFJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUSFJFRSddIDogbnVsbCk7XHJcbnZhciBUd2VlbkxpdGUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVHdlZW5MaXRlJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUd2VlbkxpdGUnXSA6IG51bGwpO1xyXG5cclxudmFyIFNPVU5EUyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvc291bmRzTW9kdWxlJyk7XHJcbnZhciByYW5kb20gPSByZXF1aXJlKCcuLi91dGlscy9yYW5kb21VdGlsJyk7XHJcbnZhciB5b3lvID0gcmVxdWlyZSgnLi4vdXRpbHMveW95b1V0aWwnKTtcclxudmFyIGdsaXRjaE1hdGVyaWFsID0gcmVxdWlyZSgnLi4vbWF0ZXJpYWxzL2dsaXRjaE1hdGVyaWFsJyk7XHJcblxyXG4vKipcclxuICogQW5pbWF0ZWQgYmFsbFxyXG4gKlxyXG4gKiBAY2xhc3MgQmFsbFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHJlcXVpcmVzIFRIUkVFLCBUd2VlbkxpdGUsIFNPVU5EUywgcmFuZG9tLCB5b3lvLCBnbGl0Y2hNYXRlcmlhbFxyXG4gKi9cclxuZnVuY3Rpb24gQmFsbCAoKSB7XHJcbiAgdmFyIHRleHR1cmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCcuL2FwcC9wdWJsaWMvaW1nL3RleHR1cmUtYmFsbC5wbmcnKTtcclxuICB2YXIgdGV4dHVyZUFscGhhID0gVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSgnLi9hcHAvcHVibGljL2ltZy90ZXh0dXJlLWJhbGxBbHBoYS5wbmcnKTtcclxuICB0ZXh0dXJlLndyYXBTID0gdGV4dHVyZUFscGhhLndyYXBTID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XHJcbiAgdGV4dHVyZS53cmFwVCA9IHRleHR1cmVBbHBoYS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xyXG4gIHRleHR1cmUucmVwZWF0LnggPSB0ZXh0dXJlQWxwaGEucmVwZWF0LnggPSAwO1xyXG4gIHRleHR1cmUucmVwZWF0LnkgPSB0ZXh0dXJlQWxwaGEucmVwZWF0LnkgPSAwO1xyXG5cclxuICB2YXIgbWF0ZXJpYWxTdHJpcGUgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7XHJcbiAgICBtYXA6IHRleHR1cmUsXHJcbiAgICBjb2xvcjogJyNmZmZmZmYnLFxyXG4gICAgZW1pc3NpdmU6ICcjMGEwYTBhJyxcclxuICAgIGRlcHRoV3JpdGU6IGZhbHNlLFxyXG4gICAgZGVwdGhUZXN0OiB0cnVlLFxyXG4gICAgdHJhbnNwYXJlbnQ6IHRydWVcclxuICB9KTtcclxuXHJcbiAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEwLCAzMCwgMzApO1xyXG5cclxuICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbFN0cmlwZSk7XHJcblxyXG4gIHZhciBjb2xvckEgPSBuZXcgVEhSRUUuQ29sb3IoJyMwMDAwMDAnKTtcclxuICB2YXIgY29sb3JCID0gbmV3IFRIUkVFLkNvbG9yKCcjZmZmZmZmJyk7XHJcblxyXG4gIC8vIE1ha2UgdGhlIGJhbGwgYmxpbmsgb25jZVxyXG4gIGZ1bmN0aW9uIGJsaW5rICgpIHtcclxuICAgIG1hdGVyaWFsU3RyaXBlLmVtaXNzaXZlID0gY29sb3JCO1xyXG4gICAgbWF0ZXJpYWxTdHJpcGUuY29sb3IgPSBjb2xvckE7XHJcblxyXG4gICAgVHdlZW5MaXRlLmRlbGF5ZWRDYWxsKHJhbmRvbSgwLjEsIDEpLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIG1hdGVyaWFsU3RyaXBlLmVtaXNzaXZlID0gY29sb3JBO1xyXG4gICAgICBtYXRlcmlhbFN0cmlwZS5jb2xvciA9IGNvbG9yQjtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gTWFrZSB0aGUgYmFsbCBnbGl0Y2ggb25jZVxyXG4gIGZ1bmN0aW9uIGdsaXRjaCAoKSB7XHJcbiAgICBtZXNoLm1hdGVyaWFsID0gZ2xpdGNoTWF0ZXJpYWw7XHJcblxyXG4gICAgU09VTkRTLndoaXRlbm9pc2UucGxheSgpO1xyXG5cclxuICAgIFR3ZWVuTGl0ZS5kZWxheWVkQ2FsbChyYW5kb20oMC4yLCAxKSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBtZXNoLm1hdGVyaWFsID0gbWF0ZXJpYWxTdHJpcGU7XHJcbiAgICAgIFNPVU5EUy53aGl0ZW5vaXNlLnN0b3AoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICB2YXIgaW5Ud2VlbiA9IFR3ZWVuTGl0ZS50byh7IHk6IDQwLCBvcGFjaXR5OiAwIH0sIDEuNSwgeyB5OiAwLCBvcGFjaXR5OiAxLCBwYXVzZWQ6IHRydWUsXHJcbiAgICBvblVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICBtZXNoLnBvc2l0aW9uLnkgPSB0aGlzLnRhcmdldC55O1xyXG4gICAgICBtYXRlcmlhbFN0cmlwZS5vcGFjaXR5ID0gdGhpcy50YXJnZXQub3BhY2l0eTsgIFxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICB2YXIgYXBwZWFyVHdlZW5TdGVwcyA9IDY7XHJcbiAgdmFyIGFwcGVhclR3ZWVuQ3VycmVudCA9IDA7XHJcbiAgdmFyIHJlcGVhdFZhbHVlcyA9IFsxLCAxMCwgMzAsIDAsIDEsIDVdO1xyXG5cclxuICB2YXIgYXBwZWFyVHdlZW4gPSBUd2VlbkxpdGUudG8oe30sIDAuMSwgeyBwYXVzZWQ6IHRydWUsXHJcbiAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhcHBlYXJUd2VlbkN1cnJlbnQrKztcclxuXHJcbiAgICAgICAgaWYgKGFwcGVhclR3ZWVuQ3VycmVudCA8IGFwcGVhclR3ZWVuU3RlcHMpIHtcclxuICAgICAgICAgIG1lc2gubWF0ZXJpYWwubWFwID0gdGV4dHVyZUFscGhhO1xyXG4gICAgICAgICAgdGV4dHVyZUFscGhhLnJlcGVhdC5zZXQoMSwgcmVwZWF0VmFsdWVzW2FwcGVhclR3ZWVuQ3VycmVudF0pO1xyXG5cclxuICAgICAgICAgIHRoaXMuZHVyYXRpb24oMC4yKTtcclxuICAgICAgICAgIHRoaXMucmVzdGFydCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBtZXNoLm1hdGVyaWFsLm1hcCA9IHRleHR1cmU7XHJcbiAgICAgICAgICBhcHBlYXJUd2VlbkN1cnJlbnQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIHZhciByb3RhdGVZID0gMDtcclxuICB2YXIgcm90YXRlWCA9IDA7XHJcblxyXG4gIHZhciBpZGxlVHdlZW5zID0ge1xyXG4gICAgcm90YXRlOiBUd2VlbkxpdGUudG8oeyB0ZXh0dXJlUmVwZWF0OiAzIH0sIDUsIHsgdGV4dHVyZVJlcGVhdDogOCwgcGF1c2VkOiB0cnVlLFxyXG4gICAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB0ZXh0dXJlLnJlcGVhdC5zZXQoMSwgdGhpcy50YXJnZXQudGV4dHVyZVJlcGVhdCk7XHJcblxyXG4gICAgICAgICAgbWVzaC5yb3RhdGlvbi55ID0gcm90YXRlWTtcclxuICAgICAgICAgIG1lc2gucm90YXRpb24ueCA9IHJvdGF0ZVg7XHJcblxyXG4gICAgICAgICAgcm90YXRlWSArPSAwLjAxO1xyXG4gICAgICAgICAgcm90YXRlWCArPSAwLjAyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Db21wbGV0ZTogeW95byxcclxuICAgICAgICBvblJldmVyc2VDb21wbGV0ZTogeW95b1xyXG4gICAgICB9KSxcclxuXHJcbiAgICBnbGl0Y2g6IFR3ZWVuTGl0ZS50byh7fSwgcmFuZG9tKDAuMSwgNSksIHsgcGF1c2VkOiB0cnVlLFxyXG4gICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGdsaXRjaCgpO1xyXG4gICAgICAgICAgdGhpcy5kdXJhdGlvbihyYW5kb20oMC4xLCA1KSk7XHJcbiAgICAgICAgICB0aGlzLnJlc3RhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pLFxyXG5cclxuICAgIGJsaW5rOiBUd2VlbkxpdGUudG8oe30sIHJhbmRvbSgwLjEsIDUpLCB7IHBhdXNlZDogdHJ1ZSxcclxuICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBibGluaygpO1xyXG4gICAgICAgICAgdGhpcy5kdXJhdGlvbihyYW5kb20oMC4xLCA1KSk7XHJcbiAgICAgICAgICB0aGlzLnJlc3RhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgfTtcclxuXHJcbiAgdGhpcy5lbCA9IG1lc2g7XHJcblxyXG4gIHRoaXMuaW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpblR3ZWVuLnBsYXkoKTtcclxuICAgIGFwcGVhclR3ZWVuLnJlc3RhcnQoKTtcclxuICB9O1xyXG5cclxuICB0aGlzLm91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGluVHdlZW4ucmV2ZXJzZSgpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZGxlVHdlZW5zLnJvdGF0ZS5yZXN1bWUoKTtcclxuICAgIC8vIGlkbGVUd2VlbnMuZ2xpdGNoLnJlc3VtZSgpO1xyXG4gICAgaWRsZVR3ZWVucy5ibGluay5yZXN1bWUoKTtcclxuICB9O1xyXG5cclxuICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZGxlVHdlZW5zLnJvdGF0ZS5wYXVzZSgpO1xyXG4gICAgLy8gaWRsZVR3ZWVucy5nbGl0Y2gucGF1c2UoKTtcclxuICAgIGlkbGVUd2VlbnMuYmxpbmsucGF1c2UoKTtcclxuICB9O1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJhbGw7Il19
},{"../materials/glitchMaterial":8,"../modules/soundsModule":14,"../utils/randomUtil":65,"../utils/yoyoUtil":66}],26:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var random = require('../utils/randomUtil');
var yoyo = require('../utils/yoyoUtil');

/**
 * Light beam
 *
 * @class Beam
 * @constructor
 * @param {Object} [options]
 * @param {String} [options.color='#ffffff'] Beam color
 * @param {Number} [options.height=15] Beam expanded height
 * @param {Number} [options.width=2] Beam width
 * @param {Number} [options.cubeSize=0.5] Extremity cube size
 * @param {Number} [options.delay=0] Animations delay
 * @requires jQuery, THREE, TweenLite, random, yoyo
 */
function Beam (options) {
  var parameters = jQuery.extend(Beam.defaultOptions, options);

  var width = parameters.width;
  var height = parameters.height;

  var group = new THREE.Object3D();

  var baseMaterial = new THREE.MeshBasicMaterial({
    side: THREE.DoubleSide,
    depthWrite: false,
    depthTest: true,
    transparent: true,
    opacity: 1,
    blending: THREE.AdditiveBlending,
    color: parameters.color
  });

  var bodyTexture = THREE.ImageUtils.loadTexture('./app/public/img/texture-laserBody.png');
  var capTexture = THREE.ImageUtils.loadTexture('./app/public/img/texture-laserCap.png');
  var flareTexture = THREE.ImageUtils.loadTexture('./app/public/img/texture-laserFlare.png');

  var lineMaterial = new THREE.LineBasicMaterial({ color: parameters.color });
  var bodyMaterial = baseMaterial.clone();
  var capMaterial = baseMaterial.clone();
  var flareMaterial = baseMaterial.clone();
  var cubeMaterial = baseMaterial.clone();

  bodyMaterial.map = bodyTexture;
  capMaterial.map = capTexture;
  flareMaterial.map = flareTexture;

  var bodyGeometry = new THREE.PlaneGeometry(width, height, 1, 1);
  var capGeometry = new THREE.PlaneGeometry(width, width, 1, 1);
  var flareGeometry = new THREE.PlaneGeometry(10, 10, 1, 1);
  var movingFlareGeometry = new THREE.PlaneGeometry(10, 40);
  var cubeGeometry = new THREE.BoxGeometry(
    parameters.cubeSize,
    parameters.cubeSize,
    parameters.cubeSize
  );

  // set height 0
  bodyGeometry.vertices[2].y = bodyGeometry.vertices[3].y = (height / 2) + (width / 2);
  bodyGeometry.verticesNeedUpdate = true;
  bodyGeometry.computeBoundingSphere();

  var bodyMesh = new THREE.Mesh(bodyGeometry, bodyMaterial);
  var capMeshTop = new THREE.Mesh(capGeometry, capMaterial);
  var capMeshBottom = capMeshTop.clone();
  var flareMesh = new THREE.Mesh(flareGeometry, flareMaterial);
  var cubeMesh = new THREE.Mesh(cubeGeometry, cubeMaterial);

  bodyMesh.position.y = 0;
  capMeshTop.position.y = (height / 2) + (width / 2);
  capMeshBottom.position.y = -(height / 2) - (width / 2);
  capMeshBottom.rotation.z = Math.PI;
  flareMesh.position.y = -(height / 2) - (width / 2);

  // line
  var lineGeometry = new THREE.Geometry();
  lineGeometry.vertices.push(new THREE.Vector3(0, (height / 2) + (width / 2), 0));
  lineGeometry.vertices.push(new THREE.Vector3(0, (height / 2) + (width / 2), 0));

  var lineMesh = new THREE.Line(lineGeometry, lineMaterial);

  group.add(lineMesh);

  // body 
  var body = new THREE.Object3D();

  var bodyPlane = new THREE.Object3D();

  bodyPlane.add(bodyMesh);
  bodyPlane.add(capMeshTop);
  bodyPlane.add(capMeshBottom);

  body.add(bodyPlane);

  group.add(body);

  // flare
  group.add(flareMesh);

  // moving flare
  var movingFlareMaterial = flareMaterial.clone();
  var movingFlareMesh = new THREE.Mesh(movingFlareGeometry, movingFlareMaterial);
  movingFlareMesh.scale.x = 3;
  group.add(movingFlareMesh);

  // cube group
  var cubeGroup = new THREE.Object3D();
  cubeGroup.add(cubeMesh);
  cubeGroup.add(movingFlareMesh);
  group.add(cubeGroup);

  // animations
  var cache = { y: (height / 2) + (width / 2) };

  function positionUpdate () {
    /*jshint validthis: true */
    
    var extremity = this.target.y - (width /2);

    lineGeometry.vertices[1].y = extremity;
    lineGeometry.verticesNeedUpdate = true;
    lineGeometry.computeBoundingSphere();

    bodyGeometry.vertices[2].y = bodyGeometry.vertices[3].y = this.target.y;
    bodyGeometry.verticesNeedUpdate = true;
    bodyGeometry.computeBoundingSphere();

    capMeshBottom.position.y = extremity;

    flareMesh.position.y = extremity;
    cubeGroup.position.y = extremity;
  }

  var idleTweens = {
    flare: TweenLite.to({ scale: 1, opacity: 1 }, random(1, 2), { scale: 2, opacity: 0.6, paused: true,
        onUpdate: function () {
          flareMesh.scale.set(this.target.scale, this.target.scale, 1);
          flareMaterial.opacity = this.target.opacity;
        },
        onComplete: yoyo,
        onReverseComplete: yoyo
      }),

    movingflare: TweenLite.to({ y: 0, scale: 3, opacity: 1 }, random(2, 6), { y: 30, scale: 1, opacity: 0, paused: true,
        onUpdate: function () {
          movingFlareMesh.position.y = this.target.y;
          movingFlareMesh.scale.x = this.target.scale;
          movingFlareMaterial.opacity = this.target.opacity;
        },
        onComplete: yoyo,
        onReverseComplete: yoyo
      }),

    body: TweenLite.to({ opacity: 1 }, random(1, 2), { opacity: 0.5,
        onUpdate: function () {
          bodyMaterial.opacity = capMaterial.opacity = this.target.opacity;
        },
        onComplete: yoyo,
        onReverseComplete: yoyo
      })
  };

  this.el = group;

  var delay = parameters.delay;

  this.in = function () {
    TweenLite.to(cache, 1, { y: -5, delay: delay, onUpdate: positionUpdate });
  };

  this.out = function (way) {
    var y = way === 'up' ? ((height / 2) + (width / 2)) - 1 : -70;
    TweenLite.to(cache, 1, { y: y, delay: delay, onUpdate: positionUpdate });
  };

  this.start = function () {
    idleTweens.flare.resume();
    idleTweens.movingflare.resume();
    idleTweens.body.resume();
  };

  this.stop = function () {
    idleTweens.flare.pause();
    idleTweens.movingflare.pause();
    idleTweens.body.pause();
  };
}

Beam.defaultOptions = {
  color: '#ffffff',
    height: 15,
    width: 2,
    cubeSize: 0.5,
    delay: 0
  };

module.exports = Beam;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../utils/randomUtil":65,"../utils/yoyoUtil":66}],27:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

var dilate = require('../utils/dilateUtil');

var outlineMaterial = require('../materials/outlineMaterial');

function City () {
  this.el = new THREE.Object3D();

  this.groups = {};
  this.baseMaterial = new THREE.MeshLambertMaterial({ color: '#333333' });

  this.loader = new THREE.JSONLoader();
}

City.prototype.addGroup = function (data) {
  if (!this.groups[data.name]) {
    this.groups[data.name] = new THREE.Object3D();
  }

  if (!data.outline) {
    data.outline = {};
  }

  var groupName = data.name;

  for (var objName in data.objs) {
    if (data.objs.hasOwnProperty(objName)) {
      var url = data.objs[objName];

      if (!data.outline[objName]) {
        data.outline[objName] = {};
      }

      var isSolid = data.outline[objName].solid ? true : false;
      var offset = data.outline[objName].offset
        ? data.outline[objName].offset
        : 0.15;

      this.loadObj(groupName, url, offset, isSolid);
    }
  }
};

City.prototype.loadObj = function (groupName, url, offset, isSolid) {
  var _this = this;

  this.loader.load(url, function (geometry) {
    _this.processObj({
      geometry: geometry,
      group: groupName,
      offset: offset,
      solid: isSolid
    });
  });
};

City.prototype.processObj = function (data) {
  var groupName = data.group;
  var geometry = data.geometry;

  var mesh = new THREE.Mesh(geometry, this.baseMaterial);

  this.groups[groupName].add(mesh);

  var outlineGeometry = geometry.clone();
  dilate(outlineGeometry, data.offset);

  var localOutlineMaterial = outlineMaterial.clone();
  localOutlineMaterial.uniforms = THREE.UniformsUtils.clone(outlineMaterial.uniforms);
  localOutlineMaterial.attributes = THREE.UniformsUtils.clone(outlineMaterial.attributes);

  var outlineMesh = new THREE.Mesh(outlineGeometry, localOutlineMaterial);

  outlineGeometry.computeBoundingBox();
  var height = outlineGeometry.boundingBox.max.y - outlineGeometry.boundingBox.min.y;

  for (var i = 0, j = outlineGeometry.vertices.length; i < j; i++) {
    var color;

    if (data.solid) {
      color = new THREE.Vector4(0.7, 0.7, 0.7, 1.0);
    } else {
      var vertex = outlineGeometry.vertices[i];
      var percent = Math.floor(vertex.y * 100 / height) - 10;
      color = new THREE.Vector4(0.7, 0.7, 0.7, percent / 100);
    }

    localOutlineMaterial.attributes.customColor.value[i] = color;
  }

  this.groups[groupName].add(outlineMesh);
};

City.prototype.showGroup = function (name) {
  this.el.add(this.groups[name]);
};

module.exports = City;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL0NpdHlPYmplY3QzRC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIFRIUkVFID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1RIUkVFJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUSFJFRSddIDogbnVsbCk7XHJcblxyXG52YXIgZGlsYXRlID0gcmVxdWlyZSgnLi4vdXRpbHMvZGlsYXRlVXRpbCcpO1xyXG5cclxudmFyIG91dGxpbmVNYXRlcmlhbCA9IHJlcXVpcmUoJy4uL21hdGVyaWFscy9vdXRsaW5lTWF0ZXJpYWwnKTtcclxuXHJcbmZ1bmN0aW9uIENpdHkgKCkge1xyXG4gIHRoaXMuZWwgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgdGhpcy5ncm91cHMgPSB7fTtcclxuICB0aGlzLmJhc2VNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHsgY29sb3I6ICcjMzMzMzMzJyB9KTtcclxuXHJcbiAgdGhpcy5sb2FkZXIgPSBuZXcgVEhSRUUuSlNPTkxvYWRlcigpO1xyXG59XHJcblxyXG5DaXR5LnByb3RvdHlwZS5hZGRHcm91cCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgaWYgKCF0aGlzLmdyb3Vwc1tkYXRhLm5hbWVdKSB7XHJcbiAgICB0aGlzLmdyb3Vwc1tkYXRhLm5hbWVdID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgfVxyXG5cclxuICBpZiAoIWRhdGEub3V0bGluZSkge1xyXG4gICAgZGF0YS5vdXRsaW5lID0ge307XHJcbiAgfVxyXG5cclxuICB2YXIgZ3JvdXBOYW1lID0gZGF0YS5uYW1lO1xyXG5cclxuICBmb3IgKHZhciBvYmpOYW1lIGluIGRhdGEub2Jqcykge1xyXG4gICAgaWYgKGRhdGEub2Jqcy5oYXNPd25Qcm9wZXJ0eShvYmpOYW1lKSkge1xyXG4gICAgICB2YXIgdXJsID0gZGF0YS5vYmpzW29iak5hbWVdO1xyXG5cclxuICAgICAgaWYgKCFkYXRhLm91dGxpbmVbb2JqTmFtZV0pIHtcclxuICAgICAgICBkYXRhLm91dGxpbmVbb2JqTmFtZV0gPSB7fTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGlzU29saWQgPSBkYXRhLm91dGxpbmVbb2JqTmFtZV0uc29saWQgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgIHZhciBvZmZzZXQgPSBkYXRhLm91dGxpbmVbb2JqTmFtZV0ub2Zmc2V0XHJcbiAgICAgICAgPyBkYXRhLm91dGxpbmVbb2JqTmFtZV0ub2Zmc2V0XHJcbiAgICAgICAgOiAwLjE1O1xyXG5cclxuICAgICAgdGhpcy5sb2FkT2JqKGdyb3VwTmFtZSwgdXJsLCBvZmZzZXQsIGlzU29saWQpO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbkNpdHkucHJvdG90eXBlLmxvYWRPYmogPSBmdW5jdGlvbiAoZ3JvdXBOYW1lLCB1cmwsIG9mZnNldCwgaXNTb2xpZCkge1xyXG4gIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gIHRoaXMubG9hZGVyLmxvYWQodXJsLCBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcclxuICAgIF90aGlzLnByb2Nlc3NPYmooe1xyXG4gICAgICBnZW9tZXRyeTogZ2VvbWV0cnksXHJcbiAgICAgIGdyb3VwOiBncm91cE5hbWUsXHJcbiAgICAgIG9mZnNldDogb2Zmc2V0LFxyXG4gICAgICBzb2xpZDogaXNTb2xpZFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5DaXR5LnByb3RvdHlwZS5wcm9jZXNzT2JqID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICB2YXIgZ3JvdXBOYW1lID0gZGF0YS5ncm91cDtcclxuICB2YXIgZ2VvbWV0cnkgPSBkYXRhLmdlb21ldHJ5O1xyXG5cclxuICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCB0aGlzLmJhc2VNYXRlcmlhbCk7XHJcblxyXG4gIHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV0uYWRkKG1lc2gpO1xyXG5cclxuICB2YXIgb3V0bGluZUdlb21ldHJ5ID0gZ2VvbWV0cnkuY2xvbmUoKTtcclxuICBkaWxhdGUob3V0bGluZUdlb21ldHJ5LCBkYXRhLm9mZnNldCk7XHJcblxyXG4gIHZhciBsb2NhbE91dGxpbmVNYXRlcmlhbCA9IG91dGxpbmVNYXRlcmlhbC5jbG9uZSgpO1xyXG4gIGxvY2FsT3V0bGluZU1hdGVyaWFsLnVuaWZvcm1zID0gVEhSRUUuVW5pZm9ybXNVdGlscy5jbG9uZShvdXRsaW5lTWF0ZXJpYWwudW5pZm9ybXMpO1xyXG4gIGxvY2FsT3V0bGluZU1hdGVyaWFsLmF0dHJpYnV0ZXMgPSBUSFJFRS5Vbmlmb3Jtc1V0aWxzLmNsb25lKG91dGxpbmVNYXRlcmlhbC5hdHRyaWJ1dGVzKTtcclxuXHJcbiAgdmFyIG91dGxpbmVNZXNoID0gbmV3IFRIUkVFLk1lc2gob3V0bGluZUdlb21ldHJ5LCBsb2NhbE91dGxpbmVNYXRlcmlhbCk7XHJcblxyXG4gIG91dGxpbmVHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuICB2YXIgaGVpZ2h0ID0gb3V0bGluZUdlb21ldHJ5LmJvdW5kaW5nQm94Lm1heC55IC0gb3V0bGluZUdlb21ldHJ5LmJvdW5kaW5nQm94Lm1pbi55O1xyXG5cclxuICBmb3IgKHZhciBpID0gMCwgaiA9IG91dGxpbmVHZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgIHZhciBjb2xvcjtcclxuXHJcbiAgICBpZiAoZGF0YS5zb2xpZCkge1xyXG4gICAgICBjb2xvciA9IG5ldyBUSFJFRS5WZWN0b3I0KDAuNywgMC43LCAwLjcsIDEuMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgdmVydGV4ID0gb3V0bGluZUdlb21ldHJ5LnZlcnRpY2VzW2ldO1xyXG4gICAgICB2YXIgcGVyY2VudCA9IE1hdGguZmxvb3IodmVydGV4LnkgKiAxMDAgLyBoZWlnaHQpIC0gMTA7XHJcbiAgICAgIGNvbG9yID0gbmV3IFRIUkVFLlZlY3RvcjQoMC43LCAwLjcsIDAuNywgcGVyY2VudCAvIDEwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9jYWxPdXRsaW5lTWF0ZXJpYWwuYXR0cmlidXRlcy5jdXN0b21Db2xvci52YWx1ZVtpXSA9IGNvbG9yO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5ncm91cHNbZ3JvdXBOYW1lXS5hZGQob3V0bGluZU1lc2gpO1xyXG59O1xyXG5cclxuQ2l0eS5wcm90b3R5cGUuc2hvd0dyb3VwID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICB0aGlzLmVsLmFkZCh0aGlzLmdyb3Vwc1tuYW1lXSk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IENpdHk7Il19
},{"../materials/outlineMaterial":10,"../utils/dilateUtil":61}],28:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var loop = require('../utils/loopUtil');

/**
 * Animated water ripple
 *
 * @class Drop
 * @constructor
 * @param {Object} [options]
 * @param {Number} [options.count=6] Rings number
 * @param {String} [options.color='#ffffff'] Rings color
 * @param {Number} [options.amplitude=2] Rings max expanded amplitude 
 * @requires jQuery, THREE, TweenLite, loop
 */
function Drop (options) {
  this.parameters = jQuery.extend(Drop.defaultOptions, options);

  var group = new THREE.Object3D();

  var plane = this.getPlane();

  var caches = [];
  var idleTweens = [];

  for (var i = 0; i < this.parameters.count; i++) {
    var planeCopy = plane.clone();
    planeCopy.material = planeCopy.material.clone();

    var tween = this.getTween(planeCopy, i);
    var cache = { duration: (10 + i) / 10, z: (this.parameters.count - i) * 5 };

    group.add(planeCopy);
    caches.push(cache);
    idleTweens.push(tween);
  }

  this.el = group;

  this.in = function () {
    for (var i = 0, j = group.children.length; i < j; i++) {
      var el = group.children[i];
      var cache = caches[i];
      TweenLite.to(el.position, cache.duration, { z: 0 });
    }
  };

  this.out = function (way) {
    var factor = way === 'up' ? 1 : -1;

    for (var i = 0, j = group.children.length; i < j; i++) {
      var el = group.children[i];
      var cache = caches[i];
      TweenLite.to(el.position, cache.duration, { z: factor * cache.z });
    }
  };

  this.start = function () {
    for (var i = 0, j = idleTweens.length; i < j; i++) {
      idleTweens[i].resume();
    }
  };

  this.stop = function () {
    for (var i = 0, j = idleTweens.length; i < j; i++) {
      idleTweens[i].pause();
    }
  };
}

Drop.defaultOptions = {
  count: 6,
  color: '#ffffff',
  amplitude: 2
};

/**
 * Get water ripple plane
 *
 * @method getPlane
 * @return {THREE.Mesh}
 */
Drop.prototype.getPlane = function () {
  var texture = THREE.ImageUtils.loadTexture('./app/public/img/texture-drop.png');
  
  var material = new THREE.MeshBasicMaterial({
    map: texture,
    depthWrite: false,
    depthTest: true,
    transparent: true,
    opacity: 0,
    blending: THREE.AdditiveBlending,
    color: this.parameters.color,
    side: THREE.DoubleSide
  });

  var geometry = new THREE.PlaneGeometry(20, 20, 1, 1);

  return new THREE.Mesh(geometry, material);
};

/**
 * Get ripple animation
 *
 * @method getTween
 * @param {THREE.Mesh} [plane]
 * @param {Number} [index]
 * @return {TweenLite}
 */
Drop.prototype.getTween = function (plane, index) {
  var cache = { scale: 0.1, opacity: 1 };
  var scale = (index + 1) * (this.parameters.amplitude) / this.parameters.count;

  return TweenLite.to(cache, 1.5, { scale: scale, opacity: 0, paused: true, delay: (index * 100) / 1000,
      onUpdate: function () {
        plane.scale.x = plane.scale.y = cache.scale;
        plane.material.opacity = cache.opacity;
      },
      onComplete: loop
    });
};

module.exports = Drop;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL0Ryb3BPYmplY3QzRC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBqUXVlcnkgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snalF1ZXJ5J10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydqUXVlcnknXSA6IG51bGwpO1xyXG52YXIgVEhSRUUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVEhSRUUnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1RIUkVFJ10gOiBudWxsKTtcclxudmFyIFR3ZWVuTGl0ZSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydUd2VlbkxpdGUnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1R3ZWVuTGl0ZSddIDogbnVsbCk7XHJcblxyXG52YXIgbG9vcCA9IHJlcXVpcmUoJy4uL3V0aWxzL2xvb3BVdGlsJyk7XHJcblxyXG4vKipcclxuICogQW5pbWF0ZWQgd2F0ZXIgcmlwcGxlXHJcbiAqXHJcbiAqIEBjbGFzcyBEcm9wXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5jb3VudD02XSBSaW5ncyBudW1iZXJcclxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmNvbG9yPScjZmZmZmZmJ10gUmluZ3MgY29sb3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmFtcGxpdHVkZT0yXSBSaW5ncyBtYXggZXhwYW5kZWQgYW1wbGl0dWRlIFxyXG4gKiBAcmVxdWlyZXMgalF1ZXJ5LCBUSFJFRSwgVHdlZW5MaXRlLCBsb29wXHJcbiAqL1xyXG5mdW5jdGlvbiBEcm9wIChvcHRpb25zKSB7XHJcbiAgdGhpcy5wYXJhbWV0ZXJzID0galF1ZXJ5LmV4dGVuZChEcm9wLmRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgdmFyIGdyb3VwID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcblxyXG4gIHZhciBwbGFuZSA9IHRoaXMuZ2V0UGxhbmUoKTtcclxuXHJcbiAgdmFyIGNhY2hlcyA9IFtdO1xyXG4gIHZhciBpZGxlVHdlZW5zID0gW107XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wYXJhbWV0ZXJzLmNvdW50OyBpKyspIHtcclxuICAgIHZhciBwbGFuZUNvcHkgPSBwbGFuZS5jbG9uZSgpO1xyXG4gICAgcGxhbmVDb3B5Lm1hdGVyaWFsID0gcGxhbmVDb3B5Lm1hdGVyaWFsLmNsb25lKCk7XHJcblxyXG4gICAgdmFyIHR3ZWVuID0gdGhpcy5nZXRUd2VlbihwbGFuZUNvcHksIGkpO1xyXG4gICAgdmFyIGNhY2hlID0geyBkdXJhdGlvbjogKDEwICsgaSkgLyAxMCwgejogKHRoaXMucGFyYW1ldGVycy5jb3VudCAtIGkpICogNSB9O1xyXG5cclxuICAgIGdyb3VwLmFkZChwbGFuZUNvcHkpO1xyXG4gICAgY2FjaGVzLnB1c2goY2FjaGUpO1xyXG4gICAgaWRsZVR3ZWVucy5wdXNoKHR3ZWVuKTtcclxuICB9XHJcblxyXG4gIHRoaXMuZWwgPSBncm91cDtcclxuXHJcbiAgdGhpcy5pbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBqID0gZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgajsgaSsrKSB7XHJcbiAgICAgIHZhciBlbCA9IGdyb3VwLmNoaWxkcmVuW2ldO1xyXG4gICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbaV07XHJcbiAgICAgIFR3ZWVuTGl0ZS50byhlbC5wb3NpdGlvbiwgY2FjaGUuZHVyYXRpb24sIHsgejogMCB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLm91dCA9IGZ1bmN0aW9uICh3YXkpIHtcclxuICAgIHZhciBmYWN0b3IgPSB3YXkgPT09ICd1cCcgPyAxIDogLTE7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBncm91cC5jaGlsZHJlbi5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgICAgdmFyIGVsID0gZ3JvdXAuY2hpbGRyZW5baV07XHJcbiAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tpXTtcclxuICAgICAgVHdlZW5MaXRlLnRvKGVsLnBvc2l0aW9uLCBjYWNoZS5kdXJhdGlvbiwgeyB6OiBmYWN0b3IgKiBjYWNoZS56IH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGlkbGVUd2VlbnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XHJcbiAgICAgIGlkbGVUd2VlbnNbaV0ucmVzdW1lKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBpZGxlVHdlZW5zLmxlbmd0aDsgaSA8IGo7IGkrKykge1xyXG4gICAgICBpZGxlVHdlZW5zW2ldLnBhdXNlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxuRHJvcC5kZWZhdWx0T3B0aW9ucyA9IHtcclxuICBjb3VudDogNixcclxuICBjb2xvcjogJyNmZmZmZmYnLFxyXG4gIGFtcGxpdHVkZTogMlxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCB3YXRlciByaXBwbGUgcGxhbmVcclxuICpcclxuICogQG1ldGhvZCBnZXRQbGFuZVxyXG4gKiBAcmV0dXJuIHtUSFJFRS5NZXNofVxyXG4gKi9cclxuRHJvcC5wcm90b3R5cGUuZ2V0UGxhbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHRleHR1cmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCcuL2FwcC9wdWJsaWMvaW1nL3RleHR1cmUtZHJvcC5wbmcnKTtcclxuICBcclxuICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgbWFwOiB0ZXh0dXJlLFxyXG4gICAgZGVwdGhXcml0ZTogZmFsc2UsXHJcbiAgICBkZXB0aFRlc3Q6IHRydWUsXHJcbiAgICB0cmFuc3BhcmVudDogdHJ1ZSxcclxuICAgIG9wYWNpdHk6IDAsXHJcbiAgICBibGVuZGluZzogVEhSRUUuQWRkaXRpdmVCbGVuZGluZyxcclxuICAgIGNvbG9yOiB0aGlzLnBhcmFtZXRlcnMuY29sb3IsXHJcbiAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlXHJcbiAgfSk7XHJcblxyXG4gIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDIwLCAyMCwgMSwgMSk7XHJcblxyXG4gIHJldHVybiBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCByaXBwbGUgYW5pbWF0aW9uXHJcbiAqXHJcbiAqIEBtZXRob2QgZ2V0VHdlZW5cclxuICogQHBhcmFtIHtUSFJFRS5NZXNofSBbcGxhbmVdXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbaW5kZXhdXHJcbiAqIEByZXR1cm4ge1R3ZWVuTGl0ZX1cclxuICovXHJcbkRyb3AucHJvdG90eXBlLmdldFR3ZWVuID0gZnVuY3Rpb24gKHBsYW5lLCBpbmRleCkge1xyXG4gIHZhciBjYWNoZSA9IHsgc2NhbGU6IDAuMSwgb3BhY2l0eTogMSB9O1xyXG4gIHZhciBzY2FsZSA9IChpbmRleCArIDEpICogKHRoaXMucGFyYW1ldGVycy5hbXBsaXR1ZGUpIC8gdGhpcy5wYXJhbWV0ZXJzLmNvdW50O1xyXG5cclxuICByZXR1cm4gVHdlZW5MaXRlLnRvKGNhY2hlLCAxLjUsIHsgc2NhbGU6IHNjYWxlLCBvcGFjaXR5OiAwLCBwYXVzZWQ6IHRydWUsIGRlbGF5OiAoaW5kZXggKiAxMDApIC8gMTAwMCxcclxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBwbGFuZS5zY2FsZS54ID0gcGxhbmUuc2NhbGUueSA9IGNhY2hlLnNjYWxlO1xyXG4gICAgICAgIHBsYW5lLm1hdGVyaWFsLm9wYWNpdHkgPSBjYWNoZS5vcGFjaXR5O1xyXG4gICAgICB9LFxyXG4gICAgICBvbkNvbXBsZXRlOiBsb29wXHJcbiAgICB9KTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRHJvcDsiXX0=
},{"../utils/loopUtil":62}],29:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var yoyo = require('../utils/yoyoUtil');

var matCap = require('../materials/matCapMaterial');
matCap.uniforms.map.value = THREE.ImageUtils.loadTexture('./app/public/img/matCap-shiny.jpg');

/**
 * 3D face
 *
 * @class Face
 * @constructor
 * @requires THREE, TweenLite, random, yoyo, matCap
 */
function Face () {
  var group = new THREE.Object3D();

  var loader = new THREE.JSONLoader();
  loader.load('./app/public/3D/face-hp.js', function (geometry) {
    var mesh = new THREE.Mesh(geometry, matCap);
    mesh.scale.x = 1.5;
    mesh.scale.y = 1.5;

    group.add(mesh);

    var idleTween = TweenLite.to({ y: -0.2 }, 2, { y: 0.2, paused: true,
      onUpdate: function () {
        mesh.rotation.y = this.target.y;
      },
      onComplete: yoyo,
      onReverseComplete: yoyo
    });

    this.in = function () {
      TweenLite.to(mesh.rotation, 1.5, { x: 0 });
    };

    this.out = function (way) {
      var x = way === 'up' ? -1 : 1;
      TweenLite.to(mesh.rotation, 1.5, { x: x });
    };

    this.start = function () {
      idleTween.resume();
    };

    this.stop = function () {
      idleTween.pause();
    };
  }.bind(this));

  this.el = group;

  this.start = function () {};

  this.stop = this.start;

  this.in = this.start;

  this.out = this.start;
}

module.exports = Face;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL0ZhY2VIcE9iamVjdDNELmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBUSFJFRSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydUSFJFRSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVEhSRUUnXSA6IG51bGwpO1xyXG52YXIgVHdlZW5MaXRlID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1R3ZWVuTGl0ZSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVHdlZW5MaXRlJ10gOiBudWxsKTtcclxuXHJcbnZhciB5b3lvID0gcmVxdWlyZSgnLi4vdXRpbHMveW95b1V0aWwnKTtcclxuXHJcbnZhciBtYXRDYXAgPSByZXF1aXJlKCcuLi9tYXRlcmlhbHMvbWF0Q2FwTWF0ZXJpYWwnKTtcclxubWF0Q2FwLnVuaWZvcm1zLm1hcC52YWx1ZSA9IFRIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUoJy4vYXBwL3B1YmxpYy9pbWcvbWF0Q2FwLXNoaW55LmpwZycpO1xyXG5cclxuLyoqXHJcbiAqIDNEIGZhY2VcclxuICpcclxuICogQGNsYXNzIEZhY2VcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEByZXF1aXJlcyBUSFJFRSwgVHdlZW5MaXRlLCByYW5kb20sIHlveW8sIG1hdENhcFxyXG4gKi9cclxuZnVuY3Rpb24gRmFjZSAoKSB7XHJcbiAgdmFyIGdyb3VwID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcblxyXG4gIHZhciBsb2FkZXIgPSBuZXcgVEhSRUUuSlNPTkxvYWRlcigpO1xyXG4gIGxvYWRlci5sb2FkKCcuL2FwcC9wdWJsaWMvM0QvZmFjZS1ocC5qcycsIGZ1bmN0aW9uIChnZW9tZXRyeSkge1xyXG4gICAgdmFyIG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0Q2FwKTtcclxuICAgIG1lc2guc2NhbGUueCA9IDEuNTtcclxuICAgIG1lc2guc2NhbGUueSA9IDEuNTtcclxuXHJcbiAgICBncm91cC5hZGQobWVzaCk7XHJcblxyXG4gICAgdmFyIGlkbGVUd2VlbiA9IFR3ZWVuTGl0ZS50byh7IHk6IC0wLjIgfSwgMiwgeyB5OiAwLjIsIHBhdXNlZDogdHJ1ZSxcclxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBtZXNoLnJvdGF0aW9uLnkgPSB0aGlzLnRhcmdldC55O1xyXG4gICAgICB9LFxyXG4gICAgICBvbkNvbXBsZXRlOiB5b3lvLFxyXG4gICAgICBvblJldmVyc2VDb21wbGV0ZTogeW95b1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5pbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgVHdlZW5MaXRlLnRvKG1lc2gucm90YXRpb24sIDEuNSwgeyB4OiAwIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm91dCA9IGZ1bmN0aW9uICh3YXkpIHtcclxuICAgICAgdmFyIHggPSB3YXkgPT09ICd1cCcgPyAtMSA6IDE7XHJcbiAgICAgIFR3ZWVuTGl0ZS50byhtZXNoLnJvdGF0aW9uLCAxLjUsIHsgeDogeCB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWRsZVR3ZWVuLnJlc3VtZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlkbGVUd2Vlbi5wYXVzZSgpO1xyXG4gICAgfTtcclxuICB9LmJpbmQodGhpcykpO1xyXG5cclxuICB0aGlzLmVsID0gZ3JvdXA7XHJcblxyXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7fTtcclxuXHJcbiAgdGhpcy5zdG9wID0gdGhpcy5zdGFydDtcclxuXHJcbiAgdGhpcy5pbiA9IHRoaXMuc3RhcnQ7XHJcblxyXG4gIHRoaXMub3V0ID0gdGhpcy5zdGFydDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGYWNlOyJdfQ==
},{"../materials/matCapMaterial":9,"../utils/yoyoUtil":66}],30:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var random = require('../utils/randomUtil');
var noise = require('../utils/noiseUtil');
var map = require('../utils/mapUtil');

/**
 * 3D Flow field
 * Fake flocking
 *
 * @param {Array} [points] MainCurve's points
 * @param {Object} [options]
 * @param {Object} [options.subsNumber=3] SubCurves number
 * @param {Number} [options.subsAmplitude=30] SubCurves amplitude
 * @param {Number} [options.subsPrecision=10] SubCurves precision (=subdivisions)
 * @param {Number} [options.noiseXincrement=0.1] SubCurves x noise
 * @param {Number} [options.moiseYincrement=0.1] SubCurves y noise
 * @param {Number} [options.noiseZincrement=0.1] SubCurves z noise
 * @param {Number} [options.renderResolution=100] SubCurves render precision (=subdivisions)
 * @param {String} [options.mainColor='#ffffff'] MainCurve's color
 * @param {String} [options.subsColor='#4c4c4c'] SubCurves color
 * @requires jQuery, THREE, TweenLite, random, noise, map
 */
function FlowField (points, options) {
  this.parameters = jQuery.extend(FlowField.defaultOptions, options);

  var group = new THREE.Object3D();

  var curves = this.getCurves(points);
  var main = curves.main;
  var subs = curves.subs;
  var lines = this.getLines(main, subs);
  var inTweens = [];

  for (var i = 0, j = lines.length; i < j; i++) {
    group.add(lines[i]);
    inTweens.push(this.getInTween(lines[i]));
  }

  var triangleGeometry = new THREE.TetrahedronGeometry(3);
  var triangleMaterial = new THREE.MeshLambertMaterial({ shading: THREE.FlatShading });
  var triangleMesh = new THREE.Mesh(triangleGeometry, triangleMaterial);

  var follow = this.getFollow(triangleMesh, subs);

  for (var k = 0, l = follow.meshes.length; k < l; k++) {
    group.add(follow.meshes[k]);
  }

  this.el = group;

  this.in = function () {
    for (var i = 0, j = inTweens.length; i < j; i++) {
      inTweens[i].restart();
    }
  };

  this.out = function () {
    for (var i = 0, j = inTweens.length; i < j; i++) {
      inTweens[i].reverse();
    }
  };

  this.start = function () {
    for (var i = 0, j = follow.tweens.length; i < j; i++) {
      follow.tweens[i].resume();
    }
  };

  this.stop = function () {
    for (var i = 0, j = follow.tweens.length; i < j; i++) {
      follow.tweens[i].pause();
    }
  };
}

FlowField.defaultOptions = {
  subsNumber: 3,
  subsAmplitude: 30,
  subsPrecision: 10,
  noiseXincrement: 0.1,
  moiseYincrement: 0.1,
  noiseZincrement: 0.1,
  renderResolution: 100,
  mainColor: '#ffffff',
  subsColor: '#4c4c4c',
  subsHiddenColo: '#0a0a0a'
};

/**
 * Get main and subs curves
 *
 * @method getCurves
 * @return {Object}
 */
FlowField.prototype.getCurves = function (points) {
  var main = new THREE.SplineCurve3(points);

  var subsPoints = main.getPoints(this.parameters.subsPrecision);

  var subs = [];

  for (var i = 0; i < this.parameters.subsNumber; i++) {
    var noiseX = random(0, 10);
    var noiseY = random(0, 10);
    var noiseZ = random(0, 10);

    var newPoints = [];
    for (var j = 0, k = subsPoints.length; j < k; j++) {
      var point = subsPoints[j].clone();

      point.x += map(noise(noiseX), [0, 1], [-this.parameters.subsAmplitude, this.parameters.subsAmplitude]);
      point.y += map(noise(noiseY), [0, 1], [-this.parameters.subsAmplitude, this.parameters.subsAmplitude]);
      point.z += map(noise(noiseZ), [0, 1], [-this.parameters.subsAmplitude, this.parameters.subsAmplitude]);

      noiseX += this.parameters.noiseXincrement;
      noiseY += this.parameters.moiseYincrement;
      noiseZ += this.parameters.noiseZincrement;

      newPoints.push(point);
    }

    subs.push(new THREE.SplineCurve3(newPoints));
  }

  return {
    main: main,
    subs: subs
  };
};

/**
 * Get lines
 *
 * @method getLines
 * @param {THREE.SplineCurve3} [main] Main curve
 * @param {Array} [subs] Sub curves
 * @return {Array}
 */
FlowField.prototype.getLines = function (main, subs) {
  var lines = [];

  var mainMaterial = new THREE.LineBasicMaterial({ color: this.parameters.mainColor });

  var mainGeometry = new THREE.Geometry();
  var mainPoints = main.getPoints(this.parameters.renderResolution);
  mainGeometry.vertices = mainPoints;

  var mainLine = new THREE.Line(mainGeometry, mainMaterial);
  mainLine.visible = false;
  lines.push(mainLine);

  var subMaterial = new THREE.LineBasicMaterial({ color: this.parameters.subsColor });

  for (var i = 0, j = subs.length; i < j; i++) {
    var subGeometry = new THREE.Geometry();
    var subPoints = subs[i].getPoints(this.parameters.renderResolution);
    subGeometry.vertices = subPoints;

    var subLine = new THREE.Line(subGeometry, subMaterial);
    subLine.visible = false;
    lines.push(subLine);
  }

  return lines;
};

/**
 * Get in animation
 *
 * @method getInTween
 * @param {THREE.Line} [line] Line to animate
 * @return {TweenLite}
 */
FlowField.prototype.getInTween = function (line) {
  return TweenLite.to({}, random(1, 3), { paused: true,
      onComplete: function () {
        line.visible = true;

        TweenLite.delayedCall(0.2, function () {
          line.visible = false;
        });

        TweenLite.delayedCall(0.3, function () {
          line.visible = true;
        });
      },
      onReverseComplete: function () {
        line.visible = false;
      }
    });
};

/**
 * Get follow animatiom
 *
 * @method getFollor
 * @param {THREE.Mesh} Mesh following
 * @param {Array} Curves
 * @return {Object}
 */
FlowField.prototype.getFollow = function (mesh, curves) {
  var meshes = [];
  var tweens = [];

  function getTween (mesh, sub) {
    return TweenLite.to({ i: 0 }, random(4, 8), { i: 1, paused: true, ease: window.Linear.easeNone,
        onUpdate: function () {
          var position = sub.getPoint(this.target.i);
          var rotation = sub.getTangent(this.target.i);
          
          mesh.position.set(position.x, position.y, position.z);
          mesh.rotation.set(rotation.x, rotation.y, rotation.z);
        },
        onComplete: function () {
          this.restart();
        }
      });
  }

  for (var i = 0, j = curves.length; i < j; i++) {
    var meshCopy = mesh.clone();
    var curve = curves[i];

    meshes.push(meshCopy);
    tweens.push(getTween(meshCopy, curve));
  }

  return {
    tweens: tweens,
    meshes: meshes
  };
};

module.exports = FlowField;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../utils/mapUtil":63,"../utils/noiseUtil":64,"../utils/randomUtil":65}],31:[function(require,module,exports){
(function (global){
/* jshint laxbreak: true */

'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var random = require('../utils/randomUtil');
var map = require('../utils/mapUtil');
var loop = require('../utils/loopUtil');

/**
 * @class Galaxy
 * @constructor
 * @param {Object} [options]
 * @param {String} [ringFromColor='#ffffff'] Off color
 * @param {String} [ringToColor='#333333'] On color
 * @param {Number} [ringDivisions=100] Rings divisions
 * @param {Number} [ringColorSteps=30] Gradient steps
 * @requires jQuery, THREE, TweenLite, random, map, loop
 */
function Galaxy (options) {
  this.parameters = jQuery.extend(Galaxy.defaultOptions, options);

  var group = new THREE.Object3D();

  var ring = this.getRing();
  var planet = this.getPlanet();

  var greyPlanet = planet.clone();
  greyPlanet.material = greyPlanet.material.clone();
  greyPlanet.material.color = new THREE.Color('#4c4c4c');

  var blackPlanet = planet.clone();
  blackPlanet.material = blackPlanet.material.clone();
  blackPlanet.material.color = new THREE.Color('#000000');

  var radius = [8, 10, 16, 25, 31];
  var planets = {
    8: { el: planet.clone(), scale: 0.2, increment: 0.03 },
    10: { el: greyPlanet.clone(), scale: 0.1, increment: 0.03 },
    16: { el: greyPlanet.clone(), scale: 0.5, increment: 0.02 },
    25: { el: planet.clone(), scale: 0.7 },
    31: { el: blackPlanet.clone(), scale: 0.5, increment: 0.05 }
  };

  for (var i = 0, j = radius.length; i < j; i++) {
    var ringRadius = radius[i];

    var ringCopy = ring.clone();
    ringCopy.scale.x = ringCopy.scale.y = ringRadius;
    ringCopy.rotation.z = random(0, Math.PI);

    group.add(ringCopy);

    if (planets[ringRadius]) {
      var planetCopy = planets[ringRadius].el;
      var scale = planets[ringRadius].scale;

      planetCopy.scale.x = planetCopy.scale.y = planetCopy.scale.z = scale;

      // random start theta
      var theta = random(0, 2 * Math.PI);
      var x = ringRadius * Math.cos(theta);
      var y = ringRadius * Math.sin(theta);
      planets[ringRadius].theta = theta;
      planetCopy.position.set(x, y, 0);

      group.add(planetCopy);
    }
  }

  var cache = { rotationX: 0, rotationY: 0 };

  function update () {
    group.rotation.y = cache.rotationY;
    group.rotation.x = cache.rotationX;
  }

  this.el = group;

  this.in = function (way) {
    cache = way === 'up'
      ? { rotationY: -0.6, rotationX: -0.5 }
      : { rotationY: 0.6, rotationX: -1.5 };

    update();

    TweenLite.to(cache, 2, { rotationX: -1, rotationY: 0.2, onUpdate: update });
  };

  this.out = function (way) {
    var to = way === 'up'
      ? { rotationY: 0.6, rotationX: -1.5, onUpdate: update }
      : { rotationY: -0.6, rotationX: -0.5, onUpdate: update };
  
    TweenLite.to(cache, 1, to);
  };

  var idleTween = TweenLite.to({}, 10, { paused: true,
      onUpdate: function () {
        for (var radius in planets) {
          if (planets.hasOwnProperty(radius)) {
            var el = planets[radius].el;
            var theta = planets[radius].theta;
            var increment = planets[radius].increment || 0.01;

            var x = radius * Math.cos(theta);
            var y = radius * Math.sin(theta);

            planets[radius].theta -= increment;

            el.position.x = x;
            el.position.y = y;
          }
        }

        ring.geometry.colors = ring.geometry.colors.concat(ring.geometry.colors.splice(0, 1));
        ring.geometry.colorsNeedUpdate = true;
      },
      onComplete: loop
    });

  this.start = function () {
    idleTween.resume();
  };

  this.stop = function () {
    idleTween.pause();
  };
}

Galaxy.defaultOptions = {
  ringFromColor: '#ffffff',
  ringToColor: '#333333',
  ringDivisions: 100,
  ringColorSteps: 30
};

/**
 * Get base planet
 *
 * @method getPlanet
 * @return {THREE.Mesh}
 */
Galaxy.prototype.getPlanet = function () {
  var planetMaterial = new THREE.MeshBasicMaterial();
  var planetGeometry = new THREE.SphereGeometry(5, 20, 20);
  var planet = new THREE.Mesh(planetGeometry, planetMaterial);

  return planet;
};

/**
 * Get base ring
 *
 * @method getRing
 * @return {THREE.Line}
 */
Galaxy.prototype.getRing = function () {
  var material = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors });

  var geometry = new THREE.Geometry();

  var step = 2 * Math.PI / this.parameters.ringDivisions;

  for (var i = 0; i < this.parameters.ringDivisions + 1; i++) {
    var theta = i * step;

    var vertex = new THREE.Vector3(1 * Math.cos(theta), 1 * Math.sin(theta), 0);

    geometry.vertices.push(vertex);
  }

  var fromColor = new THREE.Color(this.parameters.ringFromColor);
  var toColor = new THREE.Color(this.parameters.ringToColor);

  var colors = [];

  for (var j = 0; j < this.parameters.ringColorSteps; j++) {
    var percent = map(j + 1, [0, this.parameters.ringColorSteps], [0, 1]);
    colors[j] = fromColor.clone().lerp(toColor, percent);
  }

  var total = geometry.vertices.length;
  var start = 0;
  var current = start;

  var verticesColors = [];

  for (var k = 0; k < total; k++) {
    current++;

    if (current > total) {
      current = 0;
    }

    var vertexColor = colors[current] ? colors[current] : toColor;

    verticesColors.push(vertexColor);
  }

  geometry.colors = verticesColors;

  var ring = new THREE.Line(geometry, material);

  return ring;
};

module.exports = Galaxy;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../utils/loopUtil":62,"../utils/mapUtil":63,"../utils/randomUtil":65}],32:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var map = require('../utils/mapUtil');
var random = require('../utils/randomUtil');

/**
 * Simple 3D grid that can receive forces
 *
 * @class Grid
 * @constructor
 * @param {Object} [options]
 * @param {Number} [options.stepsX=10] x steps
 * @param {Number} [options.stepsY=10] y steps
 * @param {Number} [options.stepSize=2] Step's size,
 * @param {String} [options.linesFromColor='#ffffff'] Height min color
 * @param {String} [options.linesToColor='#333333'] Height max color
 * @requires jQuery, THREE
 */
function Grid (options) {
  this.parameters = jQuery.extend(Grid.defaultOptions, options);

  this.lines = null;
  this.points = null;
  this.colorsCache = {}; // cache vertices colors

  this.el = null;

  this.init();
  this.render();
}

Grid.defaultOptions = {
  stepsX: 10,
  stepsY: 10,
  stepSize: 2,
  linesFromColor: '#ffffff',
  linesToColor: '#333333',
  points: false
};

/**
 * Initialize
 *
 * @method init
 */
Grid.prototype.init = function () {
  var width = (this.parameters.stepsX - 1) * this.parameters.stepSize;
  var height = (this.parameters.stepsY - 1) * this.parameters.stepSize;

  var points = new THREE.Geometry();

  for (var x = 0; x < this.parameters.stepsX; x++) {
    for (var y = 0; y < this.parameters.stepsY; y++) {
      var xPos = (x * this.parameters.stepSize) - (width / 2);
      var yPos = (y * this.parameters.stepSize) - (height / 2);
      var zPos = 0;

      var vertex = new THREE.Vector3(xPos, yPos, zPos);
      points.vertices.push(vertex);
    }
  }

  // init color cache
  var fromColor = new THREE.Color(this.parameters.linesFromColor);
  var toColor = new THREE.Color(this.parameters.linesToColor);

  for (var i = 0; i <= 1; i += 0.1) {
    var percent = Math.round(i * 10) / 10;
    this.colorsCache[percent] = fromColor.clone().lerp(toColor, percent);
  }

  this.points = points;
};

/**
 * Render the points and lines
 *
 * @method render
 */
Grid.prototype.render = function () {
  var group = new THREE.Object3D();

  // points
  var pointCloudMaterial = new THREE.PointCloudMaterial({
    size: 0.3
  });
  var pointCloud = new THREE.PointCloud(this.points, pointCloudMaterial);

  if (this.parameters.points) {
    group.add(pointCloud);
  }

  // lines
  var lines = new THREE.Object3D();

  var lineMaterial = new THREE.LineBasicMaterial({
    color: this.parameters.linesColor,
    vertexColors: THREE.VertexColors
  });

  // horizontal
  for (var i = 0; i < this.parameters.stepsY; i++) {
    var hLineGeometry = new THREE.Geometry();

    for (var j = 0; j < this.parameters.stepsX; j++) {
      hLineGeometry.vertices.push(
        this.points.vertices[i + (j * this.parameters.stepsY)]
      );
    }

    var hLine = new THREE.Line(hLineGeometry, lineMaterial);

    lines.add(hLine);
  }

  // vertical
  for (var k = 0; k < this.parameters.stepsX; k++) {
    var vLineGeometry = new THREE.Geometry();

    for (var l = 0; l < this.parameters.stepsY; l++) {
      vLineGeometry.vertices.push(
        this.points.vertices[(k * this.parameters.stepsY) + l]
      );        
    }

    var vLine = new THREE.Line(vLineGeometry, lineMaterial);

    lines.add(vLine);
  }

  group.add(lines);

  // exports
  this.points = pointCloud;
  this.lines = lines;
  this.el = group;
};

/**
 * Apply a force onto the grid
 *
 * @method applyForce
 * @param {THREE.Vector3} [center] Where to apply the force
 * @param {Number} [strength] Strength of the force
 */
Grid.prototype.applyForce = function (center, strength) {
  // update points
  for (var i = 0, j = this.points.geometry.vertices.length; i < j; i++) {
    var dist = this.points.geometry.vertices[i].distanceTo(center);

    this.points.geometry.vertices[i].z -= (strength * 10) / Math.sqrt(dist * 2 ) - (strength * 2);
  }
  this.points.geometry.verticesNeedUpdate = true;

  // update lines
  for (var k = 0, l = this.lines.children.length; k < l; k++) {
    var geometry = this.lines.children[k].geometry;

    // update vertices colors
    for (var m = 0, n = geometry.vertices.length; m < n; m++) {
      var vertex = geometry.vertices[m];
      var percent = map(vertex.z, [0, 5], [0, 1]);
      percent = Math.round(percent * 10) / 10;

      geometry.colors[m] = this.colorsCache[percent];
    }

    geometry.verticesNeedUpdate = true;
    geometry.colorsNeedUpdate = true;
  }
};

/**
 * Reset all the forces applied
 *
 * @method resetFroce
 */
Grid.prototype.resetForce = function () {
  for (var i = 0, j = this.points.geometry.vertices.length; i < j; i++) {
    this.points.geometry.vertices[i].z = 0;
  }
};

/**
 * Get grid total size
 *
 * @method getSize
 * @return {Object}
 */
Grid.prototype.getSize = function () {
  var width = (this.parameters.stepsX - 1) * this.parameters.stepSize;
  var height = (this.parameters.stepsY - 1) * this.parameters.stepSize;

  return {
    x: {
      min: -(width / 2),
      max: (this.parameters.stepsX * this.parameters.stepSize) - (width / 2)
    },
    y: {
      min: -(height / 2),
      max: (this.parameters.stepsY * this.parameters.stepSize) - (height / 2)
    }
  };
};

/**
 * Gravity grid
 *
 * @class GravityGrid
 * @constructor
 * @requires THREE, TWEEN
 */
function GravityGrid (options) {
  var group = new THREE.Object3D();

  var grid = new Grid({
    stepsX: 30,
    stepsY: 30,
    linesColor: options.linesColor || '#666666'
  });
  group.add(grid.el);

  var size = grid.getSize();
  var rangeX = size.x;
  var rangeY = size.y;

  var sphereRadius = 5;
  var mass = 5;
  var sphereGeometry = new THREE.SphereGeometry(sphereRadius, 20, 20);
  var sphereMaterial = new THREE.MeshBasicMaterial({
    color: '#ffffff'
  });
  var sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);
  sphereMesh.position.set(0, 30, 40);
  group.add(sphereMesh);

  var satelliteA = sphereMesh.clone();
  var satelliteB = sphereMesh.clone();

  satelliteA.scale.x = satelliteA.scale.y = satelliteA.scale.z = 0.5;
  satelliteB.scale.x = satelliteB.scale.y = satelliteB.scale.z = 0.25;

  satelliteA.position.z = 6;
  satelliteB.position.z = 6;

  var massA = 2.5;
  var massB = 2;

  group.add(satelliteA);
  group.add(satelliteB);
  
  var cache = { xA: 0, yA: 0, xB: 0, yB: 0 };

  function setIdleTween (paused) {
    var properties = {
      bezier: {
        type: 'soft',
        values: [
          {
            xA: random(rangeX.min, rangeX.max),
            yA: random(rangeX.min, rangeX.max),
            xB: random(rangeX.min, rangeX.max),
            yB: random(rangeY.min, rangeY.max)
          },
          {
            xA: random(rangeX.min, rangeX.max),
            yA: random(rangeX.min, rangeX.max),
            xB: random(rangeX.min, rangeX.max),
            yB: random(rangeY.min, rangeY.max)
          }
        ]
      },
      onUpdate: function () {
        satelliteA.position.x = this.target.xA;
        satelliteA.position.y = this.target.yA;

        satelliteB.position.x = this.target.xB;
        satelliteB.position.y = this.target.yB;

        grid.resetForce();
        grid.applyForce(sphereMesh.position, mass);
        grid.applyForce(satelliteA.position, massA);
        grid.applyForce(satelliteB.position, massB);
      },
      onComplete: function () {
        idleTween = setIdleTween();
      }
    };

    if (paused) {
      properties.paused = true;
    }

    return TweenLite.to(cache, 2, properties);
  }

  var idleTween = setIdleTween(true);
  
  // animate for 50 ms to put the sphere in the right position
  idleTween.resume();
  TweenLite.delayedCall(0.1, function () {
    idleTween.pause();
  });

  this.el = group;

  this.in = function () {
    TweenLite.to(sphereMesh.position, 1, {
        x: (rangeX.max + rangeX.min) / 2,
        y: (rangeY.max + rangeY.min) / 2,
        z: 5,
        delay: 0.2
      });
  };

  this.out = function () {
    TweenLite.to(sphereMesh.position, 1, { x: 0, y: 30, z: 40, delay: 0.2 });
  };

  this.start = function () {
    idleTween.resume();
  };

  this.stop = function () {
    idleTween.pause();
  };
}

module.exports = GravityGrid;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../utils/mapUtil":63,"../utils/randomUtil":65}],33:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var random = require('../utils/randomUtil');
var yoyo = require('../utils/yoyoUtil');

/**
 * Animated grid
 *
 * @class Grid
 * @constructor
 * @param {Object} [options]
 * @param {Boolean} [options.points=false] Points?
 * @param {Number} [options.divisionsSize=10] Divisions size
 * @param {Number} [options.divisionsX=11] X axis divisions
 * @param {Number} [options.divisionsY=11] Y axis divisions
 * @param {String} [options.fromColor='#ffffff'] On color
 * @param {String} [options.toColor='#0a0a0a'] Off color
 * @requires jQuery, THREE, TweenLite, random, yoyo
 */
function Grid (options) {
  this.parameters = jQuery.extend(Grid.defaultOptions, options);

  this.width = (this.parameters.divisionsX - 1) * this.parameters.divisionsSize;
  this.height = (this.parameters.divisionsY - 1) * this.parameters.divisionsSize;

  var group = new THREE.Object3D();

  var vertices = this.getVertices();

  if (this.parameters.points) {
    var pointsGeometry = new THREE.Geometry();

    for (var i = 0, j = vertices.length; i < j; i++) {
      pointsGeometry.vertices.push(vertices[i][0]);
      pointsGeometry.vertices.push(vertices[i][1]);
      pointsGeometry.vertices.push(vertices[i][2]);
    }
    
    var pointsMaterial = new THREE.PointCloudMaterial({ size: 0.2 });
    var points = new THREE.PointCloud(pointsGeometry, pointsMaterial);

    group.add(points);
  }

  var lineMaterial = new THREE.LineBasicMaterial({
    vertexColors: THREE.VertexColors,
    linewidth: 1
  });

  var colorsCache = {};
  var fromColor = new THREE.Color(this.parameters.fromColor);
  var toColor = new THREE.Color(this.parameters.toColor);

  var idleTweens = [];

  for (var k = 0, l = vertices.length; k < l; k++) {
    var lineGeometry = new THREE.Geometry();

    var firstTo = vertices[k][0].clone();
    var secondTo = vertices[k][2].clone();

    lineGeometry.vertices.push(vertices[k][1].clone());
    lineGeometry.vertices.push(vertices[k][1]);
    lineGeometry.vertices.push(vertices[k][1].clone());

    for (var m = 0, n = lineGeometry.vertices.length; m < n; m++) {

      var color = null;
      var percent = null;

      if (k >= this.parameters.divisionsX) {
        // horizontal
        var y = lineGeometry.vertices[m].y;
        percent = Math.abs((y * 100 / this.height) / 100);
      } else {
        // vertical
        var x = lineGeometry.vertices[m].x;
        percent = Math.abs((x * 100 / this.width) / 100);
      }

      if (!colorsCache[percent]) {
        color = fromColor.clone().lerp(toColor, percent + 0.2);
        colorsCache[percent] = color;
      } else {
        color = colorsCache[percent];
      }

      lineGeometry.colors.push(toColor);
      lineGeometry.colors.push(color);
      lineGeometry.colors.push(toColor);
    }

    var line = new THREE.Line(lineGeometry, lineMaterial);

    idleTweens.push(this.getTween(line, line.geometry.vertices[0], firstTo));
    idleTweens.push(this.getTween(line, line.geometry.vertices[2], secondTo));
    
    group.add(line);
  }

  this.el = group;

  this.start = function () {
    for (var i = 0, j = idleTweens.length; i < j; i++) {
      idleTweens[i].resume();
    }
  };

  this.stop = function () {
    for (var i = 0, j = idleTweens.length; i < j; i++) {
      idleTweens[i].pause();
    }
  };

  this.in = function () {
    TweenLite.to(group.position, 1, { y: 0 });
  };

  this.out = function (way) {
    var y = way === 'up' ? -50 : 50;
    TweenLite.to(group.position, 1, { y: y });
  };
}

Grid.defaultOptions = {
  points: false,
  divisionsSize: 10,
  divisionsX: 11,
  divisionsY: 11,
  fromColor: '#ffffff',
  toColor: '#0a0a0a'
};

/**
 * Get vertices
 *
 * @method getVertices
 * @return {Array} vertices
 */
Grid.prototype.getVertices = function () {
  var vertices = [];

  // horizontal
  for (var x = 0; x < this.parameters.divisionsX; x++) {
    var xPosH = (x * this.parameters.divisionsSize) - (this.width / 2);
    var yPosH = this.height - (this.height / 2);

    vertices.push([
      new THREE.Vector3(xPosH, -this.height / 2, 0),
      new THREE.Vector3(xPosH, yPosH - (this.height / 2) , 0),
      new THREE.Vector3(xPosH, yPosH, 0)
    ]);
  }

  // vertical
  for (var y = 0; y < this.parameters.divisionsY; y++) {
    var xPosV = this.width - (this.width / 2);
    var yPosV = (y * this.parameters.divisionsSize) - (this.height / 2);

    vertices.push([
      new THREE.Vector3(-this.width / 2, yPosV, 0),
      new THREE.Vector3(xPosV - (this.width / 2), yPosV, 0),
      new THREE.Vector3(xPosV, yPosV, 0)
    ]);
  }

  return vertices;
};

/**
 * Get line animation
 *
 * @method getTween
 * @param {THREE.Line} [line] Line to animate
 * @param {THREE.Vector3} [from] Start coordinates
 * @param {THREE.Vector3} [to] End coordinates
 */
Grid.prototype.getTween = function (line, from, to) {
  var parameters = {
    paused: true,
    delay: random(0, 2),
    onUpdate: function () {
      line.geometry.verticesNeedUpdate = true;
      line.geometry.computeBoundingSphere();
    },
    onComplete: yoyo,
    onReverseComplete: yoyo,
    x: to.x,
    y: to.y,
    z: to.z
  };

  return TweenLite.to(from, random(1, 2), parameters);
};

module.exports = Grid;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL0dyaWRPYmplY3QzRC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGpRdWVyeSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydqUXVlcnknXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2pRdWVyeSddIDogbnVsbCk7XHJcbnZhciBUSFJFRSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydUSFJFRSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVEhSRUUnXSA6IG51bGwpO1xyXG52YXIgVHdlZW5MaXRlID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1R3ZWVuTGl0ZSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVHdlZW5MaXRlJ10gOiBudWxsKTtcclxuXHJcbnZhciByYW5kb20gPSByZXF1aXJlKCcuLi91dGlscy9yYW5kb21VdGlsJyk7XHJcbnZhciB5b3lvID0gcmVxdWlyZSgnLi4vdXRpbHMveW95b1V0aWwnKTtcclxuXHJcbi8qKlxyXG4gKiBBbmltYXRlZCBncmlkXHJcbiAqXHJcbiAqIEBjbGFzcyBHcmlkXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMucG9pbnRzPWZhbHNlXSBQb2ludHM/XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5kaXZpc2lvbnNTaXplPTEwXSBEaXZpc2lvbnMgc2l6ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZGl2aXNpb25zWD0xMV0gWCBheGlzIGRpdmlzaW9uc1xyXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZGl2aXNpb25zWT0xMV0gWSBheGlzIGRpdmlzaW9uc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuZnJvbUNvbG9yPScjZmZmZmZmJ10gT24gY29sb3JcclxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnRvQ29sb3I9JyMwYTBhMGEnXSBPZmYgY29sb3JcclxuICogQHJlcXVpcmVzIGpRdWVyeSwgVEhSRUUsIFR3ZWVuTGl0ZSwgcmFuZG9tLCB5b3lvXHJcbiAqL1xyXG5mdW5jdGlvbiBHcmlkIChvcHRpb25zKSB7XHJcbiAgdGhpcy5wYXJhbWV0ZXJzID0galF1ZXJ5LmV4dGVuZChHcmlkLmRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgdGhpcy53aWR0aCA9ICh0aGlzLnBhcmFtZXRlcnMuZGl2aXNpb25zWCAtIDEpICogdGhpcy5wYXJhbWV0ZXJzLmRpdmlzaW9uc1NpemU7XHJcbiAgdGhpcy5oZWlnaHQgPSAodGhpcy5wYXJhbWV0ZXJzLmRpdmlzaW9uc1kgLSAxKSAqIHRoaXMucGFyYW1ldGVycy5kaXZpc2lvbnNTaXplO1xyXG5cclxuICB2YXIgZ3JvdXAgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgdmFyIHZlcnRpY2VzID0gdGhpcy5nZXRWZXJ0aWNlcygpO1xyXG5cclxuICBpZiAodGhpcy5wYXJhbWV0ZXJzLnBvaW50cykge1xyXG4gICAgdmFyIHBvaW50c0dlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgICAgcG9pbnRzR2VvbWV0cnkudmVydGljZXMucHVzaCh2ZXJ0aWNlc1tpXVswXSk7XHJcbiAgICAgIHBvaW50c0dlb21ldHJ5LnZlcnRpY2VzLnB1c2godmVydGljZXNbaV1bMV0pO1xyXG4gICAgICBwb2ludHNHZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKHZlcnRpY2VzW2ldWzJdKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIHBvaW50c01hdGVyaWFsID0gbmV3IFRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbCh7IHNpemU6IDAuMiB9KTtcclxuICAgIHZhciBwb2ludHMgPSBuZXcgVEhSRUUuUG9pbnRDbG91ZChwb2ludHNHZW9tZXRyeSwgcG9pbnRzTWF0ZXJpYWwpO1xyXG5cclxuICAgIGdyb3VwLmFkZChwb2ludHMpO1xyXG4gIH1cclxuXHJcbiAgdmFyIGxpbmVNYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7XHJcbiAgICB2ZXJ0ZXhDb2xvcnM6IFRIUkVFLlZlcnRleENvbG9ycyxcclxuICAgIGxpbmV3aWR0aDogMVxyXG4gIH0pO1xyXG5cclxuICB2YXIgY29sb3JzQ2FjaGUgPSB7fTtcclxuICB2YXIgZnJvbUNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKHRoaXMucGFyYW1ldGVycy5mcm9tQ29sb3IpO1xyXG4gIHZhciB0b0NvbG9yID0gbmV3IFRIUkVFLkNvbG9yKHRoaXMucGFyYW1ldGVycy50b0NvbG9yKTtcclxuXHJcbiAgdmFyIGlkbGVUd2VlbnMgPSBbXTtcclxuXHJcbiAgZm9yICh2YXIgayA9IDAsIGwgPSB2ZXJ0aWNlcy5sZW5ndGg7IGsgPCBsOyBrKyspIHtcclxuICAgIHZhciBsaW5lR2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcclxuXHJcbiAgICB2YXIgZmlyc3RUbyA9IHZlcnRpY2VzW2tdWzBdLmNsb25lKCk7XHJcbiAgICB2YXIgc2Vjb25kVG8gPSB2ZXJ0aWNlc1trXVsyXS5jbG9uZSgpO1xyXG5cclxuICAgIGxpbmVHZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKHZlcnRpY2VzW2tdWzFdLmNsb25lKCkpO1xyXG4gICAgbGluZUdlb21ldHJ5LnZlcnRpY2VzLnB1c2godmVydGljZXNba11bMV0pO1xyXG4gICAgbGluZUdlb21ldHJ5LnZlcnRpY2VzLnB1c2godmVydGljZXNba11bMV0uY2xvbmUoKSk7XHJcblxyXG4gICAgZm9yICh2YXIgbSA9IDAsIG4gPSBsaW5lR2VvbWV0cnkudmVydGljZXMubGVuZ3RoOyBtIDwgbjsgbSsrKSB7XHJcblxyXG4gICAgICB2YXIgY29sb3IgPSBudWxsO1xyXG4gICAgICB2YXIgcGVyY2VudCA9IG51bGw7XHJcblxyXG4gICAgICBpZiAoayA+PSB0aGlzLnBhcmFtZXRlcnMuZGl2aXNpb25zWCkge1xyXG4gICAgICAgIC8vIGhvcml6b250YWxcclxuICAgICAgICB2YXIgeSA9IGxpbmVHZW9tZXRyeS52ZXJ0aWNlc1ttXS55O1xyXG4gICAgICAgIHBlcmNlbnQgPSBNYXRoLmFicygoeSAqIDEwMCAvIHRoaXMuaGVpZ2h0KSAvIDEwMCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gdmVydGljYWxcclxuICAgICAgICB2YXIgeCA9IGxpbmVHZW9tZXRyeS52ZXJ0aWNlc1ttXS54O1xyXG4gICAgICAgIHBlcmNlbnQgPSBNYXRoLmFicygoeCAqIDEwMCAvIHRoaXMud2lkdGgpIC8gMTAwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFjb2xvcnNDYWNoZVtwZXJjZW50XSkge1xyXG4gICAgICAgIGNvbG9yID0gZnJvbUNvbG9yLmNsb25lKCkubGVycCh0b0NvbG9yLCBwZXJjZW50ICsgMC4yKTtcclxuICAgICAgICBjb2xvcnNDYWNoZVtwZXJjZW50XSA9IGNvbG9yO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbG9yID0gY29sb3JzQ2FjaGVbcGVyY2VudF07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxpbmVHZW9tZXRyeS5jb2xvcnMucHVzaCh0b0NvbG9yKTtcclxuICAgICAgbGluZUdlb21ldHJ5LmNvbG9ycy5wdXNoKGNvbG9yKTtcclxuICAgICAgbGluZUdlb21ldHJ5LmNvbG9ycy5wdXNoKHRvQ29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBsaW5lID0gbmV3IFRIUkVFLkxpbmUobGluZUdlb21ldHJ5LCBsaW5lTWF0ZXJpYWwpO1xyXG5cclxuICAgIGlkbGVUd2VlbnMucHVzaCh0aGlzLmdldFR3ZWVuKGxpbmUsIGxpbmUuZ2VvbWV0cnkudmVydGljZXNbMF0sIGZpcnN0VG8pKTtcclxuICAgIGlkbGVUd2VlbnMucHVzaCh0aGlzLmdldFR3ZWVuKGxpbmUsIGxpbmUuZ2VvbWV0cnkudmVydGljZXNbMl0sIHNlY29uZFRvKSk7XHJcbiAgICBcclxuICAgIGdyb3VwLmFkZChsaW5lKTtcclxuICB9XHJcblxyXG4gIHRoaXMuZWwgPSBncm91cDtcclxuXHJcbiAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaWRsZVR3ZWVucy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgICAgaWRsZVR3ZWVuc1tpXS5yZXN1bWUoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGlkbGVUd2VlbnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XHJcbiAgICAgIGlkbGVUd2VlbnNbaV0ucGF1c2UoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLmluID0gZnVuY3Rpb24gKCkge1xyXG4gICAgVHdlZW5MaXRlLnRvKGdyb3VwLnBvc2l0aW9uLCAxLCB7IHk6IDAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5vdXQgPSBmdW5jdGlvbiAod2F5KSB7XHJcbiAgICB2YXIgeSA9IHdheSA9PT0gJ3VwJyA/IC01MCA6IDUwO1xyXG4gICAgVHdlZW5MaXRlLnRvKGdyb3VwLnBvc2l0aW9uLCAxLCB7IHk6IHkgfSk7XHJcbiAgfTtcclxufVxyXG5cclxuR3JpZC5kZWZhdWx0T3B0aW9ucyA9IHtcclxuICBwb2ludHM6IGZhbHNlLFxyXG4gIGRpdmlzaW9uc1NpemU6IDEwLFxyXG4gIGRpdmlzaW9uc1g6IDExLFxyXG4gIGRpdmlzaW9uc1k6IDExLFxyXG4gIGZyb21Db2xvcjogJyNmZmZmZmYnLFxyXG4gIHRvQ29sb3I6ICcjMGEwYTBhJ1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCB2ZXJ0aWNlc1xyXG4gKlxyXG4gKiBAbWV0aG9kIGdldFZlcnRpY2VzXHJcbiAqIEByZXR1cm4ge0FycmF5fSB2ZXJ0aWNlc1xyXG4gKi9cclxuR3JpZC5wcm90b3R5cGUuZ2V0VmVydGljZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHZlcnRpY2VzID0gW107XHJcblxyXG4gIC8vIGhvcml6b250YWxcclxuICBmb3IgKHZhciB4ID0gMDsgeCA8IHRoaXMucGFyYW1ldGVycy5kaXZpc2lvbnNYOyB4KyspIHtcclxuICAgIHZhciB4UG9zSCA9ICh4ICogdGhpcy5wYXJhbWV0ZXJzLmRpdmlzaW9uc1NpemUpIC0gKHRoaXMud2lkdGggLyAyKTtcclxuICAgIHZhciB5UG9zSCA9IHRoaXMuaGVpZ2h0IC0gKHRoaXMuaGVpZ2h0IC8gMik7XHJcblxyXG4gICAgdmVydGljZXMucHVzaChbXHJcbiAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKHhQb3NILCAtdGhpcy5oZWlnaHQgLyAyLCAwKSxcclxuICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoeFBvc0gsIHlQb3NIIC0gKHRoaXMuaGVpZ2h0IC8gMikgLCAwKSxcclxuICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoeFBvc0gsIHlQb3NILCAwKVxyXG4gICAgXSk7XHJcbiAgfVxyXG5cclxuICAvLyB2ZXJ0aWNhbFxyXG4gIGZvciAodmFyIHkgPSAwOyB5IDwgdGhpcy5wYXJhbWV0ZXJzLmRpdmlzaW9uc1k7IHkrKykge1xyXG4gICAgdmFyIHhQb3NWID0gdGhpcy53aWR0aCAtICh0aGlzLndpZHRoIC8gMik7XHJcbiAgICB2YXIgeVBvc1YgPSAoeSAqIHRoaXMucGFyYW1ldGVycy5kaXZpc2lvbnNTaXplKSAtICh0aGlzLmhlaWdodCAvIDIpO1xyXG5cclxuICAgIHZlcnRpY2VzLnB1c2goW1xyXG4gICAgICBuZXcgVEhSRUUuVmVjdG9yMygtdGhpcy53aWR0aCAvIDIsIHlQb3NWLCAwKSxcclxuICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoeFBvc1YgLSAodGhpcy53aWR0aCAvIDIpLCB5UG9zViwgMCksXHJcbiAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKHhQb3NWLCB5UG9zViwgMClcclxuICAgIF0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHZlcnRpY2VzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBsaW5lIGFuaW1hdGlvblxyXG4gKlxyXG4gKiBAbWV0aG9kIGdldFR3ZWVuXHJcbiAqIEBwYXJhbSB7VEhSRUUuTGluZX0gW2xpbmVdIExpbmUgdG8gYW5pbWF0ZVxyXG4gKiBAcGFyYW0ge1RIUkVFLlZlY3RvcjN9IFtmcm9tXSBTdGFydCBjb29yZGluYXRlc1xyXG4gKiBAcGFyYW0ge1RIUkVFLlZlY3RvcjN9IFt0b10gRW5kIGNvb3JkaW5hdGVzXHJcbiAqL1xyXG5HcmlkLnByb3RvdHlwZS5nZXRUd2VlbiA9IGZ1bmN0aW9uIChsaW5lLCBmcm9tLCB0bykge1xyXG4gIHZhciBwYXJhbWV0ZXJzID0ge1xyXG4gICAgcGF1c2VkOiB0cnVlLFxyXG4gICAgZGVsYXk6IHJhbmRvbSgwLCAyKSxcclxuICAgIG9uVXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGxpbmUuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgbGluZS5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuICAgIH0sXHJcbiAgICBvbkNvbXBsZXRlOiB5b3lvLFxyXG4gICAgb25SZXZlcnNlQ29tcGxldGU6IHlveW8sXHJcbiAgICB4OiB0by54LFxyXG4gICAgeTogdG8ueSxcclxuICAgIHo6IHRvLnpcclxuICB9O1xyXG5cclxuICByZXR1cm4gVHdlZW5MaXRlLnRvKGZyb20sIHJhbmRvbSgxLCAyKSwgcGFyYW1ldGVycyk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEdyaWQ7Il19
},{"../utils/randomUtil":65,"../utils/yoyoUtil":66}],34:[function(require,module,exports){
(function (global){
/* jshint laxbreak: true */
/* jshint shadow:true */

'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var Events = require('../classes/EventsClass');

var random = require('../utils/randomUtil');
var map = require('../utils/mapUtil');

/**
 * Animated height map
 *
 * @class HeightMap
 * @constructor
 * @param {Object} [options]
 * @param {Boolean} [options.horizontal=true] Horizontal lines?
 * @param {Boolean} [options.vertical=false] Vertical lines?
 * @param {Boolean} [options.plane=false] Plane?
 * @param {Boolean} [options.points=false] Points?
 * @param {Number} [options.divisionsX=30] X axis divisions
 * @param {Number} [options.divisionsY=30] Y axis divisions
 * @param {String} [options.fromColor='#4c4c4c'] Height min color
 * @param {String} [options.toColor='#ffffff'] Height max color
 * @param {Array} [options.maps=[]] Maps sources
 * @requires jQuery, THREE, TweenLite, Events, random, map
 */
function HeightMap (options) {
  this.parameters = jQuery.extend(HeightMap.defaultOptions, options);

  this.events = new Events();

  this.fromColor = new THREE.Color(this.parameters.fromColor);
  this.toColor = new THREE.Color(this.parameters.toColor);
  this.colorsCache = {};
  this.faceIndices = ['a', 'b', 'c', 'd'];

  this.ready = false;
  this.data = null;
  this.total = this.parameters.maps.length;
  this.previous = undefined;
  this.current = undefined;

  var group = new THREE.Object3D();

  this.geometry = new THREE.PlaneGeometry(50, 50, this.parameters.divisionsX, this.parameters.divisionsY);

  if (this.parameters.plane) {
    this.plane = this.getPlane();
    group.add(this.plane);
  }

  if (this.parameters.points) {
    this.points = this.getPoints();
    group.add(this.points);
  }

  if (this.parameters.horizontal || this.parameters.vertical) {
    this.lines = this.getLines();
    group.add(this.lines);
  }

  this.loadMaps();

  this.el = group;

  this.start = function () {};
  
  this.stop = this.start;

  this.on('ready', function () {
    this.ready = true;

    var idleTween = this.getIdleTween();

    this.start = function () {
      idleTween.resume();
    };

    this.stop = function () {
      idleTween.pause();
    };
  }.bind(this));
}

HeightMap.defaultOptions = {
  horizontal: true,
  vertical: false,
  plane: false,
  points: false,
  divisionsX: 30,
  divisionsY: 30,
  fromColor: '#4c4c4c',
  toColor: '#ffffff',
  maps: []
};

/**
 * Get plane
 *
 * @method getPlane
 * @param {THREE.Geometry} geometry
 * @return {THREE.Mesh}
 */
HeightMap.prototype.getPlane = function () {
  var material = new THREE.MeshLambertMaterial({
    shading: THREE.FlatShading,
    vertexColors: THREE.VertexColors
  });

  var plane = new THREE.Mesh(this.geometry, material);

  return plane;
};

/**
 * Get points
 *
 * @method getPoints
 * @param {THREE.Geometry} geometry
 * @return {THREE.PointCloud}
 */
HeightMap.prototype.getPoints = function () {
  var material = new THREE.PointCloudMaterial({ size: 0.3 });
  var points = new THREE.PointCloud(this.geometry, material);

  return points;
};

/**
 * Get lines
 *
 * @method getLines
 * @param {THREE.Geometry} geometry
 * @return {THREE.Object3D}
 */
HeightMap.prototype.getLines = function () {
  var material = new THREE.LineBasicMaterial({
    vertexColors: THREE.VertexColors
  });

  var lines = new THREE.Object3D();

  if (this.parameters.vertical) {
    for (var x = 0; x < this.parameters.divisionsX + 1; x++) {
      var lineGeometry = new THREE.Geometry();

      for (var y = 0; y < this.parameters.divisionsY + 1; y++) {
        var vertex = this.geometry.vertices[x + ((y * this.parameters.divisionsX) + y)];
        lineGeometry.vertices.push(vertex);
      }

      var line = new THREE.Line(lineGeometry, material);
      lines.add(line);
    }
  }

  if (this.parameters.horizontal) {
    for (var y = 0; y < this.parameters.divisionsY + 1; y++) {
      var lineGeometry = new THREE.Geometry();

      for (var x = 0; x < this.parameters.divisionsX + 1; x++) {
        var vertex = this.geometry.vertices[(y * (this.parameters.divisionsX + 1)) + x];
        lineGeometry.vertices.push(vertex);

        if (x === 0) {
          vertex.x -= random(0, 20);
        }

        if (x === this.parameters.divisionsX) {
          vertex.x += random(0, 20);
        }
      }

      var line = new THREE.Line(lineGeometry, material);
      lines.add(line);
    }
  }

  return lines;
};

/**
 * Get animations
 *
 * @method getIdleTween
 * @return {TweenLite}
 */
HeightMap.prototype.getIdleTween = function () {
  var _this = this;

  return TweenLite.to({}, 2, { paused: true,
      onComplete: function () {
        _this.current++;

        if (_this.current === _this.total) {
          _this.current = 0;
        }

        _this.applyMap();

        this.duration(random(1.5, 5));
        this.restart();
      }
    });
};

/**
 * Load maps
 *
 * @method loadMaps
 */
HeightMap.prototype.loadMaps = function () {
  var totalData = (this.parameters.divisionsX + 1) * (this.parameters.divisionsY + 1);
  this.data = { default: new Float32Array(totalData) };
  
  var loader = new THREE.ImageLoader();
  var total = this.parameters.maps.length;
  var loaded = 0;

  var addMap = function (name, image) {
    var width = image.width;
    var height = image.height;

    var canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;

    var context = canvas.getContext('2d');

    context.drawImage(image, 0, 0);

    var stepX = width / this.parameters.divisionsX;
    var stepY = height / this.parameters.divisionsY;

    var data = new Float32Array(totalData);
    var i = 0;

    for (var y = 0; y < height; y += stepY) {
      for (var x = 0; x < width; x += stepX) {
        var pixelData = context.getImageData(x, y, 1, 1).data;

        // Luminance = R + G + B
        // int8 must be in the [-127, 127] range
        // Max luminance = 765 (255 * 3), dividing by 10 ensures it can only be 76.5 at max
        data[i++] = (pixelData[0] + pixelData[1] + pixelData[2]) / 100;
      }
    }

    _this.data[name] = data;
  }.bind(this);

  var _this = this;
  
  function loadMap (map, index) {
    loader.load(map.url, function (image) {
      addMap(map.name, image);

      loaded++;

      if (loaded === 1) {
        _this.current = index;
        _this.applyMap();
      }

      if (loaded === total) {
        _this.trigger('ready');
      }
    });
  }

  for (var i = 0; i < total; i++) {
    var map = this.parameters.maps[i];
    loadMap(map, i);
  }
};

/**
 * Apply current map
 *
 * @method applyMap
 */
HeightMap.prototype.applyMap = function () {
  var previousName = typeof this.previous === 'undefined'
    ? 'default'
    : this.parameters.maps[this.previous].name;

  var currentName = this.parameters.maps[this.current].name;

  var previousData = this.data[previousName];
  var currentData = this.data[currentName];

  var _this = this;

  TweenLite.to({ factor: 1 }, 1, { factor: 0, ease: window.Elastic.easeOut,
      onUpdate: function () {

        for (var i = 0, j = _this.geometry.vertices.length; i < j; i++) {
          var vertex = _this.geometry.vertices[i];
          var offset = currentData[i] + ((previousData[i] - currentData[i]) * this.target.factor);
          vertex.z = offset;
        }

        _this.geometry.verticesNeedUpdate = true;

        if (_this.lines) {
          for (var k = 0, l = _this.lines.children.length; k < l; k++) {
            _this.lines.children[k].geometry.verticesNeedUpdate = true;
          }
        }

        _this.setColors();
      }
    });

  this.previous = this.current;
};

/**
 * Set lines/points/plane vertices colors
 *
 * @method setColors
 */
HeightMap.prototype.setColors = function () {
  // lines
  if (this.lines) {
    for (var i = 0, j = this.lines.children.length; i < j; i++) {
      var line = this.lines.children[i];

      for (var k = 0, l = line.geometry.vertices.length; k < l; k++) {
        var vertex = line.geometry.vertices[k];

        // (255 + 255 + 255) / 10 = 76.5, 76.5 / 20 = 3.8
        var percent = map(vertex.z, [0, 3.8], [0, 2]);
        percent = Math.round(percent * 10) / 10;

        if (!this.colorsCache[percent]) {
          this.colorsCache[percent] = this.fromColor.clone().lerp(this.toColor, percent);
        }

        line.geometry.colors[k] = this.colorsCache[percent];
      }

      line.geometry.colorsNeedUpdate = true;
    }
  }

  // planes/points
  if (this.plane || this.points) {
    for (var i = 0, j = this.geometry.faces.length; i < j; i++) {
      var face = this.geometry.faces[i];

      // Assumption : instanceof THREE.Face3
      for (var k = 0; k < 3; k++) {
        var vertexIndex = face[this.faceIndices[k]];
        var vertex = this.geometry.vertices[vertexIndex];

        // (255 + 255 + 255) / 10 = 76.5, 76.5 / 20 = 3.8
        var percent = map(vertex.z, [0, 3.8], [0, 2]);
        percent = Math.round(percent * 10) / 10;

        if (!this.colorsCache[percent]) {
          this.colorsCache[percent] = this.fromColor.clone().lerp(this.toColor, percent);
        }

        face.vertexColors[k] = this.colorsCache[percent];
      }
    }

    this.geometry.colorsNeedUpdate = true;
  }
};

/**
 * Listen to event bus
 *
 * @method on
 */
HeightMap.prototype.on = function () {
  this.events.on.apply(this.events, arguments);
};

/**
 * Trigger event on event bus
 *
 * @method trigger
 */
HeightMap.prototype.trigger = function () {
  this.events.trigger.apply(this.events, arguments);
};

module.exports = HeightMap;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../classes/EventsClass":2,"../utils/mapUtil":63,"../utils/randomUtil":65}],35:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var SPRITE3D = require('../libs/sprite3DLib');
var HASH = require('../modules/hashModule');

/**
 * Hello title
 *
 * @class Title
 * @constructor
 * @requires THREE, TweenLite, SPRITE3D, HASH
 */
function Title () {
  var path;

  var sprites = {
    akqa: './app/public/img/sprite-AKQA.png',
    hki: './app/public/img/sprite-HKI.png',
    grouek: './app/public/img/sprite-grouek.png',
    mediamonks: './app/public/img/sprite-mediamonks.png',
    none: './app/public/img/sprite-none.png',
    soleilnoir: './app/public/img/sprite-soleilnoir.png',
    thread: './app/public/img/sprite-thread.png',
    ultranoir: './app/public/img/sprite-ultranoir.png'
  };

  if (sprites[HASH.hash]) {
    path = sprites[HASH.hash];
  } else {
    path = sprites.none;
  }

  var texture = new THREE.ImageUtils.loadTexture(path);
  texture.flipY = true;

  var sprite = new SPRITE3D.Sprite(texture, {
    horizontal: 4,
    vertical: 10,
    total: 40,
    duration: 70,
    loop: true
  });

  var material = new THREE.MeshBasicMaterial({
    map: texture,
    depthWrite: false,
    depthTest: true,
    transparent: true
  });

  var geometry = new THREE.PlaneGeometry(30, 15);
  var plane = new THREE.Mesh(geometry, material);

  function update () {
    plane.position.y = cache.y;
    material.opacity = cache.opacity;
  }

  var cache = { y: 20, opacity: 0 };
  var inTween = TweenLite.to(cache, 1, { y: 0, opacity: 1, paused: true, onUpdate: update});

  this.el = plane;

  this.in = function () {
    inTween.play();
  };

  this.out = function () {
    inTween.reverse();
  };

  this.start = function () {
    sprite.start();
  };

  this.stop = function () {
    sprite.stop();
  };
}

module.exports = Title;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL0hlbGxvVGl0bGVPYmplY3QzRC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgVEhSRUUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVEhSRUUnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1RIUkVFJ10gOiBudWxsKTtcclxudmFyIFR3ZWVuTGl0ZSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydUd2VlbkxpdGUnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1R3ZWVuTGl0ZSddIDogbnVsbCk7XHJcblxyXG52YXIgU1BSSVRFM0QgPSByZXF1aXJlKCcuLi9saWJzL3Nwcml0ZTNETGliJyk7XHJcbnZhciBIQVNIID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9oYXNoTW9kdWxlJyk7XHJcblxyXG4vKipcclxuICogSGVsbG8gdGl0bGVcclxuICpcclxuICogQGNsYXNzIFRpdGxlXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcmVxdWlyZXMgVEhSRUUsIFR3ZWVuTGl0ZSwgU1BSSVRFM0QsIEhBU0hcclxuICovXHJcbmZ1bmN0aW9uIFRpdGxlICgpIHtcclxuICB2YXIgcGF0aDtcclxuXHJcbiAgdmFyIHNwcml0ZXMgPSB7XHJcbiAgICBha3FhOiAnLi9hcHAvcHVibGljL2ltZy9zcHJpdGUtQUtRQS5wbmcnLFxyXG4gICAgaGtpOiAnLi9hcHAvcHVibGljL2ltZy9zcHJpdGUtSEtJLnBuZycsXHJcbiAgICBncm91ZWs6ICcuL2FwcC9wdWJsaWMvaW1nL3Nwcml0ZS1ncm91ZWsucG5nJyxcclxuICAgIG1lZGlhbW9ua3M6ICcuL2FwcC9wdWJsaWMvaW1nL3Nwcml0ZS1tZWRpYW1vbmtzLnBuZycsXHJcbiAgICBub25lOiAnLi9hcHAvcHVibGljL2ltZy9zcHJpdGUtbm9uZS5wbmcnLFxyXG4gICAgc29sZWlsbm9pcjogJy4vYXBwL3B1YmxpYy9pbWcvc3ByaXRlLXNvbGVpbG5vaXIucG5nJyxcclxuICAgIHRocmVhZDogJy4vYXBwL3B1YmxpYy9pbWcvc3ByaXRlLXRocmVhZC5wbmcnLFxyXG4gICAgdWx0cmFub2lyOiAnLi9hcHAvcHVibGljL2ltZy9zcHJpdGUtdWx0cmFub2lyLnBuZydcclxuICB9O1xyXG5cclxuICBpZiAoc3ByaXRlc1tIQVNILmhhc2hdKSB7XHJcbiAgICBwYXRoID0gc3ByaXRlc1tIQVNILmhhc2hdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwYXRoID0gc3ByaXRlcy5ub25lO1xyXG4gIH1cclxuXHJcbiAgdmFyIHRleHR1cmUgPSBuZXcgVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZShwYXRoKTtcclxuICB0ZXh0dXJlLmZsaXBZID0gdHJ1ZTtcclxuXHJcbiAgdmFyIHNwcml0ZSA9IG5ldyBTUFJJVEUzRC5TcHJpdGUodGV4dHVyZSwge1xyXG4gICAgaG9yaXpvbnRhbDogNCxcclxuICAgIHZlcnRpY2FsOiAxMCxcclxuICAgIHRvdGFsOiA0MCxcclxuICAgIGR1cmF0aW9uOiA3MCxcclxuICAgIGxvb3A6IHRydWVcclxuICB9KTtcclxuXHJcbiAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcclxuICAgIG1hcDogdGV4dHVyZSxcclxuICAgIGRlcHRoV3JpdGU6IGZhbHNlLFxyXG4gICAgZGVwdGhUZXN0OiB0cnVlLFxyXG4gICAgdHJhbnNwYXJlbnQ6IHRydWVcclxuICB9KTtcclxuXHJcbiAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMzAsIDE1KTtcclxuICB2YXIgcGxhbmUgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cclxuICBmdW5jdGlvbiB1cGRhdGUgKCkge1xyXG4gICAgcGxhbmUucG9zaXRpb24ueSA9IGNhY2hlLnk7XHJcbiAgICBtYXRlcmlhbC5vcGFjaXR5ID0gY2FjaGUub3BhY2l0eTtcclxuICB9XHJcblxyXG4gIHZhciBjYWNoZSA9IHsgeTogMjAsIG9wYWNpdHk6IDAgfTtcclxuICB2YXIgaW5Ud2VlbiA9IFR3ZWVuTGl0ZS50byhjYWNoZSwgMSwgeyB5OiAwLCBvcGFjaXR5OiAxLCBwYXVzZWQ6IHRydWUsIG9uVXBkYXRlOiB1cGRhdGV9KTtcclxuXHJcbiAgdGhpcy5lbCA9IHBsYW5lO1xyXG5cclxuICB0aGlzLmluID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaW5Ud2Vlbi5wbGF5KCk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5vdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpblR3ZWVuLnJldmVyc2UoKTtcclxuICB9O1xyXG5cclxuICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc3ByaXRlLnN0YXJ0KCk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc3ByaXRlLnN0b3AoKTtcclxuICB9O1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFRpdGxlOyJdfQ==
},{"../libs/sprite3DLib":6,"../modules/hashModule":12}],36:[function(require,module,exports){
(function (global){
'use strict';
  
var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var random = require('../utils/randomUtil');

/**
 * Cloud of meshes looking at the same coordinates
 *
 * @class LookAtField
 * @constructor
 * @param {Object} [options]
 * @param {Number} [options.count=100] Meshes number
 * @requires jQuery, THREE, TweenLite, random
 */
function LookAtField (options) {
  var parameters = jQuery.extend({
    count: 100
  }, options);

  var center = new THREE.Vector3(0, 50, 0);

  var triangleGeometry = new THREE.TetrahedronGeometry(3);

  var triangleMaterial = new THREE.MeshLambertMaterial({ shading: THREE.FlatShading });
  var triangleMesh = new THREE.Mesh(triangleGeometry, triangleMaterial);

  var group = new THREE.Object3D();

  for (var i = 0; i < parameters.count; i++) {
    var triangleCopy = triangleMesh.clone();
    triangleCopy.position.x = random(-50, 50);
    triangleCopy.position.y = random(-50, 50);
    triangleCopy.position.z = random(-50, 30);

    triangleCopy.rotation.x = random(0, 2 * Math.PI);
    triangleCopy.rotation.y = random(0, 2 * Math.PI);
    triangleCopy.rotation.z = random(0, 2 * Math.PI);

    triangleCopy.scale.x = triangleCopy.scale.y = triangleCopy.scale.z = random(0.6, 1);

    triangleCopy.lookAt(center);

    group.add(triangleCopy);
  }

  group.position.y = -50;

  function update () {
    for (var i = 0; i < parameters.count; i++) {
      group.children[i].lookAt(center);
    }
  }

  this.el = group;

  this.in = function () {
    group.visible = true;
    TweenLite.to(center, 2, { y: 0, onUpdate: update });
    TweenLite.to(group.position, 1, { y: 0 });
  };

  this.out = function () {
    TweenLite.to(center, 1, { y: 50, onUpdate: update, onComplete: function () { group.visible = false; } });
    TweenLite.to(group.position, 1, { y: -50 });
  };
}

module.exports = LookAtField;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL0xvb2tBdEZpZWxkT2JqZWN0M0QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuICBcclxudmFyIGpRdWVyeSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydqUXVlcnknXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2pRdWVyeSddIDogbnVsbCk7XHJcbnZhciBUSFJFRSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydUSFJFRSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVEhSRUUnXSA6IG51bGwpO1xyXG52YXIgVHdlZW5MaXRlID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1R3ZWVuTGl0ZSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVHdlZW5MaXRlJ10gOiBudWxsKTtcclxuXHJcbnZhciByYW5kb20gPSByZXF1aXJlKCcuLi91dGlscy9yYW5kb21VdGlsJyk7XHJcblxyXG4vKipcclxuICogQ2xvdWQgb2YgbWVzaGVzIGxvb2tpbmcgYXQgdGhlIHNhbWUgY29vcmRpbmF0ZXNcclxuICpcclxuICogQGNsYXNzIExvb2tBdEZpZWxkXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5jb3VudD0xMDBdIE1lc2hlcyBudW1iZXJcclxuICogQHJlcXVpcmVzIGpRdWVyeSwgVEhSRUUsIFR3ZWVuTGl0ZSwgcmFuZG9tXHJcbiAqL1xyXG5mdW5jdGlvbiBMb29rQXRGaWVsZCAob3B0aW9ucykge1xyXG4gIHZhciBwYXJhbWV0ZXJzID0galF1ZXJ5LmV4dGVuZCh7XHJcbiAgICBjb3VudDogMTAwXHJcbiAgfSwgb3B0aW9ucyk7XHJcblxyXG4gIHZhciBjZW50ZXIgPSBuZXcgVEhSRUUuVmVjdG9yMygwLCA1MCwgMCk7XHJcblxyXG4gIHZhciB0cmlhbmdsZUdlb21ldHJ5ID0gbmV3IFRIUkVFLlRldHJhaGVkcm9uR2VvbWV0cnkoMyk7XHJcblxyXG4gIHZhciB0cmlhbmdsZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBzaGFkaW5nOiBUSFJFRS5GbGF0U2hhZGluZyB9KTtcclxuICB2YXIgdHJpYW5nbGVNZXNoID0gbmV3IFRIUkVFLk1lc2godHJpYW5nbGVHZW9tZXRyeSwgdHJpYW5nbGVNYXRlcmlhbCk7XHJcblxyXG4gIHZhciBncm91cCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtZXRlcnMuY291bnQ7IGkrKykge1xyXG4gICAgdmFyIHRyaWFuZ2xlQ29weSA9IHRyaWFuZ2xlTWVzaC5jbG9uZSgpO1xyXG4gICAgdHJpYW5nbGVDb3B5LnBvc2l0aW9uLnggPSByYW5kb20oLTUwLCA1MCk7XHJcbiAgICB0cmlhbmdsZUNvcHkucG9zaXRpb24ueSA9IHJhbmRvbSgtNTAsIDUwKTtcclxuICAgIHRyaWFuZ2xlQ29weS5wb3NpdGlvbi56ID0gcmFuZG9tKC01MCwgMzApO1xyXG5cclxuICAgIHRyaWFuZ2xlQ29weS5yb3RhdGlvbi54ID0gcmFuZG9tKDAsIDIgKiBNYXRoLlBJKTtcclxuICAgIHRyaWFuZ2xlQ29weS5yb3RhdGlvbi55ID0gcmFuZG9tKDAsIDIgKiBNYXRoLlBJKTtcclxuICAgIHRyaWFuZ2xlQ29weS5yb3RhdGlvbi56ID0gcmFuZG9tKDAsIDIgKiBNYXRoLlBJKTtcclxuXHJcbiAgICB0cmlhbmdsZUNvcHkuc2NhbGUueCA9IHRyaWFuZ2xlQ29weS5zY2FsZS55ID0gdHJpYW5nbGVDb3B5LnNjYWxlLnogPSByYW5kb20oMC42LCAxKTtcclxuXHJcbiAgICB0cmlhbmdsZUNvcHkubG9va0F0KGNlbnRlcik7XHJcblxyXG4gICAgZ3JvdXAuYWRkKHRyaWFuZ2xlQ29weSk7XHJcbiAgfVxyXG5cclxuICBncm91cC5wb3NpdGlvbi55ID0gLTUwO1xyXG5cclxuICBmdW5jdGlvbiB1cGRhdGUgKCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzLmNvdW50OyBpKyspIHtcclxuICAgICAgZ3JvdXAuY2hpbGRyZW5baV0ubG9va0F0KGNlbnRlcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0aGlzLmVsID0gZ3JvdXA7XHJcblxyXG4gIHRoaXMuaW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBncm91cC52aXNpYmxlID0gdHJ1ZTtcclxuICAgIFR3ZWVuTGl0ZS50byhjZW50ZXIsIDIsIHsgeTogMCwgb25VcGRhdGU6IHVwZGF0ZSB9KTtcclxuICAgIFR3ZWVuTGl0ZS50byhncm91cC5wb3NpdGlvbiwgMSwgeyB5OiAwIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMub3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgVHdlZW5MaXRlLnRvKGNlbnRlciwgMSwgeyB5OiA1MCwgb25VcGRhdGU6IHVwZGF0ZSwgb25Db21wbGV0ZTogZnVuY3Rpb24gKCkgeyBncm91cC52aXNpYmxlID0gZmFsc2U7IH0gfSk7XHJcbiAgICBUd2VlbkxpdGUudG8oZ3JvdXAucG9zaXRpb24sIDEsIHsgeTogLTUwIH0pO1xyXG4gIH07XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTG9va0F0RmllbGQ7Il19
},{"../utils/randomUtil":65}],37:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var SOUNDS = require('../modules/soundsModule');
var random = require('../utils/randomUtil');
var yoyo = require('../utils/yoyoUtil');

/**
 * Animated Neon
 *
 * @class Neon
 * @constructor
 * @params {Object} [options]
 * @params {String} [options.color='#ffffff'] Neon color
 * @params {Number} [options.width=20] Neon width
 * @params {Boolean} [options.projection=true] Projection halo?
 * @params {Boolean} [options.planes=3] Glow planes
 * @requires jQuery, THREE, TweenLite, SOUNDS, random, yoyo
 */
function Neon (options) {
  this.parameters = jQuery.extend(Neon.defaultOptions, options);

  this.el = new THREE.Object3D();

  // setup 3d els
  this.tube = this.getTube();
  this.glow = this.getGlow();

  var glows = this.getGlows(this.glow);

  this.el.add(this.tube);
  this.el.add(glows);

  if (this.parameters.projection) {
    this.projection = this.getProjection();
    this.el.add(this.projection);
  }

  // flicker
  this.currentFlicker = 0;
  this.totalFlicker = random(3, 6, true);
  this.flickering = false;

  // animations
  var _this = this;

  this.idleIntensityTween = TweenLite.to({ projection: 0.08, glow: 0.4 }, random(0.8, 5), {
    projection: 0.15, glow: 0.7, paused: true,
    onStart: function () {
      _this.tube.material.emissive.set(_this.parameters.color);
    },
    onUpdate: function () {
      if (_this.flickering) {
        return false;
      }

      _this.glow.material.opacity = this.target.glow;
      if (_this.parameters.projection) {
        _this.projection.opacity = this.target.opacity;
      }
    },
    onComplete: yoyo,
    onReverseComplete: yoyo
  });

  this.idleFlickTween = TweenLite.to({}, random(0.1, 10), { paused: true,
    onComplete: function () {
      _this.flickOff();
      this.duration(random(0.1, 10));
      this.restart();
    }
  });

  this.inTween = TweenLite.to({}, random(0.2, 2), { paused: true,
    onComplete: function () {
      if (_this.currentFlicker++ < _this.totalFlicker) {
        _this.flickOn();
        this.duration(random(0.1, 0.5));
        this.restart();
      }
      else {
        _this.animations = [_this.idleIntensityTween, _this.idleFlickTween];
        _this.start();
      }
    }
  });

  this.animations = [this.inTween];
};

Neon.defaultOptions = {
  color: '#ffffff',
  width: 20,
  projection: true,
  planes: 3
};

/**
 * Start animations sequence
 */
Neon.prototype.start = function () {
  for (var i = 0, j = this.animations.length; i < j; i++) {
    this.animations[i].resume();
  }
};

/**
 * Stop animations sequence
 */
Neon.prototype.stop = function () {
  for (var i = 0, j = this.animations.length; i < j; i++) {
    this.animations[i].pause();
  }
};

/**
 * Flick on once
 * from off to on
 */
Neon.prototype.flickOn = function () {
  this.tube.material.emissive.set(this.parameters.color);
  this.tube.material.needsUpdate = true;

  this.glow.material.opacity = 0.3;

  if (this.parameters.projection) {
    this.projection.material.opacity = 0.05;
  }

  SOUNDS.neon.play();

  var _this = this;

  TweenLite.delayedCall(random(0.05, 0.07), function () {
    _this.tube.material.emissive.set('#000000');
    _this.tube.material.needsUpdate = true;

    _this.glow.material.opacity = 0;

    if (_this.parameters.projection) {
      _this.projection.material.opacity = 0;
    }
  });
};

/**
 * Flick off once
 * from on to off
 */
Neon.prototype.flickOff = function () {
  this.flickering = !this.flickering;
  
  this.glow.material.opacity = 0;

  if (this.parameters.projection) {
    this.projection.material.opacity = 0.05;
  }

  var _this = this;

  TweenLite.delayedCall(random(0.05, 0.1), function () {
    _this.flickering = !_this.flickering;

    SOUNDS.neon.play();
  });
};

/**
 * Get neon tube
 *
 * @method getTube
 * @return {THREE.Mesh}
 */
Neon.prototype.getTube = function () {
  var geometry = new THREE.CylinderGeometry(0.2, 0.2, this.parameters.width, 6);
  var material = new THREE.MeshLambertMaterial({
    color: '#808080',
    emissive: '#000000'
  });
  var mesh = new THREE.Mesh(geometry, material);

  return mesh;
};

/**
 * Get neon single glow
 *
 * @method getGlow
 * @return {THREE.Mesh}
 */
Neon.prototype.getGlow = function () {
  var texture = new THREE.ImageUtils.loadTexture('./app/public/img/texture-neonGlow.png');
  var material = new THREE.MeshBasicMaterial({
    side: THREE.DoubleSide,
    map: texture,
    depthWrite: false,
    depthTest: true,
    transparent: true,
    color: this.parameters.color,
    opacity: 0,
    blending: THREE.AdditiveBlending
  });

  var geometry = new THREE.PlaneGeometry(5, this.parameters.width + 3);
  var mesh = new THREE.Mesh(geometry, material);

  return mesh;
};

/**
 * Get neon glows
 *
 * @method getGlows
 * @param {THREE.Mesh} [glow]
 * @return {THREE.Object3D}
 */
Neon.prototype.getGlows = function (glow) {
  var glows = new THREE.Object3D();

  for (var i = 0; i < this.parameters.planes; i++) {
    var copy = glow.clone();
    copy.rotation.y = i * (0.7 * Math.PI);
    glows.add(copy);
  }

  return glows;
};

/**
 * Get neon projection
 *
 * @method getProjection
 * @return {THREE.Mesh}
 */
Neon.prototype.getProjection = function () {
  var texture = THREE.ImageUtils.loadTexture('./app/public/img/texture-neonProjection.png');
  var material = new THREE.MeshBasicMaterial({
    side: THREE.DoubleSide,
    map: texture,
    depthWrite: false,
    depthTest: true,
    transparent: true,
    color: this.parameters.color,
    opacity: 0,
    blending: THREE.AdditiveBlending
  });

  var geometry = new THREE.PlaneGeometry(this.parameters.width * 2, 50);
  var mesh = new THREE.Mesh(geometry, material);
  mesh.position.z = -1;

  return mesh;
};

module.exports = Neon;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../modules/soundsModule":14,"../utils/randomUtil":65,"../utils/yoyoUtil":66}],38:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var yoyo = require('../utils/yoyoUtil');

/**
 * 3D Rocks
 *
 * @class Rocks
 * @constructor
 * @requires THREE, TweenLite, yoyo
 */
function Rocks () {
  var group = new THREE.Object3D();

  var sphere = this.getSphere(); 
  group.add(sphere);

  var light = this.getLight();
  group.add(light);

  // rocks
  var rocksMaterial = new THREE.MeshLambertMaterial({
    color: '#0a0a0a',
    side: THREE.DoubleSide,
    shading: THREE.FlatShading
  });

  var fromColor = new THREE.Color('#0a0a0a');
  var toColor = new THREE.Color('#ffffff');

  var loader = new THREE.JSONLoader();
  loader.load('./app/public/3D/rocks.js', function (geometry) {
    var rocks = new THREE.Mesh(geometry, rocksMaterial);
    rocks.position.set(-70, 0, -30);
    group.add(rocks);

    var cache = { angle: 0, y: 11, intensity: 0, color: 0 };
    function update () {
      rocks.rotation.x = cache.angle;

      light.intensity = cache.intensity;
      
      light.position.y = cache.y;
      sphere.position.y = cache.y;

      sphere.material.color = fromColor.clone().lerp(toColor, cache.color);
    }

    this.in = function () {
      TweenLite.to(cache, 1, { angle: 0.3, y: 20, intensity: 15, color: 1, onUpdate: update });
    };

    this.out = function (way) {
      var y = way === 'up' ? 11 : 20;
      TweenLite.to(cache, 1, { angle: 0, y: y, intensity: 0, color: 0, onUpdate: update });
    };

    var idleTween = TweenLite.to({ x: -2, z: -45 }, 2, { x: 2, z: -35, paused: true,
      onUpdate: function () {
        light.position.z = this.target.z;
        sphere.position.z = this.target.z;
      },
      onComplete: yoyo,
      onReverseComplete: yoyo
    });

    this.start = function () {
      idleTween.resume();
    };

    this.stop = function () {
      idleTween.pause();
    };

  }.bind(this));

  this.el = group;

  this.in = function () {};

  this.out = this.in;

  this.start = this.in;

  this.stop = this.in;
}

/**
 * Get white sphere
 *
 * @method getSphere
 * @return {THREE.Mesh}
 */
Rocks.prototype.getSphere = function () {
  var material = new THREE.MeshBasicMaterial({ color: '#0a0a0a', fog: false });
  var geometry = new THREE.SphereGeometry(5, 20, 20);
  var mesh = new THREE.Mesh(geometry, material);

  mesh.position.set(0, 11, -40);

  return mesh;
};

/**
 * Get light
 *
 * @method getLight
 * @return {THREE.Light}
 */
Rocks.prototype.getLight = function () {
  var light = new THREE.PointLight('#ffffff', 0, 50);
  light.position.set(0, 11, -40);

  return light;
};

module.exports = Rocks;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL1JvY2tzT2JqZWN0M0QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIFRIUkVFID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1RIUkVFJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUSFJFRSddIDogbnVsbCk7XHJcbnZhciBUd2VlbkxpdGUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVHdlZW5MaXRlJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUd2VlbkxpdGUnXSA6IG51bGwpO1xyXG5cclxudmFyIHlveW8gPSByZXF1aXJlKCcuLi91dGlscy95b3lvVXRpbCcpO1xyXG5cclxuLyoqXHJcbiAqIDNEIFJvY2tzXHJcbiAqXHJcbiAqIEBjbGFzcyBSb2Nrc1xyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHJlcXVpcmVzIFRIUkVFLCBUd2VlbkxpdGUsIHlveW9cclxuICovXHJcbmZ1bmN0aW9uIFJvY2tzICgpIHtcclxuICB2YXIgZ3JvdXAgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgdmFyIHNwaGVyZSA9IHRoaXMuZ2V0U3BoZXJlKCk7IFxyXG4gIGdyb3VwLmFkZChzcGhlcmUpO1xyXG5cclxuICB2YXIgbGlnaHQgPSB0aGlzLmdldExpZ2h0KCk7XHJcbiAgZ3JvdXAuYWRkKGxpZ2h0KTtcclxuXHJcbiAgLy8gcm9ja3NcclxuICB2YXIgcm9ja3NNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtcclxuICAgIGNvbG9yOiAnIzBhMGEwYScsXHJcbiAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLFxyXG4gICAgc2hhZGluZzogVEhSRUUuRmxhdFNoYWRpbmdcclxuICB9KTtcclxuXHJcbiAgdmFyIGZyb21Db2xvciA9IG5ldyBUSFJFRS5Db2xvcignIzBhMGEwYScpO1xyXG4gIHZhciB0b0NvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCcjZmZmZmZmJyk7XHJcblxyXG4gIHZhciBsb2FkZXIgPSBuZXcgVEhSRUUuSlNPTkxvYWRlcigpO1xyXG4gIGxvYWRlci5sb2FkKCcuL2FwcC9wdWJsaWMvM0Qvcm9ja3MuanMnLCBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcclxuICAgIHZhciByb2NrcyA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCByb2Nrc01hdGVyaWFsKTtcclxuICAgIHJvY2tzLnBvc2l0aW9uLnNldCgtNzAsIDAsIC0zMCk7XHJcbiAgICBncm91cC5hZGQocm9ja3MpO1xyXG5cclxuICAgIHZhciBjYWNoZSA9IHsgYW5nbGU6IDAsIHk6IDExLCBpbnRlbnNpdHk6IDAsIGNvbG9yOiAwIH07XHJcbiAgICBmdW5jdGlvbiB1cGRhdGUgKCkge1xyXG4gICAgICByb2Nrcy5yb3RhdGlvbi54ID0gY2FjaGUuYW5nbGU7XHJcblxyXG4gICAgICBsaWdodC5pbnRlbnNpdHkgPSBjYWNoZS5pbnRlbnNpdHk7XHJcbiAgICAgIFxyXG4gICAgICBsaWdodC5wb3NpdGlvbi55ID0gY2FjaGUueTtcclxuICAgICAgc3BoZXJlLnBvc2l0aW9uLnkgPSBjYWNoZS55O1xyXG5cclxuICAgICAgc3BoZXJlLm1hdGVyaWFsLmNvbG9yID0gZnJvbUNvbG9yLmNsb25lKCkubGVycCh0b0NvbG9yLCBjYWNoZS5jb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgVHdlZW5MaXRlLnRvKGNhY2hlLCAxLCB7IGFuZ2xlOiAwLjMsIHk6IDIwLCBpbnRlbnNpdHk6IDE1LCBjb2xvcjogMSwgb25VcGRhdGU6IHVwZGF0ZSB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5vdXQgPSBmdW5jdGlvbiAod2F5KSB7XHJcbiAgICAgIHZhciB5ID0gd2F5ID09PSAndXAnID8gMTEgOiAyMDtcclxuICAgICAgVHdlZW5MaXRlLnRvKGNhY2hlLCAxLCB7IGFuZ2xlOiAwLCB5OiB5LCBpbnRlbnNpdHk6IDAsIGNvbG9yOiAwLCBvblVwZGF0ZTogdXBkYXRlIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgaWRsZVR3ZWVuID0gVHdlZW5MaXRlLnRvKHsgeDogLTIsIHo6IC00NSB9LCAyLCB7IHg6IDIsIHo6IC0zNSwgcGF1c2VkOiB0cnVlLFxyXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxpZ2h0LnBvc2l0aW9uLnogPSB0aGlzLnRhcmdldC56O1xyXG4gICAgICAgIHNwaGVyZS5wb3NpdGlvbi56ID0gdGhpcy50YXJnZXQuejtcclxuICAgICAgfSxcclxuICAgICAgb25Db21wbGV0ZTogeW95byxcclxuICAgICAgb25SZXZlcnNlQ29tcGxldGU6IHlveW9cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlkbGVUd2Vlbi5yZXN1bWUoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZGxlVHdlZW4ucGF1c2UoKTtcclxuICAgIH07XHJcblxyXG4gIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gIHRoaXMuZWwgPSBncm91cDtcclxuXHJcbiAgdGhpcy5pbiA9IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxuICB0aGlzLm91dCA9IHRoaXMuaW47XHJcblxyXG4gIHRoaXMuc3RhcnQgPSB0aGlzLmluO1xyXG5cclxuICB0aGlzLnN0b3AgPSB0aGlzLmluO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHdoaXRlIHNwaGVyZVxyXG4gKlxyXG4gKiBAbWV0aG9kIGdldFNwaGVyZVxyXG4gKiBAcmV0dXJuIHtUSFJFRS5NZXNofVxyXG4gKi9cclxuUm9ja3MucHJvdG90eXBlLmdldFNwaGVyZSA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogJyMwYTBhMGEnLCBmb2c6IGZhbHNlIH0pO1xyXG4gIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSg1LCAyMCwgMjApO1xyXG4gIHZhciBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuXHJcbiAgbWVzaC5wb3NpdGlvbi5zZXQoMCwgMTEsIC00MCk7XHJcblxyXG4gIHJldHVybiBtZXNoO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBsaWdodFxyXG4gKlxyXG4gKiBAbWV0aG9kIGdldExpZ2h0XHJcbiAqIEByZXR1cm4ge1RIUkVFLkxpZ2h0fVxyXG4gKi9cclxuUm9ja3MucHJvdG90eXBlLmdldExpZ2h0ID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBsaWdodCA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KCcjZmZmZmZmJywgMCwgNTApO1xyXG4gIGxpZ2h0LnBvc2l0aW9uLnNldCgwLCAxMSwgLTQwKTtcclxuXHJcbiAgcmV0dXJuIGxpZ2h0O1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBSb2NrczsiXX0=
},{"../utils/yoyoUtil":66}],39:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

var SPRITE3D = require('../libs/sprite3DLib');
var random = require('../utils/randomUtil');

/**
 * Animated smoke
 *
 * @class Smoke
 * @constructor
 * @param {Object} [options]
 * @param {String} [options.frontColor='#9b69b2'] Front layers color
 * @param {String} [options.backColor='#e1455f'] Back layers color
 * @param {Number} [options.layers=5] Planes number
 * @param {Array} [options.data=[]] Non random values
 * @requires jQuery, THREE, SPRITE3D, random
 */
function Smoke (options) {
  var parameters = jQuery.extend(Smoke.defaultOptions, options);

  var texture = new THREE.ImageUtils.loadTexture('./app/public/img/sprite-smoke.png');
  texture.flipY = false;

  this.sprite = new SPRITE3D.Sprite(texture, {
    horizontal: 8,
    vertical: 8,
    total: 64,
    duration: 50
  });

  var baseMaterial = new THREE.MeshBasicMaterial({
    map: texture,
    depthWrite: false,
    depthTest: true,
    transparent: true,
    opacity: 0.2
  });

  var backMaterial = baseMaterial.clone();
  backMaterial.color = new THREE.Color(parameters.backColor);

  var frontMaterial = baseMaterial.clone();
  frontMaterial.color = new THREE.Color(parameters.frontColor);

  var geometry = new THREE.PlaneGeometry(10, 10);

  this.el = new THREE.Object3D();

  for (var i = 0; i < parameters.layers; i++) {
    var positionX;
    var positionY;
    var positionZ;
    var rotationZ;
    var scale;

    if (parameters.data[i]) {
      positionX = parameters.data[i].positionX || random(-20, 20);
      positionY = parameters.data[i].positionY || random(-20, 20);
      positionZ = parameters.data[i].positionZ || random(-20, 20);
      rotationZ = parameters.data[i].rotationZ || random(0, Math.PI);
      scale = parameters.data[i].scale || random(1, 10);
    } else {
      positionX = random(-20, 20);
      positionY = random(-20, 20);
      positionZ = random(-20, 20);
      rotationZ = random(0, Math.PI);
      scale = random(1, 10);
    }

    var material = positionZ < 0 ? backMaterial : frontMaterial;

    var plane = new THREE.Mesh(geometry, material);
    plane.position.set(positionX, positionY, positionZ);
    plane.rotation.z = rotationZ;
    plane.scale.set(scale, scale, 1);

    this.el.add(plane);
  }
}

Smoke.prototype.start = function () {
  this.sprite.start();
};

Smoke.prototype.stop = function () {
  this.sprite.stop();
};

Smoke.defaultOptions = {
  frontColor: '#9b69b2',
  backColor: '#e1455f',
  layers: 5,
  data: []
};

module.exports = Smoke;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL1Ntb2tlT2JqZWN0M0QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGpRdWVyeSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydqUXVlcnknXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2pRdWVyeSddIDogbnVsbCk7XHJcbnZhciBUSFJFRSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydUSFJFRSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVEhSRUUnXSA6IG51bGwpO1xyXG5cclxudmFyIFNQUklURTNEID0gcmVxdWlyZSgnLi4vbGlicy9zcHJpdGUzRExpYicpO1xyXG52YXIgcmFuZG9tID0gcmVxdWlyZSgnLi4vdXRpbHMvcmFuZG9tVXRpbCcpO1xyXG5cclxuLyoqXHJcbiAqIEFuaW1hdGVkIHNtb2tlXHJcbiAqXHJcbiAqIEBjbGFzcyBTbW9rZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuZnJvbnRDb2xvcj0nIzliNjliMiddIEZyb250IGxheWVycyBjb2xvclxyXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuYmFja0NvbG9yPScjZTE0NTVmJ10gQmFjayBsYXllcnMgY29sb3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmxheWVycz01XSBQbGFuZXMgbnVtYmVyXHJcbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLmRhdGE9W11dIE5vbiByYW5kb20gdmFsdWVzXHJcbiAqIEByZXF1aXJlcyBqUXVlcnksIFRIUkVFLCBTUFJJVEUzRCwgcmFuZG9tXHJcbiAqL1xyXG5mdW5jdGlvbiBTbW9rZSAob3B0aW9ucykge1xyXG4gIHZhciBwYXJhbWV0ZXJzID0galF1ZXJ5LmV4dGVuZChTbW9rZS5kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gIHZhciB0ZXh0dXJlID0gbmV3IFRIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUoJy4vYXBwL3B1YmxpYy9pbWcvc3ByaXRlLXNtb2tlLnBuZycpO1xyXG4gIHRleHR1cmUuZmxpcFkgPSBmYWxzZTtcclxuXHJcbiAgdGhpcy5zcHJpdGUgPSBuZXcgU1BSSVRFM0QuU3ByaXRlKHRleHR1cmUsIHtcclxuICAgIGhvcml6b250YWw6IDgsXHJcbiAgICB2ZXJ0aWNhbDogOCxcclxuICAgIHRvdGFsOiA2NCxcclxuICAgIGR1cmF0aW9uOiA1MFxyXG4gIH0pO1xyXG5cclxuICB2YXIgYmFzZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcclxuICAgIG1hcDogdGV4dHVyZSxcclxuICAgIGRlcHRoV3JpdGU6IGZhbHNlLFxyXG4gICAgZGVwdGhUZXN0OiB0cnVlLFxyXG4gICAgdHJhbnNwYXJlbnQ6IHRydWUsXHJcbiAgICBvcGFjaXR5OiAwLjJcclxuICB9KTtcclxuXHJcbiAgdmFyIGJhY2tNYXRlcmlhbCA9IGJhc2VNYXRlcmlhbC5jbG9uZSgpO1xyXG4gIGJhY2tNYXRlcmlhbC5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcihwYXJhbWV0ZXJzLmJhY2tDb2xvcik7XHJcblxyXG4gIHZhciBmcm9udE1hdGVyaWFsID0gYmFzZU1hdGVyaWFsLmNsb25lKCk7XHJcbiAgZnJvbnRNYXRlcmlhbC5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcihwYXJhbWV0ZXJzLmZyb250Q29sb3IpO1xyXG5cclxuICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxMCwgMTApO1xyXG5cclxuICB0aGlzLmVsID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sYXllcnM7IGkrKykge1xyXG4gICAgdmFyIHBvc2l0aW9uWDtcclxuICAgIHZhciBwb3NpdGlvblk7XHJcbiAgICB2YXIgcG9zaXRpb25aO1xyXG4gICAgdmFyIHJvdGF0aW9uWjtcclxuICAgIHZhciBzY2FsZTtcclxuXHJcbiAgICBpZiAocGFyYW1ldGVycy5kYXRhW2ldKSB7XHJcbiAgICAgIHBvc2l0aW9uWCA9IHBhcmFtZXRlcnMuZGF0YVtpXS5wb3NpdGlvblggfHwgcmFuZG9tKC0yMCwgMjApO1xyXG4gICAgICBwb3NpdGlvblkgPSBwYXJhbWV0ZXJzLmRhdGFbaV0ucG9zaXRpb25ZIHx8IHJhbmRvbSgtMjAsIDIwKTtcclxuICAgICAgcG9zaXRpb25aID0gcGFyYW1ldGVycy5kYXRhW2ldLnBvc2l0aW9uWiB8fCByYW5kb20oLTIwLCAyMCk7XHJcbiAgICAgIHJvdGF0aW9uWiA9IHBhcmFtZXRlcnMuZGF0YVtpXS5yb3RhdGlvblogfHwgcmFuZG9tKDAsIE1hdGguUEkpO1xyXG4gICAgICBzY2FsZSA9IHBhcmFtZXRlcnMuZGF0YVtpXS5zY2FsZSB8fCByYW5kb20oMSwgMTApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcG9zaXRpb25YID0gcmFuZG9tKC0yMCwgMjApO1xyXG4gICAgICBwb3NpdGlvblkgPSByYW5kb20oLTIwLCAyMCk7XHJcbiAgICAgIHBvc2l0aW9uWiA9IHJhbmRvbSgtMjAsIDIwKTtcclxuICAgICAgcm90YXRpb25aID0gcmFuZG9tKDAsIE1hdGguUEkpO1xyXG4gICAgICBzY2FsZSA9IHJhbmRvbSgxLCAxMCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG1hdGVyaWFsID0gcG9zaXRpb25aIDwgMCA/IGJhY2tNYXRlcmlhbCA6IGZyb250TWF0ZXJpYWw7XHJcblxyXG4gICAgdmFyIHBsYW5lID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgIHBsYW5lLnBvc2l0aW9uLnNldChwb3NpdGlvblgsIHBvc2l0aW9uWSwgcG9zaXRpb25aKTtcclxuICAgIHBsYW5lLnJvdGF0aW9uLnogPSByb3RhdGlvblo7XHJcbiAgICBwbGFuZS5zY2FsZS5zZXQoc2NhbGUsIHNjYWxlLCAxKTtcclxuXHJcbiAgICB0aGlzLmVsLmFkZChwbGFuZSk7XHJcbiAgfVxyXG59XHJcblxyXG5TbW9rZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy5zcHJpdGUuc3RhcnQoKTtcclxufTtcclxuXHJcblNtb2tlLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMuc3ByaXRlLnN0b3AoKTtcclxufTtcclxuXHJcblNtb2tlLmRlZmF1bHRPcHRpb25zID0ge1xyXG4gIGZyb250Q29sb3I6ICcjOWI2OWIyJyxcclxuICBiYWNrQ29sb3I6ICcjZTE0NTVmJyxcclxuICBsYXllcnM6IDUsXHJcbiAgZGF0YTogW11cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU21va2U7Il19
},{"../libs/sprite3DLib":6,"../utils/randomUtil":65}],40:[function(require,module,exports){
(function (global){
'use strict';
  
var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var random = require('../utils/randomUtil');

/**
 * Animated strip
 *
 * @class Strip
 * @constructor
 * @param {Object} [options]
 * @pram {Number} [options.count=10] Strips count
 * @pram {Array} [options.colors=['#ffffff']] Strips colors
 * @pram {Number} [options.width=10] Strip width
 * @pram {Number} [options.height=3] Strip height
 * @pram {Number} [options.speed=1] Animations speed
 * @pram {Array} [options.rangeX=[-50, 50]] X position range
 * @pram {Array} [options.rangeY=[-50, 50]] Y position range
 * @pram {Array} [options.rangeZ=[-50, 50]] Z position range
 * @requires jQuery, THREE, TweenLite, random
 */
function Strip (options) {
  this.parameters = jQuery.extend(Strip.defaultOptions, options);

  this.geometry = new THREE.PlaneGeometry(this.parameters.width, this.parameters.height);

  this.el = new THREE.Object3D();

  var materials = {};

  for (var i = 0; i < this.parameters.count; i++) {
    var x = random(this.parameters.rangeX[0], this.parameters.rangeX[1]);
    var y = random(this.parameters.rangeY[0], this.parameters.rangeY[1]);
    var z = random(this.parameters.rangeZ[0], this.parameters.rangeZ[1]);

    var color = this.parameters.colors[random(0, this.parameters.colors.length, true)];

    if (!materials[color]) {
      var material = new THREE.MeshBasicMaterial({
        color: color,
        side: THREE.DoubleSide
      });

      materials[color] = material;
    }

    var mesh = new THREE.Mesh(this.geometry, materials[color]);
    mesh.position.set(x, y, z);
    this.el.add(mesh);
  }

  this.from = this.geometry.vertices[0].x;
  this.to = this.geometry.vertices[1].x;
  this.cache =  { x: this.from };

  this.geometry.vertices[1].x = this.geometry.vertices[3].x = this.geometry.vertices[0].x;
};

Strip.prototype.update = function () {
  this.geometry.vertices[1].x = this.geometry.vertices[3].x = this.cache.x;
  this.geometry.verticesNeedUpdate = true;
  this.geometry.computeBoundingSphere();
};

Strip.prototype.in = function () {
  TweenLite.to(this.cache, this.parameters.speed, { x: this.to,
    onUpdate: this.update.bind(this)
  });
};

Strip.prototype.out = function () {
  TweenLite.to(this.cache, this.parameters.speed, { x: this.from,
    onUpdate: this.update.bind(this)
  });
};

Strip.defaultOptions = {
  count: 10,
  colors: ['#ffffff'],
  width: 10,
  height: 3,
  speed: 1,
  rangeX: [-50, 50],
  rangeY: [-50, 50],
  rangeZ: [-50, 50]
};

module.exports = Strip;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL1N0cmlwc09iamVjdDNELmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG52YXIgalF1ZXJ5ID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ2pRdWVyeSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnalF1ZXJ5J10gOiBudWxsKTtcclxudmFyIFRIUkVFID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1RIUkVFJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUSFJFRSddIDogbnVsbCk7XHJcbnZhciBUd2VlbkxpdGUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVHdlZW5MaXRlJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUd2VlbkxpdGUnXSA6IG51bGwpO1xyXG5cclxudmFyIHJhbmRvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL3JhbmRvbVV0aWwnKTtcclxuXHJcbi8qKlxyXG4gKiBBbmltYXRlZCBzdHJpcFxyXG4gKlxyXG4gKiBAY2xhc3MgU3RyaXBcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICogQHByYW0ge051bWJlcn0gW29wdGlvbnMuY291bnQ9MTBdIFN0cmlwcyBjb3VudFxyXG4gKiBAcHJhbSB7QXJyYXl9IFtvcHRpb25zLmNvbG9ycz1bJyNmZmZmZmYnXV0gU3RyaXBzIGNvbG9yc1xyXG4gKiBAcHJhbSB7TnVtYmVyfSBbb3B0aW9ucy53aWR0aD0xMF0gU3RyaXAgd2lkdGhcclxuICogQHByYW0ge051bWJlcn0gW29wdGlvbnMuaGVpZ2h0PTNdIFN0cmlwIGhlaWdodFxyXG4gKiBAcHJhbSB7TnVtYmVyfSBbb3B0aW9ucy5zcGVlZD0xXSBBbmltYXRpb25zIHNwZWVkXHJcbiAqIEBwcmFtIHtBcnJheX0gW29wdGlvbnMucmFuZ2VYPVstNTAsIDUwXV0gWCBwb3NpdGlvbiByYW5nZVxyXG4gKiBAcHJhbSB7QXJyYXl9IFtvcHRpb25zLnJhbmdlWT1bLTUwLCA1MF1dIFkgcG9zaXRpb24gcmFuZ2VcclxuICogQHByYW0ge0FycmF5fSBbb3B0aW9ucy5yYW5nZVo9Wy01MCwgNTBdXSBaIHBvc2l0aW9uIHJhbmdlXHJcbiAqIEByZXF1aXJlcyBqUXVlcnksIFRIUkVFLCBUd2VlbkxpdGUsIHJhbmRvbVxyXG4gKi9cclxuZnVuY3Rpb24gU3RyaXAgKG9wdGlvbnMpIHtcclxuICB0aGlzLnBhcmFtZXRlcnMgPSBqUXVlcnkuZXh0ZW5kKFN0cmlwLmRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHRoaXMucGFyYW1ldGVycy53aWR0aCwgdGhpcy5wYXJhbWV0ZXJzLmhlaWdodCk7XHJcblxyXG4gIHRoaXMuZWwgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgdmFyIG1hdGVyaWFscyA9IHt9O1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGFyYW1ldGVycy5jb3VudDsgaSsrKSB7XHJcbiAgICB2YXIgeCA9IHJhbmRvbSh0aGlzLnBhcmFtZXRlcnMucmFuZ2VYWzBdLCB0aGlzLnBhcmFtZXRlcnMucmFuZ2VYWzFdKTtcclxuICAgIHZhciB5ID0gcmFuZG9tKHRoaXMucGFyYW1ldGVycy5yYW5nZVlbMF0sIHRoaXMucGFyYW1ldGVycy5yYW5nZVlbMV0pO1xyXG4gICAgdmFyIHogPSByYW5kb20odGhpcy5wYXJhbWV0ZXJzLnJhbmdlWlswXSwgdGhpcy5wYXJhbWV0ZXJzLnJhbmdlWlsxXSk7XHJcblxyXG4gICAgdmFyIGNvbG9yID0gdGhpcy5wYXJhbWV0ZXJzLmNvbG9yc1tyYW5kb20oMCwgdGhpcy5wYXJhbWV0ZXJzLmNvbG9ycy5sZW5ndGgsIHRydWUpXTtcclxuXHJcbiAgICBpZiAoIW1hdGVyaWFsc1tjb2xvcl0pIHtcclxuICAgICAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcclxuICAgICAgICBjb2xvcjogY29sb3IsXHJcbiAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIG1hdGVyaWFsc1tjb2xvcl0gPSBtYXRlcmlhbDtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKHRoaXMuZ2VvbWV0cnksIG1hdGVyaWFsc1tjb2xvcl0pO1xyXG4gICAgbWVzaC5wb3NpdGlvbi5zZXQoeCwgeSwgeik7XHJcbiAgICB0aGlzLmVsLmFkZChtZXNoKTtcclxuICB9XHJcblxyXG4gIHRoaXMuZnJvbSA9IHRoaXMuZ2VvbWV0cnkudmVydGljZXNbMF0ueDtcclxuICB0aGlzLnRvID0gdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1sxXS54O1xyXG4gIHRoaXMuY2FjaGUgPSAgeyB4OiB0aGlzLmZyb20gfTtcclxuXHJcbiAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1sxXS54ID0gdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1szXS54ID0gdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1swXS54O1xyXG59O1xyXG5cclxuU3RyaXAucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzWzFdLnggPSB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzWzNdLnggPSB0aGlzLmNhY2hlLng7XHJcbiAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xyXG4gIHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcbn07XHJcblxyXG5TdHJpcC5wcm90b3R5cGUuaW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgVHdlZW5MaXRlLnRvKHRoaXMuY2FjaGUsIHRoaXMucGFyYW1ldGVycy5zcGVlZCwgeyB4OiB0aGlzLnRvLFxyXG4gICAgb25VcGRhdGU6IHRoaXMudXBkYXRlLmJpbmQodGhpcylcclxuICB9KTtcclxufTtcclxuXHJcblN0cmlwLnByb3RvdHlwZS5vdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgVHdlZW5MaXRlLnRvKHRoaXMuY2FjaGUsIHRoaXMucGFyYW1ldGVycy5zcGVlZCwgeyB4OiB0aGlzLmZyb20sXHJcbiAgICBvblVwZGF0ZTogdGhpcy51cGRhdGUuYmluZCh0aGlzKVxyXG4gIH0pO1xyXG59O1xyXG5cclxuU3RyaXAuZGVmYXVsdE9wdGlvbnMgPSB7XHJcbiAgY291bnQ6IDEwLFxyXG4gIGNvbG9yczogWycjZmZmZmZmJ10sXHJcbiAgd2lkdGg6IDEwLFxyXG4gIGhlaWdodDogMyxcclxuICBzcGVlZDogMSxcclxuICByYW5nZVg6IFstNTAsIDUwXSxcclxuICByYW5nZVk6IFstNTAsIDUwXSxcclxuICByYW5nZVo6IFstNTAsIDUwXVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTdHJpcDsiXX0=
},{"../utils/randomUtil":65}],41:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);
  
/**
 * Display a 2D text in 3D space
 *
 * @class TextPanel
 * @constructor
 * @param {String} [text] Text to display, use '\n' for line break
 * @param {Object} [options]
 * @param {Number} [options.size=100] Font size
 * @param {String} [options.font='Futura'] Fonts
 * @param {String} [options.style='Bold'] Font style
 * @param {String} [options.align='center'] Center, left or right
 * @param {Number} [options.lineSpacing=20] Height lines
 * @param {String} [options.color='rgba(200, 200, 200, 1)'] Text color
 * @requires jQuery, THREE, TweenLite
 */
function TextPanel (text, options) {
  var parameters = jQuery.extend(TextPanel.defaultOptions, options);

  text = text || '';

  // split and clean the words
  var words = text.split('\n');
  var wordsCount = words.length;
  for (var i = 0; i < wordsCount; i++) {
    words[i] = words[i].replace(/^\s+|\s+$/g, '');
  }

  var canvas = document.createElement('canvas');
  var context = canvas.getContext('2d');

  var font = parameters.style + ' ' + parameters.size + 'px' + ' ' + parameters.font;

  context.font = font;

  // max width
  var width;

  var maxWidth = 0;
  for (var j = 0; j < wordsCount; j++) {
    var tempWidth = context.measureText(words[j]).width;
    if (tempWidth > maxWidth) {
      maxWidth = tempWidth;
    }
  }

  width = maxWidth;

  // get the line height and the total height
  var lineHeight = parameters.size + parameters.lineSpacing;
  var height = lineHeight * wordsCount;

  // security margin
  canvas.width = width + 20; 
  canvas.height = height + 20;

  // set the font once more to update the context
  context.font = font;
  context.fillStyle = parameters.color;
  context.textAlign = parameters.align;
  context.textBaseline = 'top';

  // draw text
  for (var k = 0; k < wordsCount; k++) {
    var word = words[k];

    var left;

    if (parameters.align === 'left') {
      left = 0;
    } else if (parameters.align === 'center') {
      left = canvas.width / 2;
    } else {
      left = canvas.width;
    }

    context.fillText(word, left, lineHeight * k);  
  }

  var texture = new THREE.Texture(canvas);
  texture.needsUpdate = true;

  var material = new THREE.MeshBasicMaterial({
    map: texture,
    transparent: true,
    depthWrite: false,
    depthTest: true,
    side: THREE.DoubleSide,
    opacity: 0
  });

  var geometry = new THREE.PlaneGeometry(canvas.width / 20, canvas.height / 20);

  // Group is exposed, mesh is animated
  var group = new THREE.Object3D();

  var mesh = new THREE.Mesh(geometry, material);
  mesh.position.y = -20;
  group.add(mesh);

  group.visible = false;

  this.el = group;

  var cache = { y: mesh.position.y, opacity: mesh.material.opacity };

  function update () {
    mesh.position.y = cache.y;
    mesh.material.opacity = cache.opacity;
  }  

  this.in = function () {
    TweenLite.to(cache, 1.5, { y: 0, opacity: 1,
      onStart: function () { group.visible = true; },
      onUpdate: update
    });
  };

  this.out = function (way) {
    var y = way === 'up' ? -20 : 20;
    TweenLite.to(cache, 1, { y: y, opacity: 0,
      onUpdate: update,
      onComplete: function () { group.visible = false; }
    });
  };
}

TextPanel.defaultOptions = {
  size: 100,
  font: 'Futura, Trebuchet MS, Arial, sans-serif',
  style: 'Bold',
  align: 'center',
  lineSpacing: 20,
  color: 'rgba(200, 200, 200, 1)'
};

module.exports = TextPanel;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL1RleHRQYW5lbE9iamVjdDNELmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGpRdWVyeSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydqUXVlcnknXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2pRdWVyeSddIDogbnVsbCk7XHJcbnZhciBUSFJFRSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydUSFJFRSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVEhSRUUnXSA6IG51bGwpO1xyXG52YXIgVHdlZW5MaXRlID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1R3ZWVuTGl0ZSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVHdlZW5MaXRlJ10gOiBudWxsKTtcclxuICBcclxuLyoqXHJcbiAqIERpc3BsYXkgYSAyRCB0ZXh0IGluIDNEIHNwYWNlXHJcbiAqXHJcbiAqIEBjbGFzcyBUZXh0UGFuZWxcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBbdGV4dF0gVGV4dCB0byBkaXNwbGF5LCB1c2UgJ1xcbicgZm9yIGxpbmUgYnJlYWtcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuc2l6ZT0xMDBdIEZvbnQgc2l6ZVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuZm9udD0nRnV0dXJhJ10gRm9udHNcclxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnN0eWxlPSdCb2xkJ10gRm9udCBzdHlsZVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuYWxpZ249J2NlbnRlciddIENlbnRlciwgbGVmdCBvciByaWdodFxyXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubGluZVNwYWNpbmc9MjBdIEhlaWdodCBsaW5lc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuY29sb3I9J3JnYmEoMjAwLCAyMDAsIDIwMCwgMSknXSBUZXh0IGNvbG9yXHJcbiAqIEByZXF1aXJlcyBqUXVlcnksIFRIUkVFLCBUd2VlbkxpdGVcclxuICovXHJcbmZ1bmN0aW9uIFRleHRQYW5lbCAodGV4dCwgb3B0aW9ucykge1xyXG4gIHZhciBwYXJhbWV0ZXJzID0galF1ZXJ5LmV4dGVuZChUZXh0UGFuZWwuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICB0ZXh0ID0gdGV4dCB8fCAnJztcclxuXHJcbiAgLy8gc3BsaXQgYW5kIGNsZWFuIHRoZSB3b3Jkc1xyXG4gIHZhciB3b3JkcyA9IHRleHQuc3BsaXQoJ1xcbicpO1xyXG4gIHZhciB3b3Jkc0NvdW50ID0gd29yZHMubGVuZ3RoO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHNDb3VudDsgaSsrKSB7XHJcbiAgICB3b3Jkc1tpXSA9IHdvcmRzW2ldLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcclxuICB9XHJcblxyXG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICB2YXIgZm9udCA9IHBhcmFtZXRlcnMuc3R5bGUgKyAnICcgKyBwYXJhbWV0ZXJzLnNpemUgKyAncHgnICsgJyAnICsgcGFyYW1ldGVycy5mb250O1xyXG5cclxuICBjb250ZXh0LmZvbnQgPSBmb250O1xyXG5cclxuICAvLyBtYXggd2lkdGhcclxuICB2YXIgd2lkdGg7XHJcblxyXG4gIHZhciBtYXhXaWR0aCA9IDA7XHJcbiAgZm9yICh2YXIgaiA9IDA7IGogPCB3b3Jkc0NvdW50OyBqKyspIHtcclxuICAgIHZhciB0ZW1wV2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KHdvcmRzW2pdKS53aWR0aDtcclxuICAgIGlmICh0ZW1wV2lkdGggPiBtYXhXaWR0aCkge1xyXG4gICAgICBtYXhXaWR0aCA9IHRlbXBXaWR0aDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHdpZHRoID0gbWF4V2lkdGg7XHJcblxyXG4gIC8vIGdldCB0aGUgbGluZSBoZWlnaHQgYW5kIHRoZSB0b3RhbCBoZWlnaHRcclxuICB2YXIgbGluZUhlaWdodCA9IHBhcmFtZXRlcnMuc2l6ZSArIHBhcmFtZXRlcnMubGluZVNwYWNpbmc7XHJcbiAgdmFyIGhlaWdodCA9IGxpbmVIZWlnaHQgKiB3b3Jkc0NvdW50O1xyXG5cclxuICAvLyBzZWN1cml0eSBtYXJnaW5cclxuICBjYW52YXMud2lkdGggPSB3aWR0aCArIDIwOyBcclxuICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICsgMjA7XHJcblxyXG4gIC8vIHNldCB0aGUgZm9udCBvbmNlIG1vcmUgdG8gdXBkYXRlIHRoZSBjb250ZXh0XHJcbiAgY29udGV4dC5mb250ID0gZm9udDtcclxuICBjb250ZXh0LmZpbGxTdHlsZSA9IHBhcmFtZXRlcnMuY29sb3I7XHJcbiAgY29udGV4dC50ZXh0QWxpZ24gPSBwYXJhbWV0ZXJzLmFsaWduO1xyXG4gIGNvbnRleHQudGV4dEJhc2VsaW5lID0gJ3RvcCc7XHJcblxyXG4gIC8vIGRyYXcgdGV4dFxyXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgd29yZHNDb3VudDsgaysrKSB7XHJcbiAgICB2YXIgd29yZCA9IHdvcmRzW2tdO1xyXG5cclxuICAgIHZhciBsZWZ0O1xyXG5cclxuICAgIGlmIChwYXJhbWV0ZXJzLmFsaWduID09PSAnbGVmdCcpIHtcclxuICAgICAgbGVmdCA9IDA7XHJcbiAgICB9IGVsc2UgaWYgKHBhcmFtZXRlcnMuYWxpZ24gPT09ICdjZW50ZXInKSB7XHJcbiAgICAgIGxlZnQgPSBjYW52YXMud2lkdGggLyAyO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGVmdCA9IGNhbnZhcy53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBjb250ZXh0LmZpbGxUZXh0KHdvcmQsIGxlZnQsIGxpbmVIZWlnaHQgKiBrKTsgIFxyXG4gIH1cclxuXHJcbiAgdmFyIHRleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZShjYW52YXMpO1xyXG4gIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgbWFwOiB0ZXh0dXJlLFxyXG4gICAgdHJhbnNwYXJlbnQ6IHRydWUsXHJcbiAgICBkZXB0aFdyaXRlOiBmYWxzZSxcclxuICAgIGRlcHRoVGVzdDogdHJ1ZSxcclxuICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUsXHJcbiAgICBvcGFjaXR5OiAwXHJcbiAgfSk7XHJcblxyXG4gIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KGNhbnZhcy53aWR0aCAvIDIwLCBjYW52YXMuaGVpZ2h0IC8gMjApO1xyXG5cclxuICAvLyBHcm91cCBpcyBleHBvc2VkLCBtZXNoIGlzIGFuaW1hdGVkXHJcbiAgdmFyIGdyb3VwID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcblxyXG4gIHZhciBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICBtZXNoLnBvc2l0aW9uLnkgPSAtMjA7XHJcbiAgZ3JvdXAuYWRkKG1lc2gpO1xyXG5cclxuICBncm91cC52aXNpYmxlID0gZmFsc2U7XHJcblxyXG4gIHRoaXMuZWwgPSBncm91cDtcclxuXHJcbiAgdmFyIGNhY2hlID0geyB5OiBtZXNoLnBvc2l0aW9uLnksIG9wYWNpdHk6IG1lc2gubWF0ZXJpYWwub3BhY2l0eSB9O1xyXG5cclxuICBmdW5jdGlvbiB1cGRhdGUgKCkge1xyXG4gICAgbWVzaC5wb3NpdGlvbi55ID0gY2FjaGUueTtcclxuICAgIG1lc2gubWF0ZXJpYWwub3BhY2l0eSA9IGNhY2hlLm9wYWNpdHk7XHJcbiAgfSAgXHJcblxyXG4gIHRoaXMuaW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBUd2VlbkxpdGUudG8oY2FjaGUsIDEuNSwgeyB5OiAwLCBvcGFjaXR5OiAxLFxyXG4gICAgICBvblN0YXJ0OiBmdW5jdGlvbiAoKSB7IGdyb3VwLnZpc2libGUgPSB0cnVlOyB9LFxyXG4gICAgICBvblVwZGF0ZTogdXBkYXRlXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB0aGlzLm91dCA9IGZ1bmN0aW9uICh3YXkpIHtcclxuICAgIHZhciB5ID0gd2F5ID09PSAndXAnID8gLTIwIDogMjA7XHJcbiAgICBUd2VlbkxpdGUudG8oY2FjaGUsIDEsIHsgeTogeSwgb3BhY2l0eTogMCxcclxuICAgICAgb25VcGRhdGU6IHVwZGF0ZSxcclxuICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gKCkgeyBncm91cC52aXNpYmxlID0gZmFsc2U7IH1cclxuICAgIH0pO1xyXG4gIH07XHJcbn1cclxuXHJcblRleHRQYW5lbC5kZWZhdWx0T3B0aW9ucyA9IHtcclxuICBzaXplOiAxMDAsXHJcbiAgZm9udDogJ0Z1dHVyYSwgVHJlYnVjaGV0IE1TLCBBcmlhbCwgc2Fucy1zZXJpZicsXHJcbiAgc3R5bGU6ICdCb2xkJyxcclxuICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgbGluZVNwYWNpbmc6IDIwLFxyXG4gIGNvbG9yOiAncmdiYSgyMDAsIDIwMCwgMjAwLCAxKSdcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVGV4dFBhbmVsOyJdfQ==
},{}],42:[function(require,module,exports){
(function (global){
'use strict';

var jQuery = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);
var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var loop = require('../utils/loopUtil');

/**
 * Animated wave
 *
 * @class Wave
 * @constructor
 * @param {Object} [options]
 * @param {Object} [options.amplitude=10] Vertical amplitude
 * @param {Object} [options.divisionSize=2] Grid division size
 * @param {Object} [options.divisionX=50] X axis divisions
 * @param {Object} [options.divisionY=50] Y axis divisions
 * @param {Object} [options.speed=10] Animation speed
 * @requires jQuery, THREE, TweenLite, loop
 */
function Wave (options) {
  this.parameters = jQuery.extend(Wave.defaultOptions, options);

  var plane = this.getPlane();
  
  var time = 0;

  var divisionsX = this.parameters.divisionsX;
  var divisionsY = this.parameters.divisionsY;

  function updateWave () {
    var i= 0;

    for (var x = 0; x <= divisionsX; x++) {
      for (var y = 0; y <= divisionsY; y++) {
        var vertex = plane.geometry.vertices[i++];
        vertex.z =
          (Math.sin(((x + 1) + time) * 0.2) * 2) +
          (Math.sin(((y + 1) + time) * 0.2) * 5);
      }
    }

    plane.geometry.verticesNeedUpdate = true;
    time += 0.1;
  }

  updateWave();

  var idleTween = TweenLite.to({}, 5, { paused: true, ease: window.Linear.easeNone,
    onUpdate: updateWave,
    onComplete: loop
  });

  this.el = plane;

  this.in = function (way) {
    plane.position.y = way === 'up' ? 20 : -20;
    TweenLite.to(plane.position, 1.5, { y: -10 });
  };

  this.out = function (way) {
    var y = way === 'up' ? -20 : 20;
    TweenLite.to(plane.position, 1, { y: y });
  };

  this.start = function () {
    idleTween.resume();
  };

  this.stop = function () {
    idleTween.pause();
  };
}

Wave.defaultOptions = {
  amplitude: 10,
  divisionSize: 2,
  divisionsX: 50,
  divisionsY: 50,
  speed: 10
};

/**
 * Get wave's plane
 *
 * @method getPlane
 * @return {THREE.Mesh}
 */
Wave.prototype.getPlane = function () {
  var texture = THREE.ImageUtils.loadTexture('./app/public/img/texture-wave.png');
  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
  texture.repeat.set(20, 20);

  var material = new THREE.MeshLambertMaterial({
    map: texture,
    color: '#ffffff',
    side: THREE.DoubleSide
  });

  var geometry = new THREE.PlaneGeometry(
    this.parameters.divisionsX * this.parameters.divisionSize,
    this.parameters.divisionsY * this.parameters.divisionSize,
    this.parameters.divisionsX,
    this.parameters.divisionsY
  );

  var mesh = new THREE.Mesh(geometry, material);
  mesh.position.y = -20;
  mesh.rotation.x = -Math.PI / 2;

  return mesh;
};

module.exports = Wave;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvb2JqZWN0czNEL1dhdmVPYmplY3QzRC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBqUXVlcnkgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snalF1ZXJ5J10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydqUXVlcnknXSA6IG51bGwpO1xyXG52YXIgVEhSRUUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVEhSRUUnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1RIUkVFJ10gOiBudWxsKTtcclxudmFyIFR3ZWVuTGl0ZSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydUd2VlbkxpdGUnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1R3ZWVuTGl0ZSddIDogbnVsbCk7XHJcblxyXG52YXIgbG9vcCA9IHJlcXVpcmUoJy4uL3V0aWxzL2xvb3BVdGlsJyk7XHJcblxyXG4vKipcclxuICogQW5pbWF0ZWQgd2F2ZVxyXG4gKlxyXG4gKiBAY2xhc3MgV2F2ZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuYW1wbGl0dWRlPTEwXSBWZXJ0aWNhbCBhbXBsaXR1ZGVcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmRpdmlzaW9uU2l6ZT0yXSBHcmlkIGRpdmlzaW9uIHNpemVcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmRpdmlzaW9uWD01MF0gWCBheGlzIGRpdmlzaW9uc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuZGl2aXNpb25ZPTUwXSBZIGF4aXMgZGl2aXNpb25zXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5zcGVlZD0xMF0gQW5pbWF0aW9uIHNwZWVkXHJcbiAqIEByZXF1aXJlcyBqUXVlcnksIFRIUkVFLCBUd2VlbkxpdGUsIGxvb3BcclxuICovXHJcbmZ1bmN0aW9uIFdhdmUgKG9wdGlvbnMpIHtcclxuICB0aGlzLnBhcmFtZXRlcnMgPSBqUXVlcnkuZXh0ZW5kKFdhdmUuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICB2YXIgcGxhbmUgPSB0aGlzLmdldFBsYW5lKCk7XHJcbiAgXHJcbiAgdmFyIHRpbWUgPSAwO1xyXG5cclxuICB2YXIgZGl2aXNpb25zWCA9IHRoaXMucGFyYW1ldGVycy5kaXZpc2lvbnNYO1xyXG4gIHZhciBkaXZpc2lvbnNZID0gdGhpcy5wYXJhbWV0ZXJzLmRpdmlzaW9uc1k7XHJcblxyXG4gIGZ1bmN0aW9uIHVwZGF0ZVdhdmUgKCkge1xyXG4gICAgdmFyIGk9IDA7XHJcblxyXG4gICAgZm9yICh2YXIgeCA9IDA7IHggPD0gZGl2aXNpb25zWDsgeCsrKSB7XHJcbiAgICAgIGZvciAodmFyIHkgPSAwOyB5IDw9IGRpdmlzaW9uc1k7IHkrKykge1xyXG4gICAgICAgIHZhciB2ZXJ0ZXggPSBwbGFuZS5nZW9tZXRyeS52ZXJ0aWNlc1tpKytdO1xyXG4gICAgICAgIHZlcnRleC56ID1cclxuICAgICAgICAgIChNYXRoLnNpbigoKHggKyAxKSArIHRpbWUpICogMC4yKSAqIDIpICtcclxuICAgICAgICAgIChNYXRoLnNpbigoKHkgKyAxKSArIHRpbWUpICogMC4yKSAqIDUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcGxhbmUuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuICAgIHRpbWUgKz0gMC4xO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlV2F2ZSgpO1xyXG5cclxuICB2YXIgaWRsZVR3ZWVuID0gVHdlZW5MaXRlLnRvKHt9LCA1LCB7IHBhdXNlZDogdHJ1ZSwgZWFzZTogd2luZG93LkxpbmVhci5lYXNlTm9uZSxcclxuICAgIG9uVXBkYXRlOiB1cGRhdGVXYXZlLFxyXG4gICAgb25Db21wbGV0ZTogbG9vcFxyXG4gIH0pO1xyXG5cclxuICB0aGlzLmVsID0gcGxhbmU7XHJcblxyXG4gIHRoaXMuaW4gPSBmdW5jdGlvbiAod2F5KSB7XHJcbiAgICBwbGFuZS5wb3NpdGlvbi55ID0gd2F5ID09PSAndXAnID8gMjAgOiAtMjA7XHJcbiAgICBUd2VlbkxpdGUudG8ocGxhbmUucG9zaXRpb24sIDEuNSwgeyB5OiAtMTAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5vdXQgPSBmdW5jdGlvbiAod2F5KSB7XHJcbiAgICB2YXIgeSA9IHdheSA9PT0gJ3VwJyA/IC0yMCA6IDIwO1xyXG4gICAgVHdlZW5MaXRlLnRvKHBsYW5lLnBvc2l0aW9uLCAxLCB7IHk6IHkgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlkbGVUd2Vlbi5yZXN1bWUoKTtcclxuICB9O1xyXG5cclxuICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZGxlVHdlZW4ucGF1c2UoKTtcclxuICB9O1xyXG59XHJcblxyXG5XYXZlLmRlZmF1bHRPcHRpb25zID0ge1xyXG4gIGFtcGxpdHVkZTogMTAsXHJcbiAgZGl2aXNpb25TaXplOiAyLFxyXG4gIGRpdmlzaW9uc1g6IDUwLFxyXG4gIGRpdmlzaW9uc1k6IDUwLFxyXG4gIHNwZWVkOiAxMFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCB3YXZlJ3MgcGxhbmVcclxuICpcclxuICogQG1ldGhvZCBnZXRQbGFuZVxyXG4gKiBAcmV0dXJuIHtUSFJFRS5NZXNofVxyXG4gKi9cclxuV2F2ZS5wcm90b3R5cGUuZ2V0UGxhbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHRleHR1cmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCcuL2FwcC9wdWJsaWMvaW1nL3RleHR1cmUtd2F2ZS5wbmcnKTtcclxuICB0ZXh0dXJlLndyYXBTID0gdGV4dHVyZS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xyXG4gIHRleHR1cmUucmVwZWF0LnNldCgyMCwgMjApO1xyXG5cclxuICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7XHJcbiAgICBtYXA6IHRleHR1cmUsXHJcbiAgICBjb2xvcjogJyNmZmZmZmYnLFxyXG4gICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxyXG4gIH0pO1xyXG5cclxuICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShcclxuICAgIHRoaXMucGFyYW1ldGVycy5kaXZpc2lvbnNYICogdGhpcy5wYXJhbWV0ZXJzLmRpdmlzaW9uU2l6ZSxcclxuICAgIHRoaXMucGFyYW1ldGVycy5kaXZpc2lvbnNZICogdGhpcy5wYXJhbWV0ZXJzLmRpdmlzaW9uU2l6ZSxcclxuICAgIHRoaXMucGFyYW1ldGVycy5kaXZpc2lvbnNYLFxyXG4gICAgdGhpcy5wYXJhbWV0ZXJzLmRpdmlzaW9uc1lcclxuICApO1xyXG5cclxuICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgbWVzaC5wb3NpdGlvbi55ID0gLTIwO1xyXG4gIG1lc2gucm90YXRpb24ueCA9IC1NYXRoLlBJIC8gMjtcclxuXHJcbiAgcmV0dXJuIG1lc2g7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFdhdmU7Il19
},{"../utils/loopUtil":62}],43:[function(require,module,exports){
// requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel
// MIT license

'use strict';

(function() {
  var lastTime = 0;
  var vendors = ['ms', 'moz', 'webkit', 'o'];
  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
  }
 
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function(callback) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function() {
        callback(currTime + timeToCall);
      }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }
 
  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function(id) {
      clearTimeout(id);
    };
  }
})();
},{}],44:[function(require,module,exports){
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind

'use strict';

(function () {
  if (!Function.prototype.bind) {
    Function.prototype.bind = function(oThis) {
      if (typeof this !== 'function') {
        // closest thing possible to the ECMAScript 5
        // internal IsCallable function
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs   = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP    = function() {},
          fBound  = function() {
            return fToBind.apply(this instanceof fNOP && oThis
                   ? this
                   : oThis,
                   aArgs.concat(Array.prototype.slice.call(arguments)));
          };

      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
})();
},{}],45:[function(require,module,exports){
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf

'use strict';

(function () {
  if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(searchElement /*, fromIndex */ ) {"use strict";
      if (this == null) {
        throw new TypeError();
      }
      var t = Object(this);
      var len = t.length >>> 0;
      if (len === 0) {
        return -1;
      }
      var n = 0;
      if (arguments.length > 1) {
        n = Number(arguments[1]);
        if (n != n) {// shortcut for verifying if it's NaN
          n = 0;
        } else if (n != 0 && n != Infinity && n != -Infinity) {
          n = (n > 0 || -1) * Math.floor(Math.abs(n));
        }
      }
      if (n >= len) {
        return -1;
      }
      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
      for (; k < len; k++) {
        if ( k in t && t[k] === searchElement) {
          return k;
        }
      }
      return -1;
    }
  }
})();
},{}],46:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var TextPanel = require('../objects3D/TextPanelObject3D');
var Ball = require('../objects3D/BallObject3D');
var Grid = require('../objects3D/GridObject3D');

var ballSection = new Section('ball');

var ball = new Ball();
ball.el.rotation.z = 2;
ballSection.add(ball.el);

var grid = new Grid({
  step: 5,
  stepsX: 11,
  stepsY: 11,
  loop: true
});
grid.el.rotation.set(1.5, 1, 2);
grid.el.position.x = -20;
ballSection.add(grid.el);

var text = new TextPanel(
  'W H E R E\n S T U D E N T S\n I N N O V A T E',
  {
    align: 'left',
    style: '',
    size: 40,
    lineSpacing: 40
  }
);
text.el.position.set(15, 0, 15);
text.el.rotation.y = -0.4;
ballSection.add(text.el);

ball.el.visible = false;
grid.el.visible = false;

ballSection.onIn(function () {
  ball.in();
  grid.in();
  text.in();
});

ballSection.onOut(function (way) {
  text.out(way);
  grid.out(way);

  if (way === 'up') {
    ball.out();
  }
});

ballSection.onStart(function () {
  ball.start();
  grid.start();

  ball.el.visible = true;
  grid.el.visible = true;
});

ballSection.onStop(function () {
  ball.stop();
  grid.stop();

  ball.el.visible = false;
  grid.el.visible = false;
});

module.exports = ballSection;
},{"../classes/SectionClass":4,"../objects3D/BallObject3D":25,"../objects3D/GridObject3D":33,"../objects3D/TextPanelObject3D":41}],47:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var Beam = require('../objects3D/BeamObject3D');

var beamsSection = new Section('beams');

var leftBeam = new Beam({ color: '#808080', delay: 0.2 });
leftBeam.el.position.set(15, 25, -10);
beamsSection.add(leftBeam.el);

var middleBeam = new Beam({ color: '#ffffff', width: 4, cubeSize: 1, delay: 0.1 });
middleBeam.el.position.y = 15;
beamsSection.add(middleBeam.el);

var rightBeam = new Beam({ color: '#4c4c4c', delay: 0.4 });
rightBeam.el.position.set(-20, 30, -20);
beamsSection.add(rightBeam.el);

leftBeam.el.visible = false;
middleBeam.el.visible = false;
rightBeam.el.visible = false;

beamsSection.onIn(function () {
  leftBeam.in();
  middleBeam.in();
  rightBeam.in();
});

beamsSection.onOut(function (way) {
  leftBeam.out(way);
  middleBeam.out(way);
  rightBeam.out(way);
});

beamsSection.onStart(function () {
  leftBeam.start();
  middleBeam.start();
  rightBeam.start();

  leftBeam.el.visible = true;
  middleBeam.el.visible = true;
  rightBeam.el.visible = true;
});

beamsSection.onStop(function () {
  leftBeam.stop();
  middleBeam.stop();
  rightBeam.stop();

  leftBeam.el.visible = false;
  middleBeam.el.visible = false;
  rightBeam.el.visible = false;
});

module.exports = beamsSection;
},{"../classes/SectionClass":4,"../objects3D/BeamObject3D":26}],48:[function(require,module,exports){
(function (global){
'use strict';

var TweenLite = (typeof window !== "undefined" ? window['TweenLite'] : typeof global !== "undefined" ? global['TweenLite'] : null);

var Section = require('../classes/SectionClass');

var City = require('../objects3D/CityObject3D');

var citySection = new Section('city');

var city = new City();
city.addGroup({
  name: 'shanghai',
  objs: {
    ground: './app/public/3D/shanghai-grounds.js',
    buildings: './app/public/3D/shanghai-buildings.js',
    towers: './app/public/3D/shanghai-towers.js'
  },
  outline: {
    ground: {
      offset: 0.2,
      solid: true
    }
  }
});

// city.el.rotation.y = Math.PI / 6;
city.el.rotation.y = 0;
city.el.rotation.z = Math.PI / 16;
city.el.position.set(5, -10, 0);
citySection.add(city.el);
city.showGroup('shanghai');

TweenLite.to(city.el.rotation, 30, { y: 2 * Math.PI, ease: window.Linear.easeNone,
  onComplete: function () {
    this.restart();
  }
});

citySection.onIn(function (way) {

});

citySection.onOut(function (way) {

});

citySection.onStart(function (way) {

});

citySection.onStop(function (way) {

});

module.exports = citySection;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvc2VjdGlvbnMvY2l0eVNlY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBUd2VlbkxpdGUgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snVHdlZW5MaXRlJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUd2VlbkxpdGUnXSA6IG51bGwpO1xyXG5cclxudmFyIFNlY3Rpb24gPSByZXF1aXJlKCcuLi9jbGFzc2VzL1NlY3Rpb25DbGFzcycpO1xyXG5cclxudmFyIENpdHkgPSByZXF1aXJlKCcuLi9vYmplY3RzM0QvQ2l0eU9iamVjdDNEJyk7XHJcblxyXG52YXIgY2l0eVNlY3Rpb24gPSBuZXcgU2VjdGlvbignY2l0eScpO1xyXG5cclxudmFyIGNpdHkgPSBuZXcgQ2l0eSgpO1xyXG5jaXR5LmFkZEdyb3VwKHtcclxuICBuYW1lOiAnc2hhbmdoYWknLFxyXG4gIG9ianM6IHtcclxuICAgIGdyb3VuZDogJy4vYXBwL3B1YmxpYy8zRC9zaGFuZ2hhaS1ncm91bmRzLmpzJyxcclxuICAgIGJ1aWxkaW5nczogJy4vYXBwL3B1YmxpYy8zRC9zaGFuZ2hhaS1idWlsZGluZ3MuanMnLFxyXG4gICAgdG93ZXJzOiAnLi9hcHAvcHVibGljLzNEL3NoYW5naGFpLXRvd2Vycy5qcydcclxuICB9LFxyXG4gIG91dGxpbmU6IHtcclxuICAgIGdyb3VuZDoge1xyXG4gICAgICBvZmZzZXQ6IDAuMixcclxuICAgICAgc29saWQ6IHRydWVcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG5cclxuLy8gY2l0eS5lbC5yb3RhdGlvbi55ID0gTWF0aC5QSSAvIDY7XHJcbmNpdHkuZWwucm90YXRpb24ueSA9IDA7XHJcbmNpdHkuZWwucm90YXRpb24ueiA9IE1hdGguUEkgLyAxNjtcclxuY2l0eS5lbC5wb3NpdGlvbi5zZXQoNSwgLTEwLCAwKTtcclxuY2l0eVNlY3Rpb24uYWRkKGNpdHkuZWwpO1xyXG5jaXR5LnNob3dHcm91cCgnc2hhbmdoYWknKTtcclxuXHJcblR3ZWVuTGl0ZS50byhjaXR5LmVsLnJvdGF0aW9uLCAzMCwgeyB5OiAyICogTWF0aC5QSSwgZWFzZTogd2luZG93LkxpbmVhci5lYXNlTm9uZSxcclxuICBvbkNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLnJlc3RhcnQoKTtcclxuICB9XHJcbn0pO1xyXG5cclxuY2l0eVNlY3Rpb24ub25JbihmdW5jdGlvbiAod2F5KSB7XHJcblxyXG59KTtcclxuXHJcbmNpdHlTZWN0aW9uLm9uT3V0KGZ1bmN0aW9uICh3YXkpIHtcclxuXHJcbn0pO1xyXG5cclxuY2l0eVNlY3Rpb24ub25TdGFydChmdW5jdGlvbiAod2F5KSB7XHJcblxyXG59KTtcclxuXHJcbmNpdHlTZWN0aW9uLm9uU3RvcChmdW5jdGlvbiAod2F5KSB7XHJcblxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gY2l0eVNlY3Rpb247Il19
},{"../classes/SectionClass":4,"../objects3D/CityObject3D":27}],49:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var TextPanel = require('../objects3D/TextPanelObject3D');
var Drop = require('../objects3D/DropObject3D');

var dropSection = new Section('drop');

var drop = new Drop({ amplitude: 4 });
drop.el.rotation.x = -1.2;
drop.el.position.y = -10;
dropSection.add(drop.el);

var text = new TextPanel(
  'W  E  L  C  O  M  E   T O   R K M V\n C E N T E N A R Y  E X H I B I T I O N  2 0 2 2',
  {
    align: 'left',
    style: '',
    size: 50,
    lineSpacing: 40
  }
);
text.el.position.set(-10, 8, 0);
dropSection.add(text.el);

drop.el.visible = false;

dropSection.onIn(function () {
  drop.in();
  text.in();
});

dropSection.onOut(function (way) {
  drop.out(way);
  text.out(way);
});

dropSection.onStart(function () {
  drop.start();

  drop.el.visible = true;
});

dropSection.onStop(function () {
  drop.stop();

  drop.el.visible = false;
});

module.exports = dropSection;
},{"../classes/SectionClass":4,"../objects3D/DropObject3D":28,"../objects3D/TextPanelObject3D":41}],50:[function(require,module,exports){
'use strict';
  
var Section = require('../classes/SectionClass');

var TextPanel = require('../objects3D/TextPanelObject3D');
var LookAtField = require('../objects3D/LookAtFieldObject3D');

var endSection = new Section('end');

var text = new TextPanel(
  'W E L C O M E',
  {
    align: 'center',
    style: '',
    size: 80,
    lineSpacing: 40
  }
);
endSection.add(text.el);

var field = new LookAtField({
  count: 50
});
endSection.add(field.el);

endSection.onIn(function () {
  text.in();
  field.in();
});

endSection.onOut(function (way) {
  text.out(way);
  field.out(way);
});

module.exports = endSection;
},{"../classes/SectionClass":4,"../objects3D/LookAtFieldObject3D":36,"../objects3D/TextPanelObject3D":41}],51:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var TextPanel = require('../objects3D/TextPanelObject3D');
var Face = require('../objects3D/FaceHpObject3D');
var Strips = require('../objects3D/StripsObject3D');

var faceSection = new Section('face');

var text = new TextPanel(
  'S T R I V E \n H A R D',
  {
    align: 'left',
    style: '',
    size: 70,
    lineSpacing: 40
  }
);
text.el.position.set(23, 0, 0);
text.el.rotation.y = -0.4;
faceSection.add(text.el);

var face = new Face();
face.el.position.y = -5;
face.el.rotation.x = -0.1;
face.el.rotation.z = 0.25;
faceSection.add(face.el);

var strips = new Strips({
  count: 10,
  colors: ['#444444', '#333333', '#222222'],
  rangeY: [-60, 60]
});
faceSection.add(strips.el);

face.el.visible = false;
strips.el.visible = false;

faceSection.onIn(function () {
  face.in();
  strips.in();
  text.in();
});

faceSection.onOut(function (way) {
  face.out(way);
  strips.out();
  text.out();
});

faceSection.onStart(function () {
  face.start();

  face.el.visible = true;
  strips.el.visible = true;
});

faceSection.onStop(function () {
  face.stop();

  face.el.visible = false;
  strips.el.visible = false;
});

module.exports = faceSection;
},{"../classes/SectionClass":4,"../objects3D/FaceHpObject3D":29,"../objects3D/StripsObject3D":40,"../objects3D/TextPanelObject3D":41}],52:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

var Section = require('../classes/SectionClass');

var FlowField = require('../objects3D/FlowFieldObject3D');
var TextPanel = require('../objects3D/TextPanelObject3D');

var flowSection = new Section('flow');

var points = [
  new THREE.Vector3(0, 50, 20),
  new THREE.Vector3(20, 0, -10),
  new THREE.Vector3(-20, -100, 0)
];

var field = new FlowField(points, {
  subsAmplitude: 50,
  subsNumber: 10
});
flowSection.add(field.el);

var text = new TextPanel(
  'A N D  C H A N G E  T H E I R  I D E A S\n I N T O  R E A L I T Y',
  {
    align: 'center',
    style: '',
    size: 50,
    lineSpacing: 40
  }
);
text.el.position.z = -10;
text.el.rotation.y = 0.4;
flowSection.add(text.el);

field.el.visible = false;

var fieldIn = false;

flowSection.fieldIn = function () {
  if (fieldIn) {
    return false;
  }

  fieldIn = true;

  field.in();
};

flowSection.onIn(function () {
  text.in();
});

flowSection.onOut(function (way) {
  text.out(way);
});

flowSection.onStart(function () {
  field.start();

  field.el.visible = true;
});

flowSection.onStop(function () {
  field.stop();

  field.el.visible = false;
});

module.exports = flowSection;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvc2VjdGlvbnMvZmxvd1NlY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBUSFJFRSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydUSFJFRSddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnVEhSRUUnXSA6IG51bGwpO1xyXG5cclxudmFyIFNlY3Rpb24gPSByZXF1aXJlKCcuLi9jbGFzc2VzL1NlY3Rpb25DbGFzcycpO1xyXG5cclxudmFyIEZsb3dGaWVsZCA9IHJlcXVpcmUoJy4uL29iamVjdHMzRC9GbG93RmllbGRPYmplY3QzRCcpO1xyXG52YXIgVGV4dFBhbmVsID0gcmVxdWlyZSgnLi4vb2JqZWN0czNEL1RleHRQYW5lbE9iamVjdDNEJyk7XHJcblxyXG52YXIgZmxvd1NlY3Rpb24gPSBuZXcgU2VjdGlvbignZmxvdycpO1xyXG5cclxudmFyIHBvaW50cyA9IFtcclxuICBuZXcgVEhSRUUuVmVjdG9yMygwLCA1MCwgMjApLFxyXG4gIG5ldyBUSFJFRS5WZWN0b3IzKDIwLCAwLCAtMTApLFxyXG4gIG5ldyBUSFJFRS5WZWN0b3IzKC0yMCwgLTEwMCwgMClcclxuXTtcclxuXHJcbnZhciBmaWVsZCA9IG5ldyBGbG93RmllbGQocG9pbnRzLCB7XHJcbiAgc3Vic0FtcGxpdHVkZTogNTAsXHJcbiAgc3Vic051bWJlcjogMTBcclxufSk7XHJcbmZsb3dTZWN0aW9uLmFkZChmaWVsZC5lbCk7XHJcblxyXG52YXIgdGV4dCA9IG5ldyBUZXh0UGFuZWwoXHJcbiAgJ0EgTiBEICBDIEggQSBOIEcgRSAgVCBIIEUgSSBSICBJIEQgRSBBIFNcXG4gSSBOIFQgTyAgUiBFIEEgTCBJIFQgWScsXHJcbiAge1xyXG4gICAgYWxpZ246ICdjZW50ZXInLFxyXG4gICAgc3R5bGU6ICcnLFxyXG4gICAgc2l6ZTogNTAsXHJcbiAgICBsaW5lU3BhY2luZzogNDBcclxuICB9XHJcbik7XHJcbnRleHQuZWwucG9zaXRpb24ueiA9IC0xMDtcclxudGV4dC5lbC5yb3RhdGlvbi55ID0gMC40O1xyXG5mbG93U2VjdGlvbi5hZGQodGV4dC5lbCk7XHJcblxyXG5maWVsZC5lbC52aXNpYmxlID0gZmFsc2U7XHJcblxyXG52YXIgZmllbGRJbiA9IGZhbHNlO1xyXG5cclxuZmxvd1NlY3Rpb24uZmllbGRJbiA9IGZ1bmN0aW9uICgpIHtcclxuICBpZiAoZmllbGRJbikge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZmllbGRJbiA9IHRydWU7XHJcblxyXG4gIGZpZWxkLmluKCk7XHJcbn07XHJcblxyXG5mbG93U2VjdGlvbi5vbkluKGZ1bmN0aW9uICgpIHtcclxuICB0ZXh0LmluKCk7XHJcbn0pO1xyXG5cclxuZmxvd1NlY3Rpb24ub25PdXQoZnVuY3Rpb24gKHdheSkge1xyXG4gIHRleHQub3V0KHdheSk7XHJcbn0pO1xyXG5cclxuZmxvd1NlY3Rpb24ub25TdGFydChmdW5jdGlvbiAoKSB7XHJcbiAgZmllbGQuc3RhcnQoKTtcclxuXHJcbiAgZmllbGQuZWwudmlzaWJsZSA9IHRydWU7XHJcbn0pO1xyXG5cclxuZmxvd1NlY3Rpb24ub25TdG9wKGZ1bmN0aW9uICgpIHtcclxuICBmaWVsZC5zdG9wKCk7XHJcblxyXG4gIGZpZWxkLmVsLnZpc2libGUgPSBmYWxzZTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZsb3dTZWN0aW9uOyJdfQ==
},{"../classes/SectionClass":4,"../objects3D/FlowFieldObject3D":30,"../objects3D/TextPanelObject3D":41}],53:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var TextPanel = require('../objects3D/TextPanelObject3D');
var Galaxy = require('../objects3D/GalaxyObject3D');

var galaxySection = new Section('galaxy');

var galaxy = new Galaxy();
galaxy.el.rotation.x = -1;
galaxySection.add(galaxy.el);

galaxy.el.visible = false;

var text = new TextPanel(
  'T O   M A K E   A   N E W   T O M O R R O W',
  {
    align: 'center',
    style: '',
    size: 60,
    lineSpacing: 40
  }
);
text.el.position.set(0, 20, -20);
galaxySection.add(text.el);

galaxySection.onIn(function (way) {
  galaxy.in(way);
  text.in();
});

galaxySection.onOut(function (way) {
  galaxy.out(way);
  text.out(way);
});

galaxySection.onStart(function () {
  galaxy.start();

  galaxy.el.visible = true;
});

galaxySection.onStop(function () {
  galaxy.stop();

  galaxy.el.visible = false;
});

module.exports = galaxySection;
},{"../classes/SectionClass":4,"../objects3D/GalaxyObject3D":31,"../objects3D/TextPanelObject3D":41}],54:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var GravityGrid = require('../objects3D/GravityGridObject3D');

var gravitySection = new Section('gravity');

var grid = new GravityGrid({
  linesColor: '#666666'
});
grid.el.position.z = 0;
grid.el.rotation.x = -1;
gravitySection.add(grid.el);

grid.el.visible = false;

gravitySection.onIn(function () {
  grid.in();
});

gravitySection.onOut(function () {
  grid.out();
});

gravitySection.onStart(function () {
  grid.start();
});

gravitySection.onStop(function () {
  grid.stop();
});

gravitySection.show = function () {
  grid.el.visible = true;
};

gravitySection.hide = function () {
  grid.el.visible = false;
};

module.exports = gravitySection;
},{"../classes/SectionClass":4,"../objects3D/GravityGridObject3D":32}],55:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var TextPanel = require('../objects3D/TextPanelObject3D');
var HeightMap = require('../objects3D/HeightMapObject3D');

var heightSection = new Section('height');

var heightMap = new HeightMap({
  horizontal: true,
  vertical: false,
  plane: false,
  points: false,
  maps: [
    { name: 'A', url: './app/public/img/heightMap-A.jpg' },
    { name: 'B', url: './app/public/img/heightMap-B.jpg' },
    { name: 'O', url: './app/public/img/heightMap-O.jpg' }
  ]
});
heightMap.el.position.z = -10;
heightMap.el.rotation.y = -0.6;
heightSection.add(heightMap.el);

var text = new TextPanel(
  'L  E  T    I  T \n M  O  R  P  H',
  {
    align: 'right',
    style: '',
    size: 50,
    lineSpacing: 40,
  }
);
text.el.position.set(-20, 0, 0);
heightSection.add(text.el);

heightMap.el.visible = false;

heightSection.onIn(function () {
  text.in();
});

heightSection.onOut(function (way) {
  text.out(way);
});

heightSection.onStart(function () {
  if (!heightMap.ready) {
    return false;
  }

  heightMap.start();
});

heightSection.onStop(function () {
  if (!heightMap.ready) {
    return false;
  }

  heightMap.stop();
});

heightSection.show = function () {
  heightMap.el.visible = true;
};

heightSection.hide = function () {
  heightMap.el.visible = false;
};

module.exports = heightSection;
},{"../classes/SectionClass":4,"../objects3D/HeightMapObject3D":34,"../objects3D/TextPanelObject3D":41}],56:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var Title = require('../objects3D/HelloTitleObject3D');
var Smoke = require('../objects3D/SmokeObject3D');

var helloSection = new Section('hello');

var title = new Title();
helloSection.add(title.el);

var smoke = new Smoke({  
  frontColor: '#4c4c4c',
  backColor: '#ffffff',
  layers: 3,
  data: [
    { positionX : 10.7, positionY: 3.9, positionZ: 17.8, rotationZ: 2.7, scale: 3.9 },
    { positionX : -2.8, positionY: 2.6, positionZ: -11, rotationZ: 0.7, scale: 7.7 },
    { positionX : 13, positionY: 19.5, positionZ: -1.3, rotationZ: 2, scale: 2.7 }
  ]
});

helloSection.add(smoke.el);

smoke.el.visible = false;

helloSection.onIn(function () {
  title.in();
});

helloSection.onOut(function () {
  title.out();
});

helloSection.onStart(function () {
  title.start();
});

helloSection.onStop(function () {
  title.stop();
});

var smokePlaying = false;

helloSection.smokeStart = function () {
  if (smokePlaying) {
    return false;
  }

  smokePlaying = true;

  smoke.start();

  smoke.el.visible = true;
};

helloSection.smokeStop = function () {
  if (!smokePlaying) {
    return false;
  }

  smokePlaying = false;

  smoke.stop();

  smoke.el.visible = false;
};

module.exports = helloSection;
},{"../classes/SectionClass":4,"../objects3D/HelloTitleObject3D":35,"../objects3D/SmokeObject3D":39}],57:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var Smoke = require('../objects3D/SmokeObject3D');
var Neon = require('../objects3D/NeonObject3D');

var neonsSection = new Section('neons');

var smoke = new Smoke({
  planesNumber: 3,
  frontColor: '#4c4c4c',
  backColor: '#ffffff',
  data: [
    { positionX : -2.5, positionY: -18.8, positionZ: -6, rotationZ: 2.7, scale: 8.5 },
    { positionX : -11.1, positionY: 10.3, positionZ: -10.4, rotationZ: 1.4, scale: 5.8 },
    { positionX : -15.1, positionY: -5.9, positionZ: -19.2, rotationZ: 1.6, scale: 7.4 }
  ]
});
neonsSection.add(smoke.el);

var neonA = new Neon();

var neonB = new Neon();
neonB.el.position.set(0, 0, 0);
neonB.el.rotation.z = 2;

var neonC = new Neon();
neonC.el.position.set(0, 13, 0);
neonC.el.rotation.z = 2;

var neonD = new Neon();
neonD.el.position.set(0, -13, 0);
neonD.el.rotation.z = 2;

neonsSection.add(neonA.el);
neonsSection.add(neonB.el);
neonsSection.add(neonC.el);
neonsSection.add(neonD.el);

neonA.el.visible = false;
neonB.el.visible = false;
neonC.el.visible = false;
neonD.el.visible = false;
smoke.el.visible = false;

neonsSection.onStart(function () {
  neonA.start();
  neonB.start();
  neonC.start();
  neonD.start();

  neonA.el.visible = true;
  neonB.el.visible = true;
  neonC.el.visible = true;
  neonD.el.visible = true;
});

neonsSection.onStop(function () {
  neonA.stop();
  neonB.stop();
  neonC.stop();
  neonD.stop();

  neonA.el.visible = false;
  neonB.el.visible = false;
  neonC.el.visible = false;
  neonD.el.visible = false;
});

var smokePlaying = false;

neonsSection.smokeStart = function () {
  if (smokePlaying) {
    return false;
  }

  smokePlaying = true;

  smoke.start();

  smoke.el.visible = true;
};

neonsSection.smokeStop = function () {
  if (!smokePlaying) {
    return false;
  }

  smokePlaying = false;

  smoke.stop();

  smoke.el.visible = false;
};

module.exports = neonsSection;
},{"../classes/SectionClass":4,"../objects3D/NeonObject3D":37,"../objects3D/SmokeObject3D":39}],58:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var TextPanel = require('../objects3D/TextPanelObject3D');
var Rocks = require('../objects3D/RocksObject3D');

var rocksSection = new Section('rocks');

var rocks = new Rocks();
rocksSection.add(rocks.el);

var text = new TextPanel(
  'T A K E \n T H E I R \n A T T E M P T S',
  {
    align: 'center',
    style: '',
    size: 50,
    lineSpacing: 40
  }
);
text.el.position.set(0, 0, 0);
rocksSection.add(text.el);
text.out('down');

rocks.el.visible = false;

rocksSection.onIn(function () {
  text.in();
  rocks.in();
});

rocksSection.onOut(function (way) {
  text.out('down');
  rocks.out(way);
});

rocksSection.onStart(function () {
  rocks.start();
});

rocksSection.onStop(function () {
  rocks.stop();
});

rocksSection.show = function () {
  rocks.el.visible = true;
};

rocksSection.hide = function () {
  rocks.el.visible = false;
};

module.exports = rocksSection;
},{"../classes/SectionClass":4,"../objects3D/RocksObject3D":38,"../objects3D/TextPanelObject3D":41}],59:[function(require,module,exports){
'use strict';

var Section = require('../classes/SectionClass');

var TextPanel = require('../objects3D/TextPanelObject3D');
var Wave = require('../objects3D/WaveObject3D');

var waveSection = new Section('wave');

var wave = new Wave();
waveSection.add(wave.el);

var text = new TextPanel(
  'W O R K  A S  A  T E A M',
  {
    align: 'center',
    style: '',
    size: 60,
    lineSpacing: 40
  }
);
text.el.position.y = 10;
text.el.rotation.x = 0.2;
waveSection.add(text.el);

wave.el.visible = false;

waveSection.onIn(function (way) {
  text.in();
  wave.in(way);
});

waveSection.onOut(function (way) {
  text.out(way);
  wave.out(way);
});

waveSection.onStart(function () {
  wave.start();

  wave.el.visible = true;
});

waveSection.onStop(function () {
  wave.stop();

  wave.el.visible = false;
});

module.exports = waveSection;
},{"../classes/SectionClass":4,"../objects3D/TextPanelObject3D":41,"../objects3D/WaveObject3D":42}],60:[function(require,module,exports){
'use strict';

/**
 * Debounce a function
 * https://github.com/jashkenas/underscore
 *
 * @method debounce
 * @param {Function} [callback]
 * @param {Number} [delay]
 * @param {Boolean} [immediate]
 * @return {Function}
 */
function debounce (callback, delay, immediate) {
  var timeout;

  return function () {
    var context = this;
    var args = arguments;

    var callLater = function () {
      timeout = null;
      if (!immediate) {
        callback.apply(context, args);
      }
    };

    var callNow = immediate && !timeout;
    window.clearTimeout(timeout);
    timeout = window.setTimeout(callLater, delay);
    if (callNow) {
      callback.apply(context, args);
    }
  };
}

module.exports = debounce; 
},{}],61:[function(require,module,exports){
(function (global){
'use strict';

var THREE = (typeof window !== "undefined" ? window['THREE'] : typeof global !== "undefined" ? global['THREE'] : null);

/**
 * Dilate a geometry along the normals
 *
 * @method dilate
 * @param {THREE.Object3D} [geometry] Geometry to dilate
 * @param {Number} [offset] Desired offset
 */
function dilate (geometry, offset) {
  geometry.computeVertexNormals();

  // vertices normals
  var vertexNormals = new Array(geometry.vertices.length);

  for (var i = 0, j = geometry.faces.length; i < j; i++) {
    var face = geometry.faces[i];
    
    if (face instanceof THREE.Face4) {
      vertexNormals[face.a] = face.vertexNormals[0];
      vertexNormals[face.b] = face.vertexNormals[1];
      vertexNormals[face.c] = face.vertexNormals[2];
      vertexNormals[face.d] = face.vertexNormals[3]; 
    } else if (face instanceof THREE.Face3) {
      vertexNormals[face.a] = face.vertexNormals[0];
      vertexNormals[face.b] = face.vertexNormals[1];
      vertexNormals[face.c] = face.vertexNormals[2];
    }
  }

  // offset vertices
  for (var k = 0, l = geometry.vertices.length; k < l; k++) {
    var vertex = geometry.vertices[k];
    var normal = vertexNormals[k];

    vertex.x += normal.x * offset;
    vertex.y += normal.y * offset;
    vertex.z += normal.z * offset;
  }
}

module.exports = dilate;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zcmMvanMvdXRpbHMvZGlsYXRlVXRpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIFRIUkVFID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1RIUkVFJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydUSFJFRSddIDogbnVsbCk7XHJcblxyXG4vKipcclxuICogRGlsYXRlIGEgZ2VvbWV0cnkgYWxvbmcgdGhlIG5vcm1hbHNcclxuICpcclxuICogQG1ldGhvZCBkaWxhdGVcclxuICogQHBhcmFtIHtUSFJFRS5PYmplY3QzRH0gW2dlb21ldHJ5XSBHZW9tZXRyeSB0byBkaWxhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtvZmZzZXRdIERlc2lyZWQgb2Zmc2V0XHJcbiAqL1xyXG5mdW5jdGlvbiBkaWxhdGUgKGdlb21ldHJ5LCBvZmZzZXQpIHtcclxuICBnZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xyXG5cclxuICAvLyB2ZXJ0aWNlcyBub3JtYWxzXHJcbiAgdmFyIHZlcnRleE5vcm1hbHMgPSBuZXcgQXJyYXkoZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoKTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBnZW9tZXRyeS5mYWNlcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgIHZhciBmYWNlID0gZ2VvbWV0cnkuZmFjZXNbaV07XHJcbiAgICBcclxuICAgIGlmIChmYWNlIGluc3RhbmNlb2YgVEhSRUUuRmFjZTQpIHtcclxuICAgICAgdmVydGV4Tm9ybWFsc1tmYWNlLmFdID0gZmFjZS52ZXJ0ZXhOb3JtYWxzWzBdO1xyXG4gICAgICB2ZXJ0ZXhOb3JtYWxzW2ZhY2UuYl0gPSBmYWNlLnZlcnRleE5vcm1hbHNbMV07XHJcbiAgICAgIHZlcnRleE5vcm1hbHNbZmFjZS5jXSA9IGZhY2UudmVydGV4Tm9ybWFsc1syXTtcclxuICAgICAgdmVydGV4Tm9ybWFsc1tmYWNlLmRdID0gZmFjZS52ZXJ0ZXhOb3JtYWxzWzNdOyBcclxuICAgIH0gZWxzZSBpZiAoZmFjZSBpbnN0YW5jZW9mIFRIUkVFLkZhY2UzKSB7XHJcbiAgICAgIHZlcnRleE5vcm1hbHNbZmFjZS5hXSA9IGZhY2UudmVydGV4Tm9ybWFsc1swXTtcclxuICAgICAgdmVydGV4Tm9ybWFsc1tmYWNlLmJdID0gZmFjZS52ZXJ0ZXhOb3JtYWxzWzFdO1xyXG4gICAgICB2ZXJ0ZXhOb3JtYWxzW2ZhY2UuY10gPSBmYWNlLnZlcnRleE5vcm1hbHNbMl07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBvZmZzZXQgdmVydGljZXNcclxuICBmb3IgKHZhciBrID0gMCwgbCA9IGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDsgayA8IGw7IGsrKykge1xyXG4gICAgdmFyIHZlcnRleCA9IGdlb21ldHJ5LnZlcnRpY2VzW2tdO1xyXG4gICAgdmFyIG5vcm1hbCA9IHZlcnRleE5vcm1hbHNba107XHJcblxyXG4gICAgdmVydGV4LnggKz0gbm9ybWFsLnggKiBvZmZzZXQ7XHJcbiAgICB2ZXJ0ZXgueSArPSBub3JtYWwueSAqIG9mZnNldDtcclxuICAgIHZlcnRleC56ICs9IG5vcm1hbC56ICogb2Zmc2V0O1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBkaWxhdGU7Il19
},{}],62:[function(require,module,exports){
'use strict';

/**
 * Set loop on a TweenLite tween
 * must be passed on onComplete
 *
 * @method loop
 */
function loop () {
  /*jshint validthis: true */
  
  this.restart();
}

module.exports = loop;
},{}],63:[function(require,module,exports){
'use strict';

/**
 * Map a value from one range to another
 *
 * @method map
 * @param {Number} [value] Value to map
 * @param {Array} [oldRange] Range to map from
 * @param {Array} [newRange] Range to map to
 * @return {Number} Mapped value
 */
function map (value, oldRange, newRange) {
  var newValue = (value - oldRange[0]) * (newRange[1] - newRange[0]) / (oldRange[1] - oldRange[0]) + newRange[0];
  return Math.min(Math.max(newValue, newRange[0]) , newRange[1]);
}

module.exports = map;
},{}],64:[function(require,module,exports){
// http://mrl.nyu.edu/~perlin/noise/
var ImprovedNoise = function () {
  var p = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,
       23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,
       174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,
       133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,
       89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,
       202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,
       248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,
       178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,
       14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,
       93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];

  for ( var i = 0; i < 256 ; i++ ) {

      p[ 256 + i ] = p[ i ];

  }

  function fade( t ) {

      return t * t * t * ( t * ( t * 6 - 15 ) + 10 );

  }

  function lerp( t, a, b ) {

      return a + t * ( b - a );

  }

  function grad( hash, x, y, z ) {

      var h = hash & 15;
      var u = h < 8 ? x : y, v = h < 4 ? y : h == 12 || h == 14 ? x : z;
      return ( ( h & 1 ) == 0 ? u : -u ) + ( ( h & 2 ) == 0 ? v : -v );

  }

  return {

      noise: function ( x, y, z ) {

          var floorX = Math.floor( x ), floorY = Math.floor( y ), floorZ = Math.floor( z );

          var X = floorX & 255, Y = floorY & 255, Z = floorZ & 255;

          x -= floorX;
          y -= floorY;
          z -= floorZ;

          var xMinus1 = x -1, yMinus1 = y - 1, zMinus1 = z - 1;

          var u = fade( x ), v = fade( y ), w = fade( z );

          var A = p[ X ] + Y, AA = p[ A ] + Z, AB = p[ A + 1 ] + Z, B = p[ X + 1 ] + Y, BA = p[ B ] + Z, BB = p[ B + 1 ] + Z;

          return lerp( w, lerp( v, lerp( u, grad( p[ AA ], x, y, z ),
                 grad( p[ BA ], xMinus1, y, z ) ),
                 lerp( u, grad( p[ AB ], x, yMinus1, z ),
                 grad( p[ BB ], xMinus1, yMinus1, z ) ) ),
                 lerp( v, lerp( u, grad( p[ AA + 1 ], x, y, zMinus1 ),
                 grad( p[ BA + 1 ], xMinus1, y, z - 1 ) ),
                 lerp( u, grad( p[ AB + 1 ], x, yMinus1, zMinus1 ),
                 grad( p[ BB + 1 ], xMinus1, yMinus1, zMinus1 ) ) ) );

      }
  }
}

var currentRandom = Math.random;

// Pseudo-random generator
function Marsaglia(i1, i2) {
  // from http://www.math.uni-bielefeld.de/~sillke/ALGORITHMS/random/marsaglia-c
  var z=i1 || 362436069, w= i2 || 521288629;
  var nextInt = function() {
    z=(36969*(z&65535)+(z>>>16)) & 0xFFFFFFFF;
    w=(18000*(w&65535)+(w>>>16)) & 0xFFFFFFFF;
    return (((z&0xFFFF)<<16) | (w&0xFFFF)) & 0xFFFFFFFF;
  };
 
  this.nextDouble = function() {
    var i = nextInt() / 4294967296;
    return i < 0 ? 1 + i : i;
  };
  this.nextInt = nextInt;
}
Marsaglia.createRandomized = function() {
  var now = new Date();
  return new Marsaglia((now / 60000) & 0xFFFFFFFF, now & 0xFFFFFFFF);
};      

// Noise functions and helpers
function PerlinNoise(seed) {
  var rnd = seed !== undefined ? new Marsaglia(seed) : Marsaglia.createRandomized();
  var i, j;
  // http://www.noisemachine.com/talk1/17b.html
  // http://mrl.nyu.edu/~perlin/noise/
  // generate permutation
  var p = new Array(512);
  for(i=0;i<256;++i) { p[i] = i; }
  for(i=0;i<256;++i) { var t = p[j = rnd.nextInt() & 0xFF]; p[j] = p[i]; p[i] = t; }
  // copy to avoid taking mod in p[0];
  for(i=0;i<256;++i) { p[i + 256] = p[i]; }
 
  function grad3d(i,x,y,z) {        
    var h = i & 15; // convert into 12 gradient directions
    var u = h<8 ? x : y,                
        v = h<4 ? y : h===12||h===14 ? x : z;
    return ((h&1) === 0 ? u : -u) + ((h&2) === 0 ? v : -v);
  }

  function grad2d(i,x,y) {
    var v = (i & 1) === 0 ? x : y;
    return (i&2) === 0 ? -v : v;
  }
 
  function grad1d(i,x) {
    return (i&1) === 0 ? -x : x;
  }
 
  function lerp(t,a,b) { return a + t * (b - a); }
   
  this.noise3d = function(x, y, z) {
    var X = Math.floor(x)&255, Y = Math.floor(y)&255, Z = Math.floor(z)&255;
    x -= Math.floor(x); y -= Math.floor(y); z -= Math.floor(z);
    var fx = (3-2*x)*x*x, fy = (3-2*y)*y*y, fz = (3-2*z)*z*z;
    var p0 = p[X]+Y, p00 = p[p0] + Z, p01 = p[p0 + 1] + Z, p1  = p[X + 1] + Y, p10 = p[p1] + Z, p11 = p[p1 + 1] + Z;
    return lerp(fz,
      lerp(fy, lerp(fx, grad3d(p[p00], x, y, z), grad3d(p[p10], x-1, y, z)),
               lerp(fx, grad3d(p[p01], x, y-1, z), grad3d(p[p11], x-1, y-1,z))),
      lerp(fy, lerp(fx, grad3d(p[p00 + 1], x, y, z-1), grad3d(p[p10 + 1], x-1, y, z-1)),
               lerp(fx, grad3d(p[p01 + 1], x, y-1, z-1), grad3d(p[p11 + 1], x-1, y-1,z-1))));
  };
 
  this.noise2d = function(x, y) {
    var X = Math.floor(x)&255, Y = Math.floor(y)&255;
    x -= Math.floor(x); y -= Math.floor(y);
    var fx = (3-2*x)*x*x, fy = (3-2*y)*y*y;
    var p0 = p[X]+Y, p1  = p[X + 1] + Y;
    return lerp(fy,
      lerp(fx, grad2d(p[p0], x, y), grad2d(p[p1], x-1, y)),
      lerp(fx, grad2d(p[p0 + 1], x, y-1), grad2d(p[p1 + 1], x-1, y-1)));
  };

  this.noise1d = function(x) {
    var X = Math.floor(x)&255;
    x -= Math.floor(x);
    var fx = (3-2*x)*x*x;
    return lerp(fx, grad1d(p[X], x), grad1d(p[X+1], x-1));
  };
}

//  these are lifted from Processing.js
// processing defaults
var noiseProfile = { generator: undefined, octaves: 4, fallout: 0.5, seed: undefined};

function noise(x, y, z) {
  if(noiseProfile.generator === undefined) {
    // caching
    noiseProfile.generator = new PerlinNoise(noiseProfile.seed);
  }
  var generator = noiseProfile.generator;
  var effect = 1, k = 1, sum = 0;
  for(var i=0; i<noiseProfile.octaves; ++i) {
    effect *= noiseProfile.fallout;        
    switch (arguments.length) {
    case 1:
      sum += effect * (1 + generator.noise1d(k*x))/2; break;
    case 2:
      sum += effect * (1 + generator.noise2d(k*x, k*y))/2; break;
    case 3:
      sum += effect * (1 + generator.noise3d(k*x, k*y, k*z))/2; break;
    }
    k *= 2;
  }
  return sum;
}

module.exports = noise;
},{}],65:[function(require,module,exports){
'use strict';

/**
 * Return a random value in a specified range
 *
 * @method random
 * @param {Number} [low] Lowest value possible
 * @param {Number} [high] Highest value possible
 * @param {Boolean} [round=false] Floor the value?
 * @return {Number} Random value
 */
function random (low, high, round) {
  round = round || false;
  
  var randomValue = Math.random() * (high - low) + low;

  if (round) {
    return Math.floor(randomValue);
  }
  
  return randomValue;
}

module.exports = random;
},{}],66:[function(require,module,exports){
'use strict';

/**
 * Set yoyo on a TweenLite tween
 * must be passed on onComplete and onReverseComplete
 *
 * @method yoyo
 */
function yoyo () {
  /*jshint validthis: true */
  
  if (this.reversed()) {
    this.restart();
  } else {
    this.reverse();
  }
}

module.exports = yoyo;
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
